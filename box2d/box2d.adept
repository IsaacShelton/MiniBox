
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstdio.adept"

/// @file
/// Settings that can be overriden for your application
///

// Adept-only, equivalent to _DEBUG while building Box2D
#default b2_DEBUG true

// Adept-only, preprocessor variables to overload settings
#default b2_OVERRIDE_b2BodyUserData false
#default b2_OVERRIDE_b2FixtureUserData false
#default b2_OVERRIDE_b2JointUserData false
#default b2_OVERRIDE_b2Alloc false
#default b2_OVERRIDE_b2Free false
#default b2_OVERRIDE_b2Log false

// Tunable Constants

/// You can use this to change the length scale used by your game.
/// For example for inches you could use 39.4.
define b2_lengthUnitsPerMeter = 1.0f

/// The maximum number of vertices on a convex polygon. You cannot increase
/// this too much because b2BlockAllocator has a maximum object size.
define b2_maxPolygonVertices = 8

// User data

/// You can define this to inject whatever data you want in b2Body
#unless b2_OVERRIDE_b2BodyUserData
    struct b2BodyUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

/// You can define this to inject whatever data you want in b2Fixture
#unless b2_OVERRIDE_b2FixtureUserData
    struct b2FixtureUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

/// You can define this to inject whatever data you want in b2Joint
#unless b2_OVERRIDE_b2JointUserData
    struct b2JointUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

// Memory Allocation

/// Default allocation functions
func b2Alloc_Default(size int) ptr {
    return malloc(size)
}

func b2Free_Default(mem ptr) void {
    free(mem)
}

/// Implement this function to use your own memory allocator.
#unless b2_OVERRIDE_b2Alloc
    func alias b2Alloc(int) => b2Alloc_Default
#end

/// If you implement b2Alloc, you should also implement this function.
#unless b2_OVERRIDE_b2Free
    func alias b2Free(ptr) => b2Free_Default
#end

/// Default logging function
func b2Log_Default(string *ubyte, args va_list) void {
    vprintf(string, args)
}

/// Implement this to use your own logging.
#unless b2_OVERRIDE_b2Log
    func b2Log(string *ubyte, ...) void {
        args va_list = undef
        va_start args
        b2Log_Default(string, args)
        va_end args
    }
#end


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstdio.adept"
import "sys/cstdlib.adept"
import "sys/cfloat.adept"

// C-only, equivalent to !defined(NDEBUG)
#define b2DEBUG false

// Dumb assert to satisfy b2Assert definition
func b2Assert(value bool, file String, line usize, condition *ubyte) {
    if value, return

    file_cstr *ubyte = file.cstr()
    defer delete file_cstr

    printf('b2Assert() FAILED!!! TERMINATING...\n')
    printf('%s:%d: %s\n', file_cstr, line as int, condition)
    exit(0xFF)
}

define b2_maxFloat = cast float FLT_MAX
define b2_epsilon = cast float FLT_EPSILON
define b2_pi = 3.14159265359f

/// @file
/// Global tuning constants based on meters-kilograms-seconds (MKS) units.
///

/// The maximum number of contact points between two convex shapes. Do
/// not change this value.
define b2_maxManifoldPoints = 2

/// This is used to fatten AABBs in the dynamic tree. This allows proxies
/// to move by a small amount without triggering a tree adjustment.
/// This is in meters.
define b2_aabbExtension = 0.1f * b2_lengthUnitsPerMeter

/// This is used to fatten AABBs in the dynamic tree. This is used to predict
/// the future position based on the current displacement.
/// This is a dimensionless multiplier.
define b2_aabbMultiplier = 4.0f

/// A small length used as a collision and constraint tolerance. Usually it is
/// chosen to be numerically significant, but visually insignificant. In meters.
define b2_linearSlop = 0.005f * b2_lengthUnitsPerMeter

/// A small angle used as a collision and constraint tolerance. Usually it is
/// chosen to be numerically significant, but visually insignificant.
define b2_angularSlop = 2.0f / 180.0f * b2_pi

/// The radius of the polygon/edge shape skin. This should not be modified. Making
/// this smaller means polygons will have an insufficient buffer for continuous collision.
/// Making it larger may create artifacts for vertex collision.
define b2_polygonRadius = 2.0f * b2_linearSlop

/// Maximum number of sub-steps per contact in continuous physics simulation.
define b2_maxSubSteps = 8

// Dynamics

/// Maximum number of contacts to be handled to solve a TOI impact.
define b2_maxTOIContacts = 32

/// The maximum linear position correction used when solving constraints. This helps to
/// prevent overshoot. Meters.
define b2_maxLinearCorrection = 0.2f * b2_lengthUnitsPerMeter

/// The maximum angular position correction used when solving constraints. This helps to
/// prevent overshoot.
define b2_maxAngularCorrection = 8.0f / 180.0f * b2_pi

/// The maximum linear translation of a body per step. This limit is very large and is used
/// to prevent numerical problems. You shouldn't need to adjust this. Meters.
define b2_maxTranslation = 2.0f * b2_lengthUnitsPerMeter
define b2_maxTranslationSquared = b2_maxTranslation * b2_maxTranslation

/// The maximum angular velocity of a body. This limit is very large and is used
/// to prevent numerical problems. You shouldn't need to adjust this.
define b2_maxRotation = 0.5f * b2_pi
define b2_maxRotationSquared = b2_maxRotation * b2_maxRotation

/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
/// that overlap is removed in one time step. However using values close to 1 often lead
/// to overshoot.
define b2_baumgarte = 0.2f
define b2_toiBaumgarte = 0.75f

// Sleep

/// The time that a body must be still before it will go to sleep.
define b2_timeToSleep = 0.5f

/// A body cannot sleep if its linear velocity is above this tolerance.
define b2_linearSleepTolerance = 0.01f * b2_lengthUnitsPerMeter

/// A body cannot sleep if its angular velocity is above this tolerance.
define b2_angularSleepTolerance = 2.0f / 180.0f * b2_pi

/// Dump to a file. Only one dump file allowed at a time.
b2_dumpFile *FILE = null

func b2OpenDump(filename *ubyte) void {
    b2Assert(b2_dumpFile == null, #get __file__, #get __line__, 'b2Assert(b2_dumpFile == null)')
    b2_dumpFile = fopen(filename, 'w')
}

import basics

func b2Dump(string *ubyte, arguments ...) void {
    if b2_dumpFile == null, return

    // NOTE: For some reason, the tradional variadic argument version isn't working
    //args va_list = undef
    //va_start args
    //vfprintf(b2_dumpFile, string, args)
    //va_end args

    // NOTE: So we'll do this instead
    vsprintf(def result String, stringConstant(string), arguments)
    cstring *ubyte = result.cstr()
    defer delete cstring
    fprintf(b2_dumpFile, cstring)
}

func b2CloseDump() void {
    fclose(b2_dumpFile)
    b2_dumpFile = null
}

/// Version numbering scheme.
/// See http://en.wikipedia.org/wiki/Software_versioning
/// (significant changes, incremental changes, bug fixes)
struct b2Version (major, minor, revision int)

/// Current version.
b2_version b2Version = *static b2Version (2, 4, 0)

/// Adept VTable Missing Entry Error
func b2_common\missing_vtable_entry(classname, f_name *ubyte) void {
    printf('ERROR: %s.%s called when "this.vtable.f_%s" is null\n', classname, f_name, f_name)
    printf('    (missing virtual implementation)')
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2Color (r, g, b, a float) {
    func Set(r, g, b float, a float = 1.0f) {
        this.r = r
        this.g = g
        this.b = b
        this.a = a
    }
}

func b2Color() b2Color {
    c POD b2Color
    return c
}

func b2Color(r, g, b float, a float = 1.0f) b2Color {
    c POD b2Color = undef
    c.r = r
    c.g = g
    c.b = b
    c.a = a
    return c
}

define b2Draw\e_shapeBit        = 0x0001 ///< draw shapes
define b2Draw\e_jointBit        = 0x0002 ///< draw joint connections
define b2Draw\e_aabbBit         = 0x0004 ///< draw axis aligned bounding boxes
define b2Draw\e_pairBit         = 0x0008 ///< draw broad-phase pairs
define b2Draw\e_centerOfMassBit = 0x0010 ///< draw center of mass frame

/// Implement and register this class with a b2World to provide debug drawing of physics
/// entities in your game.
struct b2Draw (m_drawFlags uint, vtable b2DrawVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer
        if f, f(this)
    }

    func SetFlags(flags uint) {
        this.m_drawFlags = flags
    }

    func GetFlags() uint {
        return this.m_drawFlags
    }

    func AppendFlags(flags uint) {
        this.m_drawFlags |= flags
    }

    func ClearFlags(flags uint) {
        this.m_drawFlags &= ~flags
    }

    func DrawPolygon(in vertices *b2Vec2, vertexCount int, in color *b2Color) void {
        f func(ptr, *b2Vec2, int, *b2Color) void = this.vtable.f_DrawPolygon
        if f, f(this, vertices, vertexCount, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawPolygon')
    }

    func DrawSolidPolygon(in vertices *b2Vec2, vertexCount int, in color *b2Color) void {
        f func(ptr, *b2Vec2, int, *b2Color) void = this.vtable.f_DrawSolidPolygon
        if f, f(this, vertices, vertexCount, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawSolidPolygon')
    }

    func DrawCircle(in center *b2Vec2, radius float, in color *b2Color) void {
        f func(ptr, *b2Vec2, float, *b2Color) void = this.vtable.f_DrawCircle
        if f, f(this, center, radius, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawCircle')
    }

    func DrawSolidCircle(in center *b2Vec2, radius float, in axis *b2Vec2, in color *b2Color) void {
        f func(ptr, *b2Vec2, float, *b2Vec2, *b2Color) void = this.vtable.f_DrawSolidCircle
        if f, f(this, center, radius, axis, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawSolidCircle')
    }

    func DrawSegment(in p1, p2 POD b2Vec2, in color *b2Color) void {
        this.DrawSegment(&p1, &p2, color)
    }

    func DrawSegment(in p1, p2 *b2Vec2, in color *b2Color) void {
        f func(ptr, *b2Vec2, *b2Vec2, *b2Color) void = this.vtable.f_DrawSegment
        if f, f(this, p1, p2, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawSegment')
    }

    func DrawTransform(in xf *b2Transform) void {
        f func(ptr, *b2Transform) void = this.vtable.f_DrawTransform
        if f, f(this, xf); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawTransform')
    }

    func DrawPoint(in p *b2Vec2, size float, in color *b2Color) void {
        f func(ptr, *b2Vec2, float, *b2Color) void = this.vtable.f_DrawPoint
        if f, f(this, p, size, color); return

        b2_common\missing_vtable_entry('b2Draw', 'DrawPoint')
    }
}

func b2Draw(out implementation *$b2DrawLike, use_defer bool) *b2Draw {
    implementation.m_drawFlags = 0
    implementation.vtable = b2DrawVTable(null as *$b2DrawLike, use_defer)
}

struct b2DrawVTable (
    /// Destruction Handler
    f_defer,
    /// Draw a closed polygon provided in CCW order.
    //  virtual void DrawPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0
    f_DrawPolygon,
    /// Draw a solid closed polygon provided in CCW order.
    //  virtual void DrawSolidPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;
    f_DrawSolidPolygon,
    /// Draw a circle.
    //     virtual void DrawCircle(const b2Vec2& center, float radius, const b2Color& color) = 0;
    f_DrawCircle,
    /// Draw a solid circle.
    // virtual void DrawSolidCircle(const b2Vec2& center, float radius, const b2Vec2& axis, const b2Color& color) = 0;
    f_DrawSolidCircle,
    /// Draw a line segment.
    // virtual void DrawSegment(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color) = 0;
    f_DrawSegment,
    /// Draw a transform. Choose your own length scale.
    /// @param xf a transform.
    // virtual void DrawTransform(const b2Transform& xf) = 0;
    f_DrawTransform,
    /// Draw a point.
    // virtual void DrawPoint(const b2Vec2& p, float size, const b2Color& color) = 0;
    f_DrawPoint ptr
)

func b2DrawVTable(_ *$b2DrawImplementation, use_defer bool = true) b2DrawVTable {
    table POD b2DrawVTable
    table.f_defer = use_defer ? func &__defer__(*$b2DrawImplementations) : null
    table.f_DrawPolygon = func &DrawPolygon(*$b2DrawImplementations, *b2Vec2, int, *b2Color) as ptr
    table.f_DrawSolidPolygon = func &f_DrawSolidPolygon(*$b2DrawImplementations, *b2Vec2, int, *b2Color) as ptr
    table.f_DrawCircle = func &DrawCircle(*$b2DrawImplementations, *b2Vec2, float, *b2Color) as ptr
    table.f_DrawSolidCircle = func &DrawSolidCircle(*$b2DrawImplementations, *b2Vec2, float, *b2Vec2, *b2Color) as ptr
    table.f_DrawSegment = func &DrawSegment(*$b2DrawImplementations, *b2Vec2, *b2Vec2, *b2Color) as ptr
    table.f_DrawTransform = func &DrawTransform(*$b2DrawImplementations, *b2Transform) as ptr
    table.f_DrawPoint = func &DrawTransform(*$b2DrawImplementations, *b2Vec2, float, *b2Color) as ptr
    return table
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import cmath

/// This function is used to ensure that a floating point number is not a NaN or infinity.
func alias b2IsValid(float) => isfinite

func alias b2Sqrt(float) => sqrtf
func alias b2Atan2(float, float) => atan2f

/// A 2D column vector.
struct b2Vec2 (x, y float) {

    /// Set this vector to all zeros.
    func SetZero() void {
        this.x = 0.0f
        this.y = 0.0f
    }

    /// Set this vector to some specified coordinates.
    func Set(x, y float) void {
        this.x = x
        this.y = y
    }

    /// Negate this vector.
    func Negated() b2Vec2 {
        v POD b2Vec2 = undef
        v.x = 0.0f - this.x
        v.y = 0.0f - this.y
        return v
    }

    /// Read from and indexed element.
    func __access__(index int) *float {
        return index ? &this.y : &this.x
    }

    /// Add a vector to this vector.
    /// Adept-only
    func AddAssign(other POD b2Vec2) void {
        this.x += other.x
        this.y += other.y
    }

    /// Subtract a vector to this vector.
    /// Adept-only
    func SubtractAssign(other POD b2Vec2) void {
        this.x -= other.x
        this.y -= other.y
    }

    /// Multiply this vector by a scalar.
    /// Adept-only
    func MultiplyAssign(factor float) void {
        this.x *= factor
        this.y *= factor
    }

    /// Get the length of this vector (the norm).
    func Length() float {
        return b2Sqrt(this.x * this.x + this.y * this.y)
    }

    /// Get the length squared. For performance, use this instead of
    /// b2Vec2::Length (if possible).
    func LengthSquared() float {
        return this.x * this.x + this.y * this.y
    }

    /// Convert this vector into a unit vector. Returns the length.
    func Normalize() float {
        length float = this.Length()
        if length < b2_epsilon, return 0.0f

        invLength float = 1.0f / length
        this.x *= invLength
        this.y *= invLength
        return length
    }

    /// Does this vector contain finite coordinates?
    func IsValid() bool {
        return b2IsValid(this.x) && b2IsValid(this.y)
    }

    /// Get the skew vector such that dot(skew_vec, other) == cross(vec, other)
    func Skew() b2Vec2 {
        return b2Vec2(0.0f - this.y, this.x)
    }
}

/// Construct using coordinates.
func b2Vec2(x, y float = 0.0f) b2Vec2 {
    v POD b2Vec2 = undef
    v.x = x
    v.y = y
    return v
}

/// Add a vector to this vector.
func __add__(a, b POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = a.x + b.x
    c.y = a.y + b.y
    return c
}

/// Subtract a vector from this vector.
func __subtract__(a, b POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = a.x - b.x
    c.y = a.y - b.y
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(v POD b2Vec2, a float) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = v.x  * a
    c.y = v.y  * a
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(a float, v POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = v.x  * a
    c.y = v.y  * a
    return c
}

/// A 2D column vector with 3 elements.
struct b2Vec3 (x, y, z float) {
    
    /// Set this vector to all zeros.
    func SetZero() void {
        this.x = 0.0f
        this.y = 0.0f
        this.z = 0.0f
    }

    func Set(x, y, z float) void {
        this.x = x
        this.y = y
        this.z = z
    }

    func Negated() b2Vec3 {
        v POD b2Vec3 = undef
        v.x = 0.0f - this.x
        v.y = 0.0f - this.y
        v.z = 0.0f - this.z
        return v
    }

    /// Add a vector to this vector.
    func AddAssign(other POD b2Vec3) void {
        this.x += other.x
        this.y += other.y
        this.z += other.z
    }

    /// Subtract a vector from this vector.
    func SubtractAssign(other POD b2Vec3) void {
        this.x -= other.x
        this.y -= other.y
        this.z -= other.z
    }

    /// Multiply this vector by a scalar.
    func MultiplyAssign(factor float) void {
        this.x *= factor
        this.y *= factor
        this.z *= factor
    }
}

/// Construct using coordinates.
func b2Vec3(x, y, z float = 0.0f) b2Vec3 {
    v POD b2Vec3 = undef
    v.x = x
    v.y = y
    v.z = z
    return v
}

/// Add a vector to this vector.
func __add__(a, b POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = a.x + b.x
    c.y = a.y + b.y
    c.z = a.z + b.z
    return c
}

/// Subtract a vector from this vector.
func __subtract__(a, b POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = a.x - b.x
    c.y = a.y - b.y
    c.z = a.z - b.z
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(v POD b2Vec3, a float) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = v.x * a
    c.y = v.y * a
    c.z = v.z * a
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(a float, v POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = v.x * a
    c.y = v.y * a
    c.z = v.z * a
    return c
}

/// A 2-by-2 matrix. Stored in column-major order.
struct b2Mat22 (ex, ey b2Vec2) {

    /// Initialize this matrix using columns.
    func Set(c1, c2 POD b2Vec2) void {
        this.ex = c1
        this.ey = c2
    }

    /// Set this to the identity matrix.
    func SetIdentity() void {
        this.ex.x = 1.0f; this.ey.x = 0.0f
        this.ex.y = 0.0f; this.ey.y = 1.0f
    }

    /// Set this matrix to all zeros.
    func SetZero() void {
        this.ex.x = 0.0f; this.ey.x = 0.0f
        this.ex.y = 0.0f; this.ey.y = 0.0f
    }

    func GetInverse() b2Mat22 {
        a float = this.ex.x
        b float = this.ey.x
        c float = this.ex.y
        d float = this.ey.y

        B POD b2Mat22 = undef
        det float = a * d - b * c

        if det != 0.0f {
            det = 1.0f / det
        }

        B.ex.x =         det  * d; B.ey.x = (0.0f - det) * b
        B.ex.y = (0.0f - det) * c; B.ey.y =         det  * a
        return B
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases.
    func Solve(b POD b2Vec2) b2Vec2 {
        a11 float = this.ex.x
        a12 float = this.ey.x
        a21 float = this.ex.y
        a22 float = this.ey.y
        det float = a11 * a22 - a12 * a21
        
        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec2 = undef
        x.x = det * (a22 * b.x - a12 * b.y)
        x.y = det * (a11 * b.y - a21 * b.x)
        return x
    }
}

/// Construct this matrix using columns.
func b2Mat22(c1, c2 POD b2Vec2) b2Mat22 {
    m POD b2Mat22 = undef
    m.ex = c1
    m.ey = c2
    return m
}

/// Construct this matrix using scalars.
func b2Mat22(a11, a12, a21, a22 float) b2Mat22 {
    m POD b2Mat22 = undef
    m.ex.x = a11; m.ex.y = a21
    m.ey.x = a12; m.ey.y = a22
    return m
}

/// A 3-by-3 matrix. Stored in column-major order.
struct b2Mat33 (ex, ey, ez b2Vec3) {
    
    /// Set this matrix to all zeros.
    func SetZero() void {
        this.ex.SetZero()
        this.ey.SetZero()
        this.ez.SetZero()
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases.
    func Solve33(b POD b2Vec3) b2Vec3 {
        det float = b2Dot(this.ex, b2Cross(this.ey, this.ez))

        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec3 = undef
        x.x = det * b2Dot(b, b2Cross(this.ey, this.ez))
        x.y = det * b2Dot(this.ex, b2Cross(b, this.ez))
        x.z = det * b2Dot(this.ex, b2Cross(this.ey, b))
        return x
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases. Solve only the upper
    /// 2-by-2 matrix equation.
    func Solve22(b POD b2Vec2) b2Vec2 {
        a11 float = this.ex.x
        a12 float = this.ey.x
        a21 float = this.ex.y
        a22 float = this.ey.y
        det float = a11 * a22 - a12 * a21

        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec2 = undef
        x.x = det * (a22 * b.x - a12 * b.y)
        x.y = det * (a11 * b.y - a21 * b.x)
        return x
    }

    /// Get the inverse of this matrix as a 2-by-2.
    /// Returns the zero matrix if singular.
    func GetInverse22(out M *b2Mat33) void {
        a float = this.ex.x
        b float = this.ey.x
        c float = this.ex.y
        d float = this.ey.y
        det float = a * d - b * c

        if det != 0.0f {
            det = 1.0f / det
        }

        M.ex.x = det * d
        M.ey.x = -1.0f * det * b
        M.ex.z = 0.0f

        M.ex.y = -1.0f * det * c
        M.ey.y = det * a
        M.ey.z = 0.0f

        M.ez.x = 0.0f
        M.ez.y = 0.0f
        M.ez.z = 0.0f
    }

    /// Get the symmetric inverse of this matrix as a 3-by-3.
    /// Returns the zero matrix if singular.
    func GetSymInverse33(out M *b2Mat33) void {
        det float = b2Dot(this.ex, b2Cross(this.ey, this.ez))

        if det != 0.0f {
            det = 1.0f / det
        }

        a11 float = this.ex.x
        a12 float = this.ey.x
        a13 float = this.ez.x
        a22 float = this.ey.y
        a23 float = this.ez.y
        a33 float = this.ez.z

        M.ex.x = det * (a22 * a33 - a23 * a23)
        M.ex.y = det * (a13 * a23 - a12 * a33)
        M.ex.z = det * (a12 * a23 - a13 * a22)

        M.ey.x = M.ex.y
        M.ey.y = det * (a11 * a33 - a13 * a13)
        M.ey.z = det * (a13 * a12 - a11 * a23)

        M.ez.x = M.ex.z
        M.ez.y = M.ey.z
        M.ez.z = det * (a11 * a22 - a12 * a12)
    }
}

/// Construct this matrix using columns.
func b2Mat33(c1, c2, c3 POD b2Vec3) b2Mat33 {
    m POD b2Mat33 = undef
    m.ex = c1
    m.ey = c2
    m.ez = c3
    return m
}

/// Rotation
struct b2Rot (s, c float) { /// Sine and cosine

    /// Set using an angle in radians.
    func Set(angle float) void {
        this.s = sinf(angle)
        this.c = cosf(angle)
    }

    /// Set to the identity rotation
    func SetIdentity() void {
        this.s = 0.0f
        this.c = 1.0f
    }

    /// Get the angle in radians
    func GetAngle() float {
        return b2Atan2(this.s, this.c)
    }

    /// Get the x-axis
    func GetXAxis() b2Vec2 {
        return b2Vec2(this.c, this.s)
    }

    /// Get the y-axis
    func GetYAxis() b2Vec2 {
        return b2Vec2(0.0f - this.s, this.c)
    }
}

/// Initialize from an angle in radians
func b2Rot(angle float) b2Rot {
    r POD b2Rot = undef
    r.s = sinf(angle)
    r.c = cosf(angle)
    return r
}

/// A transform contains translation and rotation. It is used to represent
/// the position and orientation of rigid frames.
struct b2Transform (p b2Vec2, q b2Rot) {

    /// Set this to the identity transform.
    func SetIdentity() void {
        this.p.SetZero()
        this.q.SetIdentity()
    }

    /// Set this based on the position and angle.
    func Set(position POD b2Vec2, angle float) void {
        this.p = position
        this.q.Set(angle)
    }
}

/// Initialize using a position vector and a rotation.
func b2Transform(position POD b2Vec2, rotation POD b2Rot) b2Transform {
    t POD b2Transform
    t.p = position
    t.q = rotation
    return t
}

/// This describes the motion of a body/shape for TOI computation.
/// Shapes are defined with respect to the body origin, which may
/// not coincide with the center of mass. However, to support dynamics
/// we must interpolate the center of mass position.
struct b2Sweep (
    localCenter b2Vec2, ///< local center of mass position
    c0, c b2Vec2,       ///< center world positions
    a0, a float,        ///< world angles

    /// Fraction of the current time step in the range [0,1]
    /// c0 and a0 are the positions at alpha0.
    alpha0 float
) {
    
    /// Get the interpolated transform at a specific time.
    /// @param transform the output transform
    /// @param beta is a factor in [0,1], where 0 indicates alpha0.
    func GetTransform(out transform *b2Transform, beta float) void {
        // https://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
        transform.p = this.c0 * (1.0f - beta) + this.c * beta
        angle float = this.a0 * (1.0f - beta) + this.a * beta
        transform.q.Set(angle)

        // Shift to origin
        transform.p.SubtractAssign(b2Mul(transform.q, this.localCenter))
    }

    /// Advance the sweep forward, yielding a new initial state.
    /// @param alpha the new initial time.
    func Advance(alpha float) void {
        b2Assert(this.alpha0 < 1.0f, #get __file__, #get __line__, 'b2Assert(this.alpha0 < 1.0f)')

        beta float = (alpha - this.alpha0) / (1.0f - this.alpha0)
        this.c0.AddAssign((this.c - this.c0) * beta)
        this.a0 += beta * (this.a - this.a0)
        this.alpha0 = alpha
    }

    /// Normalize the angles.
    func Normalize() void {
        /// Normalize an angle in radians to be between -pi and pi
        twoPi float = 2.0f * b2_pi
        d float = twoPi * floorf(this.a0 / twoPi)
        this.a0 -= d
        this.a -= d
    }
}

b2Vec2_zero b2Vec2 = *static b2Vec2 (0.0f, 0.0f)

/// Perform the dot product on two vectors.
func b2Dot(a, b POD b2Vec2) float {
    return a.x * b.x + a.y * b.y
}

/// Perform the cross product on two vectors. In 2D this produces a scalar.
func b2Cross(a, b POD b2Vec2) float {
    return a.x * b.y - a.y * b.x
}

/// Perform the cross product on a vector and a scalar. In 2D this produces
/// a vector.
func b2Cross(a POD b2Vec2, s float) b2Vec2 {
    return b2Vec2(s * a.y, (0.0f - s) * a.x)
}

/// Perform the cross product on a scalar and a vector. In 2D this produces
/// a vector.
func b2Cross(s float, a POD b2Vec2) b2Vec2 {
    return b2Vec2((0.0f - s) * a.y, s * a.x)
}

/// Multiply a matrix times a vector. If a rotation matrix is provided,
/// then this transforms the vector from one frame to another.
func b2Mul(A POD b2Mat22, v POD b2Vec2) b2Vec2 {
    return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y)
}

/// Multiply a matrix transpose times a vector. If a rotation matrix is provided,
/// then this transforms the vector from one frame to another (inverse transform).
func b2MulT(A POD b2Mat22, v POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Dot(v, A.ex), b2Dot(v, A.ey))
}

func __equals__(a, b POD b2Vec2) bool {
    return a.x == b.x && a.y == b.y
}

func __not_equals__(a, b POD b2Vec2) bool {
    return a.x != b.x || a.y != b.y
}

func b2Distance(a, b POD b2Vec2) float {
    c POD b2Vec2 = a - b
    return c.Length()
}

func b2DistanceSquared(a, b POD b2Vec2) float {
    c b2Vec2 = a - b
    return b2Dot(c, c)
}

/// Perform the dot product on two vectors.
func b2Dot(a, b POD b2Vec3) float {
    return a.x * b.x + a.y * b.y + a.z * b.z
}

/// Perform the cross product on two vectors.
func b2Cross(a, b POD b2Vec3) b2Vec3 {
    return b2Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)
}

func __add__(A, B POD b2Mat22) b2Mat22 {
    return b2Mat22(A.ex + B.ex, A.ey + B.ey)
}

// A * B
func b2Mul(A, B POD b2Mat22) b2Mat22 {
    return b2Mat22(b2Mul(A, B.ex), b2Mul(A, B.ey))
}

// A^T * B
func b2MulT(A, B POD b2Mat22) b2Mat22 {
    c1 POD b2Vec2 = b2Vec2(b2Dot(A.ex, B.ex), b2Dot(A.ey, B.ex))
    c2 POD b2Vec2 = b2Vec2(b2Dot(A.ex, B.ey), b2Dot(A.ey, B.ey))
    return b2Mat22(c1, c2)
}

/// Multiply a matrix times a vector.
func b2Mul(A POD b2Mat33, v POD b2Vec3) b2Vec3 {
    return A.ex * v.x + A.ey * v.y + A.ez * v.z
}

/// Multiply a matrix times a vector.
func b2Mul22(A POD b2Mat33, v POD b2Vec2) b2Vec2 {
    return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y)
}

/// Multiply two rotations: q * r
func b2Mul(q, r POD b2Rot) b2Rot {
    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]
    // [qs  qc]   [rs  rc]   [qs*rc+qc*rs -qs*rs+qc*rc]
    // s = qs * rc + qc * rs
    // c = qc * rc - qs * rs
    qr POD b2Rot = undef
    qr.s = q.s * r.c + q.c * r.s
    qr.c = q.c * r.c - q.s * r.s
    return qr
}

/// Transpose multiply two rotations: qT * r
func b2MulT(q, r POD b2Rot) b2Rot {
    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]
    // [-qs qc]   [rs  rc]   [-qs*rc+qc*rs qs*rs+qc*rc]
    // s = qc * rs - qs * rc
    // c = qc * rc + qs * rs
    qr POD b2Rot = undef
    qr.s = q.c * r.s - q.s * r.c
    qr.c = q.c * r.c + q.s * r.s
    return qr
}

/// Rotate a vector
func b2Mul(q POD b2Rot, v POD b2Vec2) b2Vec2 {
    return b2Vec2(q.c * v.x - q.s * v.y, q.s * v.x + q.c * v.y)
}

/// Inverse rotate a vector
func b2MulT(q POD b2Rot, v POD b2Vec2) b2Vec2 {
    return b2Vec2(q.c * v.x + q.s * v.y, -q.s * v.x + q.c * v.y)
}

func b2Mul(T *b2Transform, v POD b2Vec2) b2Vec2 {
    x float = (T.q.c * v.x - T.q.s * v.y) + T.p.x
    y float = (T.q.s * v.x + T.q.c * v.y) + T.p.y
    return b2Vec2(x, y)
}

func b2Mul(T *b2Transform, v *b2Vec2) b2Vec2 {
    x float = (T.q.c * v.x - T.q.s * v.y) + T.p.x
    y float = (T.q.s * v.x + T.q.c * v.y) + T.p.y
    return b2Vec2(x, y)
}

func b2MulT(T *b2Transform, v POD b2Vec2) b2Vec2 {
    px float = v.x - T.p.x
    py float = v.y - T.p.y
    x float = (T.q.c * px + T.q.s * py)
    y float = (-1.0f * T.q.s * px + T.q.c * py)
    return b2Vec2(x, y)
}

func b2MulT(T *b2Transform, v *b2Vec2) b2Vec2 {
    px float = v.x - T.p.x
    py float = v.y - T.p.y
    x float = (T.q.c * px + T.q.s * py)
    y float = (-1.0f * T.q.s * px + T.q.c * py)
    return b2Vec2(x, y)
}

// v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p
//    = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p
func b2Mul(A, B *b2Transform) b2Transform {
    C POD b2Transform = undef
    C.q = b2Mul(A.q, B.q)
    C.p = b2Mul(A.q, B.p) + A.p
    return C
}

// v2 = A.q' * (B.q * v1 + B.p - A.p)
//    = A.q' * B.q * v1 + A.q' * (B.p - A.p)
func b2MulT(A, B *b2Transform) b2Transform {
    C POD b2Transform = undef
    C.q = b2MulT(A.q, B.q)
    C.p = b2MulT(A.q, B.p - A.p)
    return C
}

func b2Abs(a $T~__number__) $T {
    return a > 0 as $T ? a : (0 as $T) - a
}

func b2Abs(a POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Abs(a.x), b2Abs(a.y))
}

func b2Abs(A POD b2Mat22) b2Mat22 {
    return b2Mat22(b2Abs(A.ex), b2Abs(A.ey))
}

func b2Min(a $T~__number__, b $~T) $T {
    return a < b ? a : b
}

func b2Min(a, b POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Min(a.x, b.x), b2Min(a.y, b.y))
}

func b2Max(a, b $T~__number__) $T {
    return a > b ? a : b
}

func b2Max(a, b POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Max(a.x, b.x), b2Max(a.y, b.y))
}

func b2Clamp(a, low, high $T~__number__) $T {
    return b2Max(low, b2Min(a, high))
}

func b2Clamp(a, low, high POD b2Vec2) b2Vec2 {
    return b2Max(low, b2Min(a, high))
}

func b2Swap(inout a, b *$T) void {
    tmp POD $T = POD *a
    *a = POD *b
    *b = POD tmp
}

/// "Next Largest Power of 2
/// Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
/// that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
/// the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next
/// largest power of 2. For a 32-bit value:"
func b2NextPowerOfTwo(x uint) uint {
    x |= x >> 1
    x |= x >> 2
    x |= x >> 4
    x |= x >> 8
    x |= x >> 16
    return x + 1
}

func b2IsPowerOfTwo(x uint) bool {
    return x > 0 && (x & (x - 1)) == 0
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#default b2_adept_auto_define_windows_declarations true

#if __windows__
    b2Timer\s_invFrequency double = 0.0

    struct b2Timer (m_start double)

    #if b2_adept_auto_define_windows_declarations
        union LARGE_INTEGER (
            DUMMYSTRUCTNAME struct (LowPart uint, HighPart int),
            u struct (LowPart uint, HighPart int),
            QuadPart long
        )

        alias BOOL = int

        foreign QueryPerformanceFrequency(*LARGE_INTEGER) BOOL
        foreign QueryPerformanceCounter(*LARGE_INTEGER) BOOL
    #end
    
    // Windows Implementation for Procedures defined in b2_timer.h

    func b2Timer() b2Timer {
        timer POD b2Timer = undef

        largeInteger LARGE_INTEGER = undef

        if b2Timer\s_invFrequency == 0.0 {
            QueryPerformanceFrequency(&largeInteger)
            b2Timer\s_invFrequency = cast double largeInteger.QuadPart

            if b2Timer\s_invFrequency > 0.0 {
                b2Timer\s_invFrequency = 1000.0 / b2Timer\s_invFrequency
            }
        }

        QueryPerformanceCounter(&largeInteger)
        timer.m_start = largeInteger.QuadPart as double
        return timer
    }

    func Reset(this *b2Timer) {
        largeInteger LARGE_INTEGER = undef
        QueryPerformanceCounter(&largeInteger)
        this.m_start = cast double largeInteger.QuadPart
    }

    func GetMilliseconds(this *b2Timer) float {
        largeInteger LARGE_INTEGER = undef
        QueryPerformanceCounter(&largeInteger)
        count double = cast double largeInteger.QuadPart
        ms float = cast float (b2Timer\s_invFrequency * (count - this.m_start))
        return ms
    }
#else
    struct b2Timer (m_start_sec ulong, m_start_usec ulong)

    // Unix Implementation for Procedures defined in b2_timer.h

    import 'unix/sys/time.adept'

    func b2Timer() b2Timer {
        timer POD b2Timer = undef
        timer.Reset()
        return timer
    }

    func Reset(this *b2Timer) {
        t POD timeval = undef
        gettimeofday(&t, null)
        this.m_start_sec = t.tv_sec
        this.m_start_usec = t.tv_usec
    }

    func GetMilliseconds(this *b2Timer) float {
        t POD timeval = undef
        gettimeofday(&t, null)
        start_sec time_t = this.m_start_sec
        start_usec suseconds_t = this.m_start_usec

        // http://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html
        if t.tv_usec < start_usec {
            nsec int = (start_usec - t.tv_usec) / 1000000 + 1
            start_usec -= 1000000 * nsec
            start_sec += nsec
        }

        if t.tv_usec - start_usec > 1000000 {
            nsec int = (t.tv_usec - start_usec) / 1000000
            start_usec += 1000000 * nsec
            start_sec -= nsec
        }

        return 1000.0f * cast float (t.tv_sec - start_sec) + 0.001f * cast float (t.tv_usec - start_usec)
    }
#end

// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// (requires b2BlockAllocator)

/// This holds the mass data computed for a shape.
struct b2MassData (
    mass float,     /// The mass of the shape, usually in kilograms.
    center b2Vec2,  /// The position of the shape's centroid relative to the shape's origin.
    I float         /// The rotational inertia of the shape about the local origin.
)

/// A shape is used for collision detection. You can create a shape however you like.
/// Shapes used for simulation in b2World are created automatically when a b2Fixture
/// is created. Shapes may encapsulate a one or more child shapes.
enum b2ShapeType (e_circle, e_edge, e_polygon, e_chain, e_typeCount)

struct b2Shape (
    m_type b2ShapeType,
    
    /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for
    /// making rounded polygons.
    m_radius float,

    // Adept-only explicit VTable
    vtable *b2ShapeVTable
) {
    func __defer__ {
        // @virtual
        if this.vtable, this.vtable.Defer(this)
    }

    /// Clone the concrete shape using the provided allocator.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        // @virtual @=0
        return this.vtable.Clone(this, allocator)
    }

    /// Get the type of this shape. You can use this to down cast to the concrete shape.
    /// @return the shape type.
    func GetType() b2ShapeType {
        return this.m_type
    }

    /// Get the number of child primitives.
    func GetChildCount() int {
        // @virtual @=0
        return this.vtable.GetChildCount(this)
    }

    /// Test a point for containment in this shape. This only works for convex shapes.
    /// @param xf the shape world transform.
    /// @param p a point in world coordinates.
    func TestPoint(xf *b2Transform, p *b2Vec2) bool {
        // @virtual @=0
        return this.vtable.TestPoint(this, xf, p)
    }

    /// Cast a ray against a child shape.
    /// @param output the ray-cast results.
    /// @param input the ray-cast input parameters.
    /// @param transform the transform to be applied to the shape.
    /// @param childIndex the child shape index
    func RayCast(output *b2RayCastOutput, input POD b2RayCastInput, transform POD b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, &input, &transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, transform POD b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, input, &transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input POD b2RayCastInput, transform *b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, &input, transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, transform *b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, input, transform, childIndex)
    }

    /// Given a transform, compute the associated axis aligned bounding box for a child shape.
    /// @param aabb returns the axis aligned box.
    /// @param xf the world transform of the shape.
    /// @param childIndex the child shape
    func ComputeAABB(out aabb *b2AABB, xf POD b2Transform, childIndex int) void {
        // @virtual @=0
        this.vtable.ComputeAABB(this, aabb, &xf, childIndex)
    }
    func ComputeAABB(out aabb *b2AABB, in xf *b2Transform, childIndex int) void {
        // @virtual @=0
        this.vtable.ComputeAABB(this, aabb, xf, childIndex)
    }

    /// Compute the mass properties of this shape using its dimensions and density.
    /// The inertia tensor is computed about the local origin.
    /// @param massData returns the mass data for this shape.
    /// @param density the density in kilograms per meter squared.
    func ComputeMass(out massData *b2MassData, density float) void {
        // @virtual @=0
        this.vtable.ComputeMass(this, massData, density)
    }
}

// NOTE: All virtual methods in b2ShapeVTable take pointers for non-primitive arguments
// This is not the same as those in b2Shape.
struct b2ShapeVTable (
    f_defer, // (nullable)
    f_clone,
    f_getChildCount,
    f_testPoint,
    f_rayCast,
    f_computeAABB,
    f_computeMass ptr
) {
    func assertNoneNull() void {
        repeat static sizeof(*this) / sizeof ptr - 1 {
            // NOTE: Skip over 'f_defer' since it is nullable
            if (this as *ptr)[idx + 1] == null {
                printf('b2ShapeVTable.assertNoneNull() FAILED!!! TERMINATING...\n')
                exit(1)
            }
        }
    }

    #if b2_DEBUG
    func dump() void {
        printf('[b2ShapeVTable] {\n')
        printf('[b2ShapeVTable] f_defer => %p\n', this.f_defer)
        printf('[b2ShapeVTable] f_clone => %p\n', this.f_clone)
        printf('[b2ShapeVTable] f_getChildCount => %p\n', this.f_getChildCount)
        printf('[b2ShapeVTable] f_testPoint => %p\n', this.f_testPoint)
        printf('[b2ShapeVTable] f_rayCast => %p\n', this.f_rayCast)
        printf('[b2ShapeVTable] f_computeAABB => %p\n', this.f_computeAABB)
        printf('[b2ShapeVTable] f_computeMass => %p\n', this.f_computeMass)
        printf('[b2ShapeVTable] }\n')
    }
    #end
    
    func Defer(shape ptr) void {
        unless this.f_defer, return

        f func(ptr) void = this.f_defer as func(ptr) void
        f(shape)
    }

    func Clone(shape ptr, allocator *b2BlockAllocator) *b2Shape {
        f func(ptr, *b2BlockAllocator) *b2Shape = this.f_clone as func(ptr, *b2BlockAllocator) *b2Shape
        return f(shape, allocator)
    }

    func GetChildCount(shape ptr) int {
        f func(ptr) int = this.f_getChildCount as func(ptr) int
        return f(shape)
    }

    func TestPoint(shape ptr, xf *b2Transform, p *b2Vec2) bool {
        f func(ptr, *b2Transform, *b2Vec2) bool = this.f_testPoint as func(ptr, *b2Transform, *b2Vec2) bool
        return f(shape, xf, p)
    }

    func RayCast(shape ptr, output *b2RayCastOutput, input *b2RayCastInput, transform *b2Transform, childIndex int) bool {
        f func(ptr, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) bool = this.f_rayCast as func(ptr, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) bool
        return f(shape, output, input, transform, childIndex)
    }

    func ComputeAABB(shape ptr, out aabb *b2AABB, xf *b2Transform, childIndex int) void {
        f func(ptr, *b2AABB, *b2Transform, int) void = this.f_computeAABB as func(ptr, *b2AABB, *b2Transform, int) void
        f(shape, aabb, xf, childIndex)
    }

    func ComputeMass(shape ptr, out massData *b2MassData, density float) void {
        f func(ptr, *b2MassData, float) void = this.f_computeMass as func(ptr, *b2MassData, float) void
        f(shape, massData, density)
    }
}

func b2ShapeVTable(f_defer, f_clone, f_getChildCount, f_testPoint, f_rayCast, f_computeAABB, f_computeMass ptr) b2ShapeVTable {
    v POD b2ShapeVTable
    v.f_defer = f_defer
    v.f_clone = f_clone
    v.f_getChildCount = f_getChildCount
    v.f_testPoint = f_testPoint
    v.f_rayCast = f_rayCast
    v.f_computeAABB = f_computeAABB
    v.f_computeMass = f_computeMass
    return v
}

func b2ShapeVTable(_ *$b2ShapeLike, use_defer bool) b2ShapeVTable {
    return b2ShapeVTable(
        use_defer ? func &__defer__(*$b2ShapeLike) as ptr : null,
        func &Clone(*$b2ShapeLike, *b2BlockAllocator) as ptr,
        func &GetChildCount(*$b2ShapeLike) as ptr,
        func &TestPoint(*$b2ShapeLike, *b2Transform, *b2Vec2) as ptr,
        func &RayCast(*$b2ShapeLike, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) as ptr,
        func &ComputeAABB(*$b2ShapeLike, *b2AABB, *b2Transform, int) as ptr,
        func &ComputeMass(*$b2ShapeLike, *b2MassData, float) as ptr
    )
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// A chain shape is a free form sequence of line segments.
/// The chain has one-sided collision, with the surface normal pointing to the right of the edge.
/// This provides a counter-clockwise winding like the polygon shape.
/// Connectivity information is used to create smooth collisions.
/// @warning the chain will not collide properly if there are self-intersections.
struct b2ChainShape (
    struct b2Shape,

    /// The vertices. Owned by this class.
    m_vertices *b2Vec2,

    /// The vertex count.
    m_count int,

    m_prevVertex, m_nextVertex b2Vec2
) {
    /// The destructor frees the vertices using b2Free.
    verbatim func __defer__ {
        this.Clear()
    }

    /// Clear all data.
    func Clear() void {
        b2Free(this.m_vertices)
        this.m_vertices = null
        this.m_count = 0
    }

    /// Create a loop. This automatically adjusts connectivity.
    /// @param vertices an array of vertices, these are copied
    /// @param count the vertex count
    func CreateLoop(vertices *b2Vec2, count int) void {
        b2Assert(this.m_vertices == null && this.m_count == 0, #get __file__, #get __line__, 'b2Assert(this.m_vertices == null && this.m_count == 0)')
        b2Assert(count >= 3, #get __file__, #get __line__, 'b2Assert(count >= 3)')

        if count < 3, return

        for(i int = 1; i < count; ++i){
            v1 POD b2Vec2 = vertices[i - 1]
            v2 POD b2Vec2 = vertices[i]

            // If the code crashes here, it means your vertices are too close together.
            b2Assert(b2DistanceSquared(v1, v2) > b2_linearSlop * b2_linearSlop, #get __file__, #get __line__, 'b2Assert(b2DistanceSquared(v1, v2) > b2_linearSlop * b2_linearSlop)')
        }

        this.m_count = count + 1
        this.m_vertices = b2Alloc(this.m_count * sizeof b2Vec2) as *b2Vec2
        memcpy(this.m_vertices, vertices, count * sizeof b2Vec2)
        this.m_vertices[count] = this.m_vertices[0]
        this.m_prevVertex = this.m_vertices[this.m_count - 2]
        this.m_nextVertex = this.m_vertices[1]
    }

    /// Create a chain with ghost vertices to connect multiple chains together.
    /// @param vertices an array of vertices, these are copied
    /// @param count the vertex count
    /// @param prevVertex previous vertex from chain that connects to the start
    /// @param nextVertex next vertex from chain that connects to the end
    func CreateChain(vertices *b2Vec2, count int, in prevVertex *b2Vec2, in nextVertex *b2Vec2) void {
        b2Assert(this.m_vertices == null && this.m_count == 0, #get __file__, #get __line__, 'b2Assert(this.m_vertices == null && this.m_count == 0)')
        b2Assert(count >= 2, #get __file__, #get __line__, 'b2Assert(count >= 2)')

        for(i int = 1; i < count; ++i){
            // If the code crashes here, it means your vertices are too close together.
            b2Assert(b2DistanceSquared(vertices[i - 1], vertices[i]) > b2_linearSlop * b2_linearSlop, #get __file__, #get __line__, 'b2Assert(b2DistanceSquared(vertices[i - 1], vertices[i]) > b2_linearSlop * b2_linearSlop)')
        }

        this.m_count = count
        this.m_vertices = b2Alloc(count * sizeof b2Vec2) as *b2Vec2
        memcpy(this.m_vertices, vertices, this.m_count * sizeof b2Vec2)

        this.m_prevVertex = *prevVertex
        this.m_nextVertex = *nextVertex
    }

    /// Implement b2Shape. Vertices are cloned using b2Alloc.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2ChainShape)
        clone *b2ChainShape = b2ChainShape(mem)
        clone.CreateChain(this.m_vertices, this.m_count, &this.m_prevVertex, &this.m_nextVertex)
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return this.m_count - 1 // edge count = vertex count - 1
    }

    /// Get a child edge.
    func GetChildEdge(in edge *b2EdgeShape, index int) void {
        b2Assert(0 <= index && index < this.m_count - 1, #get __file__, #get __line__, 'b2Assert(0 <= index && index < this.m_count - 1)')
        edge.m_type = b2ShapeType::e_edge
        edge.m_radius = this.m_radius

        edge.m_vertex1 = this.m_vertices[index + 0]
        edge.m_vertex2 = this.m_vertices[index + 1]
        edge.m_oneSided = true

        if index > 0 {
            edge.m_vertex0 = this.m_vertices[index - 1]
        } else {
            edge.m_vertex0 = this.m_prevVertex
        }

        if index < this.m_count - 2 {
            edge.m_vertex3 = this.m_vertices[index + 2]
        } else {
            edge.m_vertex3 = this.m_nextVertex
        }
    }

    /// This always return false.
    /// @see b2Shape::TestPoint
    func TestPoint(in _transform *b2Transform, in _p *b2Vec2) bool {
        return false
    }

    /// Implement b2Shape.
    func RayCast(output *b2RayCastOutput, in input *b2RayCastInput, in transform *b2Transform, childIndex int) bool {
        b2Assert(childIndex < this.m_count, #get __file__, #get __line__, 'b2Assert(childIndex < this.m_count)')

        edgeShape POD b2EdgeShape = b2EdgeShape()

        i1 int = childIndex
        i2 int = childIndex + 1
        if i2 == this.m_count {
            i2 = 0
        }

        edgeShape.m_vertex1 = this.m_vertices[i1]
        edgeShape.m_vertex2 = this.m_vertices[i2]

        return edgeShape.RayCast(output, input, transform, 0)
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(aabb *b2AABB, in xf *b2Transform, childIndex int) void {
        b2Assert(childIndex < this.m_count, #get __file__, #get __line__, 'b2Assert(childIndex < this.m_count)')

        i1 int = childIndex
        i2 int = childIndex + 1

        if i2 == this.m_count {
            i2 = 0
        }

        v1 POD b2Vec2 = b2Mul(xf, this.m_vertices[i1])
        v2 POD b2Vec2 = b2Mul(xf, this.m_vertices[i2])

        lower POD b2Vec2 = b2Min(v1, v2)
        upper POD b2Vec2 = b2Max(v1, v2)

        r POD b2Vec2 = b2Vec2(this.m_radius, this.m_radius)
        aabb.lowerBound = lower - r
        aabb.upperBound = upper + r
    }

    /// Chains have zero mass.
    /// @see b2Shape::ComputeMass
    func ComputeMass(massData *b2MassData, _density float) void {
        massData.mass = 0.0f
        massData.center.SetZero()
        massData.I = 0.0f
    }
}

func b2ChainShape() b2ChainShape {
    c POD b2ChainShape = undef
    return *b2ChainShape(&c)
}

func b2ChainShape(mem *b2ChainShape) *b2ChainShape {
    mem.m_type = b2ShapeType::e_chain
    mem.m_radius = b2_polygonRadius
    mem.vtable = &_b2ChainShape_vtable
    mem.m_vertices = null
    mem.m_count = 0
    return mem
}

_b2ChainShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2ChainShape, true)


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// A line segment (edge) shape. These can be connected in chains or loops
/// to other edge shapes. Edges created independently are two-sided and do
/// no provide smooth movement across junctions.
struct b2EdgeShape (
    struct b2Shape,
    m_vertex1, m_vertex2 b2Vec2, /// These are the edge vertices
    m_vertex0, m_vertex3 b2Vec2, /// Optional adjacent vertices. These are used for smooth collision.
    m_oneSided bool              /// Uses m_vertex0 and m_vertex3 to create smooth collision.
) {
    /// Set this as a part of a sequence. Vertex v0 precedes the edge and vertex v3
    /// follows. These extra vertices are used to provide smooth movement
    /// across junctions. This also makes the collision one-sided. The edge
    /// normal points to the right looking from v1 to v2.
    func SetOneSided(in v0, v1, v2, v3 *b2Vec2) void {
        this.m_vertex0 = POD *v0
        this.m_vertex1 = POD *v1
        this.m_vertex2 = POD *v2
        this.m_vertex3 = POD *v3
        this.m_oneSided = true
    }

    /// Set this as an isolated edge. Collision is two-sided.
    func SetTwoSided(in v1, v2 *b2Vec2) void {
        this.m_vertex1 = POD *v1
        this.m_vertex2 = POD *v2
        this.m_oneSided = false
    }

    /// Implement b2Shape.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2EdgeShape)
        clone *b2EdgeShape = b2EdgeShape(mem as *b2EdgeShape)
        *clone = POD *this
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return 1
    }

    /// @see b2Shape::TestPoint
    func TestPoint(in _transform *b2Transform, in _p *b2Vec2) bool {
        return false
    }

    /// Implement b2Shape.
    // p = p1 + t * d
    // v = v1 + s * e
    // p1 + t * d = v1 + s * e
    // s * e - t * d = p1 - v1
    func RayCast(
        out output *b2RayCastOutput,
        in input *b2RayCastInput,
        in xf *b2Transform,
        in _childIndex int
    ) bool {
        // Put the ray into the edge's frame of reference.
        p1 POD b2Vec2 = b2MulT(xf.q, input.p1 - xf.p)
        p2 POD b2Vec2 = b2MulT(xf.q, input.p2 - xf.p)
        d POD b2Vec2 = p2 - p1

        v1 POD b2Vec2 = this.m_vertex1
        v2 POD b2Vec2 = this.m_vertex2
        e POD b2Vec2 = v2 - v1

        // Normal points to the right, looking from v1 at v2
        normal POD b2Vec2 = POD b2Vec2(e.y, -e.x)
        normal.Normalize()

        // q = p1 + t * d
        // dot(normal, q - v1) = 0
        // dot(normal, p1 - v1) + t * dot(normal, d) = 0
        numerator float = b2Dot(normal, v1 - p1)
        if this.m_oneSided && numerator > 0.0f, return false

        denominator float = b2Dot(normal, d)
        if denominator == 0.0f, return false

        t float = numerator / denominator
        if t < 0.0f || input.maxFraction < t, return false

        q POD b2Vec2 = p1 + t * d

        // q = v1 + s * r
        // s = dot(q - v1, r) / dot(r, r)
        r POD b2Vec2 = v2 - v1
        rr float = b2Dot(r, r)
        if rr == 0.0f, return false

        s float = b2Dot(q - v1, r) / rr
        if s < 0.0f || 1.0f < s, return false

        output.fraction = t

        if numerator > 0.0f {
            output.normal = b2Mul(xf.q, normal).Negated()
        } else {
            output.normal = b2Mul(xf.q, normal)
        }

        return true
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(
        out aabb *b2AABB,
        in xf *b2Transform,
        in _childIndex int
    ) void {
        v1 POD b2Vec2 = b2Mul(xf, this.m_vertex1)
        v2 POD b2Vec2 = b2Mul(xf, this.m_vertex2)

        lower POD b2Vec2 = b2Min(v1, v2)
        upper POD b2Vec2 = b2Max(v1, v2)

        r POD b2Vec2 = b2Vec2(this.m_radius, this.m_radius)
        aabb.lowerBound = lower - r
        aabb.upperBound = upper + r
    }

    /// @see b2Shape::ComputeMass
    func ComputeMass(
        out massData *b2MassData,
        in _density float
    ) void {
        massData.mass = 0.0f
        massData.center = 0.5f * (this.m_vertex1 + this.m_vertex2)
        massData.I = 0.0f
    }
}

func b2EdgeShape() b2EdgeShape {
    e POD b2EdgeShape = undef
    return *b2EdgeShape(&e)
}

func b2EdgeShape(out uninitialized *b2EdgeShape) *b2EdgeShape {
    uninitialized.m_type = b2ShapeType::e_edge
    uninitialized.m_radius = b2_polygonRadius
    uninitialized.vtable = &_b2EdgeShape_vtable
    uninitialized.m_vertex0.x = 0.0f
    uninitialized.m_vertex0.y = 0.0f
    uninitialized.m_vertex3.x = 0.0f
    uninitialized.m_vertex3.y = 0.0f
    uninitialized.m_oneSided = false
    return uninitialized
}

_b2EdgeShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2EdgeShape, false)


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// A solid circle shape
struct b2CircleShape (struct b2Shape, m_p b2Vec2) {

    /// Implement b2Shape.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2CircleShape)
        clone *b2CircleShape = b2CircleShape(mem as *b2CircleShape)
        *clone = POD *this
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return 1
    }

    /// Implement b2Shape.
    func TestPoint(in transform *b2Transform, in p *b2Vec2) bool {
        center POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        d POD b2Vec2 = *p - center
        return b2Dot(d, d) <= this.m_radius * this.m_radius
    }

    /// Implement b2Shape.
    /// @note because the circle is solid, rays that start inside do not hit because the normal is
    /// not defined.
    func RayCast(
        out output *b2RayCastOutput,
        in input *b2RayCastInput,
        in transform *b2Transform,
        in _childIndex int
    ) bool {
        // Collision Detection in Interactive 3D Environments by Gino van den Bergen
        // From Section 3.1.2
        // x = s + a * r
        // norm(x) = radius

        position POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        s POD b2Vec2 = input.p1 - position
        b float = b2Dot(s, s) - this.m_radius * this.m_radius

        // Solve quadratic equation.
        r POD b2Vec2 = input.p2 - input.p1
        c float  = b2Dot(s, r)
        rr float = b2Dot(r, r)
        sigma float = c * c - rr * b

        // Check for negative discriminant and short segment.
        if sigma < 0.0f || rr < b2_epsilon, return false

        // Find the point of intersection of the line with the circle.
        a float = 0.0f - (c + b2Sqrt(sigma))

        // Is the intersection point on the segment?
        if 0.0f <= a && a <= input.maxFraction * rr {
            a /= rr
            output.fraction = a
            output.normal = s + a * r
            output.normal.Normalize()
            return true
        }

        return false
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(
        out aabb *b2AABB,
        in transform *b2Transform,
        in _childIndex int
    ) void {
        p POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius)
        aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius)
    }

    /// @see b2Shape::ComputeMass
    func ComputeMass(
        out massData *b2MassData,
        in density float
    ) void {
        massData.mass = density * b2_pi * this.m_radius * this.m_radius
        massData.center = this.m_p

        // inertia about the local origin
        massData.I = massData.mass * (0.5f * this.m_radius * this.m_radius + b2Dot(this.m_p, this.m_p))
    }
}

func b2CircleShape() b2CircleShape {
    c POD b2CircleShape = undef
    return *b2CircleShape(&c)
}

func b2CircleShape(uninitialized *b2CircleShape) *b2CircleShape {
    uninitialized.m_type = b2ShapeType::e_circle
    uninitialized.m_radius = 0.0f
    uninitialized.vtable = &_b2CircleShape_vtable
    uninitialized.m_p.SetZero()
    return uninitialized
}

_b2CircleShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2CircleShape, false)


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// A solid convex polygon. It is assumed that the interior of the polygon is to
/// the left of each edge.
/// Polygons have a maximum number of vertices equal to b2_maxPolygonVertices.
/// In most cases you should not need many vertices for a convex polygon.
struct b2PolygonShape (
    struct b2Shape,
    m_centroid b2Vec2,
    m_vertices /* b2_maxPolygonVertices */ 8 b2Vec2,
    m_normals /* b2_maxPolygonVertices */ 8 b2Vec2,
    m_count int
) {
    /// Implement b2Shape.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2PolygonShape)
        clone *b2PolygonShape = b2PolygonShape(mem as *b2PolygonShape)
        *clone = POD *this
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return 1
    }

    /// Create a convex hull from the given array of local points.
    /// The count must be in the range [3, b2_maxPolygonVertices].
    /// @warning the points may be re-ordered, even if they form a convex polygon
    /// @warning collinear points are handled but not removed. Collinear points
    /// may lead to poor stacking behavior.
    func Set(vertices *b2Vec2, count int) {
        b2Assert(3 <= count && count <= b2_maxPolygonVertices, #get __file__, #get __line__, 'b2Assert(3 <= count && count <= b2_maxPolygonVertices)')

        if count < 3 {
            this.SetAsBox(1.0f, 1.0f)
            return
        }
        
        n int = b2Min(count, b2_maxPolygonVertices)

        // Perform welding and copy vertices into local buffer.
        ps /* b2_maxPolygonVertices */ POD 8 b2Vec2 = undef
        tempCount int = 0
        for(i int = 0; i < n; ++i){
            v POD b2Vec2 = vertices[i]

            unique bool = true
            for(j int = 0; j < tempCount; ++j){
                if(b2DistanceSquared(v, ps[j]) < ((0.5f * b2_linearSlop) * (0.5f * b2_linearSlop))){
                    unique = false
                    break
                }
            }

            if unique {
                ps[tempCount++] = v
            }
        }

        n = tempCount
        if n < 3 {
            // Polygon is degenerate.
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            this.SetAsBox(1.0f, 1.0f)
            return
        }

        // Create the convex hull using the Gift wrapping algorithm
        // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm

        // Find the right most point on the hull
        i0 int = 0
        x0 float = ps[0].x
        for(i int = 1; i < n; ++i){
            x float = ps[i].x
            if x > x0 || (x == x0 && ps[i].y < ps[i0].y) {
                i0 = i
                x0 = x
            }
        }

        hull /* b2_maxPolygonVertices */ 8 int = undef
        m int = 0
        ih int = i0

        until break {
            b2Assert(m < b2_maxPolygonVertices, #get __file__, #get __line__, 'b2Assert(m < b2_maxPolygonVertices)')
            hull[m] = ih

            ie int = 0
            for(j int = 1; j < n; ++j){
                if ie == ih {
                    ie = j
                    continue
                }

                r POD b2Vec2 = ps[ie] - ps[hull[m]]
                v POD b2Vec2 = ps[j] - ps[hull[m]]
                c float = b2Cross(r, v)
                if c < 0.0f {
                    ie = j
                }

                // Collinearity check
                if c == 0.0f && v.LengthSquared() > r.LengthSquared() {
                    ie = j
                }
            }

            ++m
            ih = ie

            if ie == i0, break
        }
        
        if m < 3 {
            // Polygon is degenerate.
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            this.SetAsBox(1.0f, 1.0f)
            return
        }

        this.m_count = m

        // Copy vertices.
        for(i int = 0; i < m; ++i){
            this.m_vertices[i] = ps[hull[i]]
        }

        // Compute normals. Ensure the edges have non-zero length.
        for(i int = 0; i < m; ++i){
            i1 int = i
            i2 int = i + 1 < m ? i + 1 : 0
            edge POD b2Vec2 = this.m_vertices[i2] - this.m_vertices[i1]
            b2Assert(edge.LengthSquared() > b2_epsilon * b2_epsilon, #get __file__, #get __line__, 'b2Assert(edge.LengthSquared() > b2_epsilon * b2_epsilon)')
            this.m_normals[i] = b2Cross(edge, 1.0f)
            this.m_normals[i].Normalize()
        }

        // Compute the polygon centroid
        this.m_centroid = b2_polygon_shape\ComputeCentroid(this.m_vertices at 0, m)
    }

    /// Build vertices to represent an axis-aligned box centered on the local origin.
    /// @param hx the half-width.
    /// @param hy the half-height.
    func SetAsBox(hx, hy float){
        this.m_count = 4
        this.m_vertices[0].Set(0.0f - hx, 0.0f - hy)
        this.m_vertices[1].Set(hx, 0.0f - hy)
        this.m_vertices[2].Set(hx, hy)
        this.m_vertices[3].Set(0.0f - hx, hy)
        this.m_normals[0].Set(0.0f, -1.0f)
        this.m_normals[1].Set(1.0f, 0.0f)
        this.m_normals[2].Set(0.0f, 1.0f)
        this.m_normals[3].Set(-1.0f, 0.0f)
        this.m_centroid.SetZero()
    }

    /// Build vertices to represent an oriented box.
    /// @param hx the half-width.
    /// @param hy the half-height.
    /// @param center the center of the box in local coordinates.
    /// @param angle the rotation of the box in local coordinates.
    func SetAsBox(hx float, hy float, center *b2Vec2, angle float) {
        this.m_count = 4
        this.m_vertices[0].Set(0.0f - hx, 0.0f - hy)
        this.m_vertices[1].Set(hx, 0.0f - hy)
        this.m_vertices[2].Set(hx, hy)
        this.m_vertices[3].Set(0.0f - hx, hy)
        this.m_normals[0].Set(0.0f, -1.0f)
        this.m_normals[1].Set(1.0f, 0.0f)
        this.m_normals[2].Set(0.0f, 1.0f)
        this.m_normals[3].Set(-1.0f, 0.0f)
        this.m_centroid = *center
        
        xf POD b2Transform = undef
        xf.p = *center
        xf.q.Set(angle)

        // Transform vertices and normals.
        for(i int = 0; i < this.m_count; ++i){
            this.m_vertices[i] = b2Mul(&xf, this.m_vertices[i])
            this.m_normals[i] = b2Mul(xf.q, this.m_normals[i])
        }
    }

    /// @see b2Shape::TestPoint
    func TestPoint(xf *b2Transform, p *b2Vec2) bool {
        pLocal POD b2Vec2 = POD b2MulT(xf.q, *p - xf.p)

        for(i int = 0; i < this.m_count; ++i){
            dot float = b2Dot(this.m_normals[i], pLocal - this.m_vertices[i])
            if dot > 0.0f, return false
        }
        
        return true
    }

    /// Implement b2Shape.
    /// @note because the polygon is solid, rays that start inside do not hit because the normal is
    /// not defined.
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, xf *b2Transform, _childIndex int) bool {
        // Put the ray into the polygon's frame of reference.
        p1 POD b2Vec2 = b2MulT(xf.q, input.p1 - xf.p)
        p2 POD b2Vec2 = b2MulT(xf.q, input.p2 - xf.p)
        d POD b2Vec2 = p2 - p1

        lower float = 0.0f
        upper float = input.maxFraction

        index int = -1

        for(i int = 0; i < this.m_count; ++i){
            // p = p1 + a * d
            // dot(normal, p - v) = 0
            // dot(normal, p1 - v) + a * dot(normal, d) = 0
            numerator float = b2Dot(this.m_normals[i], this.m_vertices[i] - p1)
            denominator float = b2Dot(this.m_normals[i], d)

            if denominator == 0.0f {    
                if numerator < 0.0f {
                    return false
                }
            } else {
                // Note: we want this predicate without division:
                // lower < numerator / denominator, where denominator < 0
                // Since denominator < 0, we have to flip the inequality:
                // lower < numerator / denominator <==> denominator * lower > numerator.
                if denominator < 0.0f && numerator < lower * denominator {
                    // Increase lower.
                    // The segment enters this half-space.
                    lower = numerator / denominator
                    index = i
                } else if denominator > 0.0f && numerator < upper * denominator {
                    // Decrease upper.
                    // The segment exits this half-space.
                    upper = numerator / denominator
                }
            }

            // The use of epsilon here causes the assert on lower to trip
            // in some cases. Apparently the use of epsilon was to make edge
            // shapes work, but now those are handled separately.
            //if (upper < lower - b2_epsilon)
            if upper < lower, return false
        }

        b2Assert(0.0f <= lower && lower <= input.maxFraction, #get __file__, #get __line__, 'b2Assert(0.0f <= lower && lower <= input.maxFraction)')

        if index >= 0 {
            output.fraction = lower
            output.normal = b2Mul(xf.q, this.m_normals[index])
            return true
        }

        return false
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(aabb *b2AABB, xf *b2Transform, _childIndex int) {
        lower POD b2Vec2 = POD b2Mul(xf, this.m_vertices[0])
        upper POD b2Vec2 = POD lower

        for(i int = 1; i < this.m_count; ++i){
            v POD b2Vec2 = b2Mul(xf, this.m_vertices[i])
            lower = b2Min(lower, v);
            upper = b2Max(upper, v);
        }

        r POD b2Vec2 = b2Vec2(this.m_radius, this.m_radius)
        aabb.lowerBound = lower - r
        aabb.upperBound = upper + r
    }

    /// @see b2Shape::ComputeMass
    func ComputeMass(massData *b2MassData, density float) {
        // Polygon mass, centroid, and inertia.
        // Let rho be the polygon density in mass per unit area.
        // Then:
        // mass = rho * int(dA)
        // centroid.x = (1/mass) * rho * int(x * dA)
        // centroid.y = (1/mass) * rho * int(y * dA)
        // I = rho * int((x*x + y*y) * dA)
        //
        // We can compute these integrals by summing all the integrals
        // for each triangle of the polygon. To evaluate the integral
        // for a single triangle, we make a change of variables to
        // the (u,v) coordinates of the triangle:
        // x = x0 + e1x * u + e2x * v
        // y = y0 + e1y * u + e2y * v
        // where 0 <= u && 0 <= v && u + v <= 1.
        //
        // We integrate u from [0,1-v] and then v from [0,1].
        // We also need to use the Jacobian of the transformation:
        // D = cross(e1, e2)
        //
        // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)
        //
        // The rest of the derivation is handled by computer algebra.

        b2Assert(this.m_count >= 3, #get __file__, #get __line__, 'b2Assert(this.m_count >= 3)')

        center POD b2Vec2 = POD b2Vec2(0.0f, 0.0f)
        area float = 0.0f
        I float = 0.0f

        // Get a reference point for forming triangles.
        // Use the first vertex to reduce round-off errors.
        s POD b2Vec2 = this.m_vertices[0]

        const k_inv3 float = 1.0f / 3.0f

        for(i int = 0; i < this.m_count; ++i){
            // Triangle vertices.
            e1 POD b2Vec2 = this.m_vertices[i] - s
            e2 POD b2Vec2 = i + 1 < this.m_count ? this.m_vertices[i+1] - s : this.m_vertices[0] - s

            D float = b2Cross(e1, e2)

            triangleArea float = 0.5f * D
            area += triangleArea

            // Area weighted centroid
            center.AddAssign(triangleArea * k_inv3 * (e1 + e2))

            ex1 float = e1.x
            ey1 float = e1.y
            ex2 float = e2.x
            ey2 float = e2.y

            intx2 float = ex1*ex1 + ex2*ex1 + ex2*ex2
            inty2 float = ey1*ey1 + ey2*ey1 + ey2*ey2

            I += (0.25f * k_inv3 * D) * (intx2 + inty2)
        }

        // Total mass
        massData.mass = density * area

        // Center of mass
        b2Assert(area > b2_epsilon, #get __file__, #get __line__, 'b2Assert(area > b2_epsilon)')
        center.MultiplyAssign(1.0f / area)
        massData.center = center + s

        // Inertia tensor relative to the local origin (point s).
        massData.I = density * I
        
        // Shift to center of mass then to original body origin.
        massData.I += massData.mass * (b2Dot(massData.center, massData.center) - b2Dot(center, center))
    }

    /// Validate convexity. This is a very time consuming operation.
    /// @returns true if valid
    func Validate() bool {
        for(i int = 0; i < this.m_count; ++i){
            i1 int = i
            i2 int = i < this.m_count - 1 ? i1 + 1 : 0
            p POD b2Vec2 = this.m_vertices[i1]
            e POD b2Vec2 = this.m_vertices[i2] - p

            for(j int = 0; j < this.m_count; ++j){
                if j == i1 || j == i2, continue

                v POD b2Vec2 = this.m_vertices[j] - p
                c float = b2Cross(e, v)
                if c < 0.0f, return false
            }
        }

        return true
    }
}

func b2_polygon_shape\ComputeCentroid(vs *b2Vec2, count int) b2Vec2 {
    b2Assert(count >= 3, #get __file__, #get __line__, 'b2Assert(count >= 3)')
    
    c POD b2Vec2 = b2Vec2(0.0f, 0.0f)
    area float = 0.0f

    // Get a reference point for forming triangles.
    // Use the first vertex to reduce round-off errors.
    s POD b2Vec2 = vs[0]

    const inv3 float = 1.0f / 3.0f

    for(i int = 0; i < count; ++i){
        // Triangle vertices.
        p1 POD b2Vec2 = vs[0] - s
        p2 POD b2Vec2 = vs[i] - s
        p3 POD b2Vec2 = i + 1 < count ? vs[i+1] - s : vs[0] - s

        e1 POD b2Vec2 = p2 - p1
        e2 POD b2Vec2 = p3 - p1

        D float = b2Cross(e1, e2)

        triangleArea float = 0.5f * D
        area += triangleArea

        // Area weighted centroid
        c = c + (p1 + p2 + p3) * triangleArea * inv3
    }

    // Centroid
    b2Assert(area > b2_epsilon, #get __file__, #get __line__, 'b2Assert(area > b2_epsilon)')
    c = c * (1.0f / area) + s
    return c
}

func b2PolygonShape() b2PolygonShape {
    p POD b2PolygonShape = undef
    return *b2PolygonShape(&p)
}

func b2PolygonShape(uninitialized *b2PolygonShape) *b2PolygonShape {
    uninitialized.m_type = b2ShapeType::e_polygon
    uninitialized.m_radius = b2_polygonRadius
    uninitialized.vtable = &_b2PolygonShape_vtable
    uninitialized.m_count = 0
    uninitialized.m_centroid.SetZero()
    return uninitialized
}

_b2PolygonShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2PolygonShape, false)


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// @file
/// Structures and functions used for computing contact points, distance
/// queries, and TOI queries.

/*
REQUIRES
    class b2Shape    class b2CircleShape    class b2EdgeShape    class b2PolygonShape*/

b2_nullFeature ubyte = 255

/// The features that intersect to form the contact point
/// This must be 4 bytes or less.
struct b2ContactFeature (indexA, indexB, typeA, typeB ubyte)

enum b2ContactFeatureType (e_vertex, e_face)

/// Contact ids to facilitate warm starting.
union b2ContactID (
    cf b2ContactFeature,
    key uint                ///< Used to quickly compare contact ids.
)

/// A manifold point is a contact point belonging to a contact
/// manifold. It holds details related to the geometry and dynamics
/// of the contact points.
/// The local point usage depends on the manifold type:
/// -e_circles: the local center of circleB
/// -e_faceA: the local center of cirlceB or the clip point of polygonB
/// -e_faceB: the clip point of polygonA
/// This structure is stored across time steps, so we keep it small.
/// Note: the impulses are used for internal caching and may not
/// provide reliable contact forces, especially for high speed collisions.
struct b2ManifoldPoint (
    localPoint b2Vec2,     ///< usage depends on manifold type
    normalImpulse float,   ///< the non-penetration impulse
    tangentImpulse float,  ///< the friction impulse
    id b2ContactID         ///< uniquely identifies a contact point between two shapes
)

/// A manifold for two touching convex shapes.
/// Box2D supports multiple types of contact:
/// - clip point versus plane with radius
/// - point versus point with radius (circles)
/// The local point usage depends on the manifold type:
/// -e_circles: the local center of circleA
/// -e_faceA: the center of faceA
/// -e_faceB: the center of faceB
/// Similarly the local normal usage:
/// -e_circles: not used
/// -e_faceA: the normal on polygonA
/// -e_faceB: the normal on polygonB
/// We store contacts in this way so that position correction can
/// account for movement, which is critical for continuous physics.
/// All contact scenarios must be expressed in one of these types.
/// This structure is stored across time steps, so we keep it small.
struct b2Manifold (
    points 2 /* b2_maxManifoldPoints */ b2ManifoldPoint, ///< the points of contact
    localNormal b2Vec2,                                  ///< not use for Type::e_points
    localPoint b2Vec2,                                   ///< usage depends on manifold type
    type b2ManifoldType,
    pointCount int                                       ///< the number of manifold points
)

enum b2ManifoldType (e_circles, e_faceA, e_faceB)

/// This is used to compute the current state of a contact manifold.
struct b2WorldManifold (
    normal b2Vec2,
    points 2 /* b2_maxManifoldPoints */ b2Vec2,
    separations 2 /* b2_maxManifoldPoints */ float
) {
    /// Evaluate the manifold with supplied transforms. This assumes
    /// modest motion from the original state. This does not change the
    /// point count, impulses, etc. The radii must come from the shapes
    /// that generated the manifold.
    func Initialize(manifold *b2Manifold, in xfA *b2Transform, radiusA float, in xfB *b2Transform, radiusB float) void {
        if manifold.pointCount == 0, return

        switch manifold.type {
        case b2ManifoldType::e_circles
            this.normal.Set(1.0f, 0.0f)

            pointA POD b2Vec2 = b2Mul(xfA, manifold.localPoint)
            pointB POD b2Vec2 = b2Mul(xfB, manifold.points[0].localPoint)

            if b2DistanceSquared(pointA, pointB) > b2_epsilon * b2_epsilon {
                this.normal = pointB - pointA
                this.normal.Normalize()
            }

            cA POD b2Vec2 = pointA + radiusA * this.normal
            cB POD b2Vec2 = pointB - radiusB * this.normal
            this.points[0] = 0.5f * (cA + cB)
            this.separations[0] = b2Dot(cB - cA, this.normal)

        case b2ManifoldType::e_faceA
            this.normal = b2Mul(xfA.q, manifold.localNormal)
            planePoint POD b2Vec2 = b2Mul(xfA, manifold.localPoint)

            for(i int = 0; i < manifold.pointCount; ++i){
                clipPoint POD b2Vec2 = b2Mul(xfB, manifold.points[i].localPoint)
                cA POD b2Vec2 = clipPoint + (radiusA - b2Dot(clipPoint - planePoint, this.normal)) * this.normal
                cB POD b2Vec2 = clipPoint - radiusB * this.normal
                this.points[i] = 0.5f * (cA + cB)
                this.separations[i] = b2Dot(cB - cA, this.normal)
            }

        case b2ManifoldType::e_faceB
            this.normal = b2Mul(xfB.q, manifold.localNormal)
            planePoint POD b2Vec2 = b2Mul(xfB, manifold.localPoint)

            for(i int = 0; i < manifold.pointCount; ++i){
                clipPoint POD b2Vec2 = b2Mul(xfA, manifold.points[i].localPoint)
                cB POD b2Vec2 = clipPoint + (radiusB - b2Dot(clipPoint - planePoint, this.normal)) * this.normal
                cA POD b2Vec2 = clipPoint - radiusA * this.normal
                this.points[i] = 0.5f * (cA + cB)
                this.separations[i] = b2Dot(cA - cB, this.normal)
            }

            // Ensure normal points from A to B.
            this.normal = this.normal.Negated()
        }
    }
}

/// This is used for determining the state of contact points.
enum b2PointState (
    b2_nullState,       ///< point does not exist
    b2_addState,        ///< point was added in the update
    b2_persistState,    ///< point persisted across the update
    b2_removeState      ///< point was removed in the update
)

/// Compute the point states given two manifolds. The states pertain to the transition from manifold1
/// to manifold2. So state1 is either persist or remove while state2 is either add or persist.
func b2GetPointStates(
    state1_ref /* b2_maxManifoldPoints */ *2 b2PointState,
    state2_ref /* b2_maxManifoldPoints */ *2 b2PointState,
    in manifold1 *b2Manifold,
    in manifold2 *b2Manifold
) void {
    define state1 = *state1_ref
    define state2 = *state2_ref

    for(i int = 0; i < b2_maxManifoldPoints; ++i){
        state1[i] = b2PointState::b2_nullState
        state2[i] = b2PointState::b2_nullState
    }

    // Detect persists and removes.
    for(i int = 0; i < manifold1.pointCount; ++i){
        id POD b2ContactID = manifold1.points[i].id

        state1[i] = b2PointState::b2_removeState

        for(j int = 0; j < manifold2.pointCount; ++j){
            if manifold2.points[j].id.key == id.key {
                state1[i] = b2PointState::b2_persistState
                break
            }
        }
    }

    // Detect persists and adds.
    for(i int = 0; i < manifold2.pointCount; ++i){
        id POD b2ContactID = manifold2.points[i].id

        state2[i] = b2PointState::b2_addState

        for(j int = 0; j < manifold1.pointCount; ++j){
            if manifold1.points[j].id.key == id.key {
                state2[i] = b2PointState::b2_persistState
                break
            }
        }
    }
}

/// Used for computing contact manifolds.
struct b2ClipVertex (v b2Vec2, id b2ContactID)

/// Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
struct b2RayCastInput (p1, p2 b2Vec2, maxFraction float)

/// Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2
/// come from b2RayCastInput.
struct b2RayCastOutput (normal b2Vec2, fraction float)

/// An axis aligned bounding box.
struct b2AABB (
    lowerBound b2Vec2, ///< the lower vertex
    upperBound b2Vec2  ///< the upper vertex
) {
    /// Verify that the bounds are sorted.
    func isValid() bool {
        d b2Vec2 = this.upperBound - this.lowerBound
        valid bool = d.x >= 0.0f && d.y >= 0.0f
        valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid()
        return valid
    }

    /// Get the center of the AABB.
    func GetCenter() b2Vec2 {
        return 0.5f * (this.lowerBound + this.upperBound)
    }

    /// Get the extents of the AABB (half-widths).
    func GetExtents() b2Vec2 {
        return 0.5f * (this.upperBound - this.lowerBound)
    }

    /// Get the perimeter length
    func GetPerimeter() float {
        wx float = this.upperBound.x - this.lowerBound.x
        wy float = this.upperBound.y - this.lowerBound.y
        return 2.0f * (wx + wy)
    }

    /// Combine an AABB into this one.
    func Combine(in aabb1, in aabb2 *b2AABB) void {
        this.lowerBound = b2Min(aabb1.lowerBound, aabb2.lowerBound)
        this.upperBound = b2Max(aabb1.upperBound, aabb2.upperBound)
    }

    /// Does this aabb contain the provided AABB.
    func Contains(in aabb *b2AABB) bool {
        result bool = true
        result = result && this.lowerBound.x <= aabb.lowerBound.x
        result = result && this.lowerBound.y <= aabb.lowerBound.y
        result = result && aabb.upperBound.x <= this.upperBound.x
        result = result && aabb.upperBound.y <= this.upperBound.y
        return result
    }

    // From Real-time Collision Detection, p179.
    func RayCast(out output *b2RayCastOutput, in input *b2RayCastInput) bool {
        tmin float = 0.0f - b2_maxFloat
        tmax float = b2_maxFloat

        p POD b2Vec2 = input.p1
        d POD b2Vec2 = input.p2 - input.p1
        absD POD b2Vec2 = b2Abs(d)

        normal POD b2Vec2 = undef

        for(i int = 0; i < 2; ++i){
            if absD[i] < b2_epsilon {
                // Parallel.
                if p[i] < this.lowerBound[i] || this.upperBound[i] < p[i], return false
            } else {
                inv_d float = 1.0f / d[i]
                t1 float = (this.lowerBound[i] - p[i]) * inv_d
                t2 float = (this.upperBound[i] - p[i]) * inv_d

                // Sign of the normal vector.
                s float = -1.0f

                if t1 > t2 {
                    b2Swap(&t1, &t2)
                    s = 1.0f
                }

                // Push the min up
                if t1 > tmin {
                    normal.SetZero()
                    normal[i] = s
                    tmin = t1
                }

                // Pull the max down
                tmax = b2Min(tmax, t2)

                if tmin > tmax, return false
            }
        }

        // Does the ray start inside the box?
        // Does the ray intersect beyond the max fraction?
        if tmin < 0.0f || input.maxFraction < tmin, return false

        // Intersection.
        output.fraction = tmin
        output.normal = normal
        return true
    }
}


/// Clipping for contact manifolds.
func b2ClipSegmentToLine(
    out vOut_ref *2 b2ClipVertex,
    in  vIn_ref  *2 b2ClipVertex,
    in normal b2Vec2,
    in offset float,
    in vertexIndexA int
) int {
    define vOut = *vOut_ref
    define vIn  = *vIn_ref

    // Start with no output points
    count int = 0

    // Calculate the distance of end points to the line
    distance0 float = b2Dot(normal, vIn[0].v) - offset
    distance1 float = b2Dot(normal, vIn[1].v) - offset

    // If the points are behind the plane
    if distance0 <= 0.0f, vOut[count++] = vIn[0]
    if distance1 <= 0.0f, vOut[count++] = vIn[1]

    // If the points are on different sides of the plane
    if distance0 * distance1 < 0.0f {
        // Find intersection point of edge and plane
        interp float = distance0 / (distance0 - distance1)
        vOut[count].v = vIn[0].v + interp * (vIn[1].v - vIn[0].v)

        // VertexA is hitting edgeB.
        vOut[count].id.cf.indexA = cast ubyte vertexIndexA
        vOut[count].id.cf.indexB = vIn[0].id.cf.indexB
        vOut[count].id.cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
        vOut[count].id.cf.typeB = cast ubyte b2ContactFeatureType::e_face
        ++count

        b2Assert(count == 2, #get __file__, #get __line__, 'b2Assert(count == 2)')
    }

    return count
}

/// Determine if two generic shapes overlap.
func b2TestOverlap(
    shapeA *b2Shape,
    indexA int,
    shapeB *b2Shape,
    indexB int,
    in xfA, in xfB *b2Transform
) bool {
    input POD b2DistanceInput = undef
    input.proxyA.Set(shapeA, indexA)
    input.proxyB.Set(shapeB, indexB)
    input.transformA = *xfA
    input.transformB = *xfB
    input.useRadii = true

    cache POD b2SimplexCache = undef
    cache.count = 0

    output POD b2DistanceOutput = undef

    b2Distance(&output, &cache, &input)

    return output.distance < 10.0f * b2_epsilon
}

func b2TestOverlap(in a, in b *b2AABB) bool {
    d1 POD b2Vec2 = b.lowerBound - a.upperBound
    d2 POD b2Vec2 = a.lowerBound - b.upperBound

    if d1.x > 0.0f || d1.y > 0.0f, return false
    if d2.x > 0.0f || d2.y > 0.0f, return false
    return true
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// (requires b2Shape)

// GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.
b2_gjkCalls int
b2_gjkIters int
b2_gjkMaxIters int

/// A distance proxy is used by the GJK algorithm.
/// It encapsulates any shape.
struct b2DistanceProxy (
    m_buffer 2 b2Vec2,
    m_vertices *b2Vec2,
    m_count int,
    m_radius float
) {
    /// Initialize the proxy using the given shape. The shape
    /// must remain in scope while the proxy is in use.
    func Set(shape *b2Shape, index int) {
        switch shape.GetType() {
        case b2ShapeType::e_circle
            circle *b2CircleShape = shape as *b2CircleShape
            this.m_vertices = &circle.m_p
            this.m_count = 1
            this.m_radius = circle.m_radius

        case b2ShapeType::e_polygon
            polygon *b2PolygonShape = shape as *b2PolygonShape
            this.m_vertices = cast *b2Vec2 &polygon.m_vertices
            this.m_count = polygon.m_count
            this.m_radius = polygon.m_radius

        case b2ShapeType::e_chain
            chain *b2ChainShape = shape as *b2ChainShape

            b2Assert(0 <= index && index < chain.m_count, #get __file__, #get __line__, 'b2Assert(0 <= index && index < chain.m_count)')
            this.m_buffer[0] = chain.m_vertices[index]

            if index + 1 < chain.m_count {
                this.m_buffer[1] = chain.m_vertices[index + 1]
            } else {
                this.m_buffer[1] = chain.m_vertices[0]
            }

            this.m_vertices = cast *b2Vec2 &this.m_buffer
            this.m_count = 2
            this.m_radius = chain.m_radius

        case b2ShapeType::e_edge
            edge *b2EdgeShape = shape as *b2EdgeShape
            this.m_vertices = &edge.m_vertex1
            this.m_count = 2
            this.m_radius = edge.m_radius

        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }
    }

    /// Initialize the proxy using a vertex cloud and radius. The vertices
    /// must remain in scope while the proxy is in use.
    func Set(vertices *b2Vec2, count int, radius float) {
        this.m_vertices = vertices
        this.m_count = count
        this.m_radius = radius
    }

    /// Get the supporting vertex index in the given direction.
    func GetSupport(d POD b2Vec2) int {
        bestIndex int = 0
        bestValue float = b2Dot(this.m_vertices[0], d)

        for(i int = 1; i < this.m_count; ++i){
            value float = b2Dot(this.m_vertices[i], d)
            if value > bestValue {
                bestIndex = i
                bestValue = value
            }
        }

        return bestIndex
    }

    /// Get the supporting vertex in the given direction.
    func GetSupportVertex(d POD b2Vec2) *b2Vec2 {
        bestIndex int = 0
        bestValue float = b2Dot(this.m_vertices[0], d)

        for(i int = 1; i < this.m_count; ++i){
            value float = b2Dot(this.m_vertices[i], d)
            if value > bestValue {
                bestIndex = i
                bestValue = value
            }
        }

        return &this.m_vertices[bestIndex] as *b2Vec2
    }

    /// Get the vertex count.
    func GetVertexCount() int {
        return this.m_count
    }

    /// Get a vertex by index. Used by b2Distance.
    func GetVertex(index int) *b2Vec2 {
        b2Assert(0 <= index && index < this.m_count, #get __file__, #get __line__, 'b2Assert(0 <= index && index < this.m_count)')
        return this.m_vertices at index
    }
}

func b2DistanceProxy() b2DistanceProxy {
    p POD b2DistanceProxy = undef
    p.m_vertices = null
    p.m_count = 0
    p.m_radius = 0.0f
    return p
}

/// Used to warm start b2Distance.
/// Set count to zero on first call.
struct b2SimplexCache (
    metric float,    ///< length or area
    count ushort,
    indexA 3 ubyte,  ///< vertices on shape A
    indexB 3 ubyte   ///< vertices on shape B
)

/// Input for b2Distance.
/// You have to option to use the shape radii
/// in the computation. Even
struct b2DistanceInput (
    proxyA b2DistanceProxy,
    proxyB b2DistanceProxy,
    transformA b2Transform,
    transformB b2Transform,
    useRadii bool
)

/// Output for b2Distance.
struct b2DistanceOutput (
    pointA b2Vec2,    ///< closest point on shapeA
    pointB b2Vec2,    ///< closest point on shapeB
    distance float,
    iterations int    ///< number of GJK iterations used
)

/// Compute the closest points between two shapes. Supports any combination of:
/// b2CircleShape, b2PolygonShape, b2EdgeShape. The simplex cache is input/output.
/// On the first call set b2SimplexCache.count to zero.
func b2Distance(output *b2DistanceOutput, cache *b2SimplexCache, input *b2DistanceInput) {
    ++b2_gjkCalls

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    transformA POD b2Transform = input.transformA
    transformB POD b2Transform = input.transformB

    // Initialize the simplex.
    simplex POD b2_distance\b2Simplex = undef
    simplex.ReadCache(cache, proxyA, &transformA, proxyB, &transformB)

    // Get simplex vertices as an array.
    vertices *b2_distance\b2SimplexVertex = &simplex.m_v1
    const k_maxIters int = 20

    // These store the vertices of the last simplex so that we
    // can check for duplicates and prevent cycling.
    saveA 3 int = undef
    saveB 3 int = undef
    saveCount int = 0

    // Main iteration loop.
    iter int = 0
    while iter < k_maxIters {
        // Copy simplex so we can identify duplicates.
        saveCount = simplex.m_count

        for(i int = 0; i < saveCount; ++i){
            saveA[i] = vertices[i].indexA
            saveB[i] = vertices[i].indexB
        }

        switch simplex.m_count {
        case 1
            /* nothing */
        case 2
            simplex.Solve2()
        case 3
            simplex.Solve3()
        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }

        // If we have 3 points, then the origin is in the corresponding triangle.
        if simplex.m_count == 3 {
            break
        }

        // Get search direction.
        d POD b2Vec2 = simplex.GetSearchDirection()

        // Ensure the search direction is numerically fit.
        if d.LengthSquared() < b2_epsilon * b2_epsilon {
            // The origin is probably contained by a line segment
            // or triangle. Thus the shapes are overlapped.

            // We can't return zero here even though there may be overlap.
            // In case the simplex is a point, segment, or triangle it is difficult
            // to determine if the origin is contained in the CSO or very close to it.
            break
        }

        // Compute a tentative new simplex vertex using support points.
        vertex *b2_distance\b2SimplexVertex = vertices at simplex.m_count
        vertex.indexA = proxyA.GetSupport(b2MulT(transformA.q, d.Negated()))
        vertex.wA = b2Mul(&transformA, *proxyA.GetVertex(vertex.indexA))
        vertex.indexB = proxyB.GetSupport(b2MulT(transformB.q, d))
        vertex.wB = b2Mul(&transformB, *proxyB.GetVertex(vertex.indexB))
        vertex.w = vertex.wB - vertex.wA

        // Iteration count is equated to the number of support point calls.
        ++iter
        ++b2_gjkIters

        // Check for duplicate support points. This is the main termination criteria.
        duplicate bool = false
        for(i int = 0; i < saveCount; ++i){
            if vertex.indexA == saveA[i] && vertex.indexB == saveB[i] {
                duplicate = true
                break
            }
        }

        // If we found a duplicate support point we must exit to avoid cycling.
        if duplicate, break

        // New vertex is ok and needed.
        ++simplex.m_count
    }

    b2_gjkMaxIters = b2Max(b2_gjkMaxIters, iter)

    // Prepare output.
    simplex.GetWitnessPoints(&output.pointA, &output.pointB)
    output.distance = b2Distance(output.pointA, output.pointB)
    output.iterations = iter

    // Cache the simplex.
    simplex.WriteCache(cache)

    // Apply radii if requested.
    if input.useRadii {
        rA float = proxyA.m_radius
        rB float = proxyB.m_radius

        if output.distance > rA + rB && output.distance > b2_epsilon {
            // Shapes are still no overlapped.
            // Move the witness points to the outer surface.
            output.distance -= rA + rB
            normal POD b2Vec2 = output.pointB - output.pointA
            normal.Normalize()    
            output.pointA.AddAssign(normal * rA)
            output.pointB.SubtractAssign(normal * rB)
        } else {
            // Shapes are overlapped when radii are considered.
            // Move the witness points to the middle.
            p POD b2Vec2 = (output.pointA + output.pointB) * 0.5f
            output.pointA = p
            output.pointB = p
            output.distance = 0.0f
        }
    }
}

/// Input parameters for b2ShapeCast
struct b2ShapeCastInput (
    proxyA b2DistanceProxy,
    proxyB b2DistanceProxy,
    transformA b2Transform,
    transformB b2Transform,
    translationB b2Vec2
)

/// Output results for b2ShapeCast
struct b2ShapeCastOutput (
    point b2Vec2,
    normal b2Vec2,
    lambda float,
    iterations int
)

// GJK-raycast
// Algorithm by Gino van den Bergen.
// "Smooth Mesh Contacts with GJK" in Game Physics Pearls. 2010
/// Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and translation fraction.
/// @returns true if hit, false if there is no hit or an initial overlap
func b2ShapeCast(output *b2ShapeCastOutput, input *b2ShapeCastInput) bool {
    output.iterations = 0
    output.lambda = 1.0f
    output.normal.SetZero()
    output.point.SetZero()

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    radiusA float = b2Max(proxyA.m_radius, b2_polygonRadius)
    radiusB float = b2Max(proxyB.m_radius, b2_polygonRadius)
    radius float = radiusA + radiusB

    xfA POD b2Transform = POD input.transformA
    xfB POD b2Transform = POD input.transformB

    r POD b2Vec2 = POD input.translationB
    n POD b2Vec2 = POD b2Vec2(0.0f, 0.0f)
    lambda float = 0.0f

    // Initial simplex
    simplex POD b2_distance\b2Simplex = undef
    simplex.m_count = 0

    // Get simplex vertices as an array.
    vertices *b2_distance\b2SimplexVertex = &simplex.m_v1

    // Get support point in -r direction
    indexA int = proxyA.GetSupport(b2MulT(xfA.q, r.Negated()))
    wA POD b2Vec2 = b2Mul(&xfA, *proxyA.GetVertex(indexA))
    indexB int = proxyB.GetSupport(b2MulT(xfB.q, r))
    wB POD b2Vec2 = b2Mul(&xfB, *proxyB.GetVertex(indexB))
    v POD b2Vec2 = wA - wB

    // Sigma is the target distance between polygons
    sigma float = b2Max(b2_polygonRadius, radius - b2_polygonRadius)
    const tolerance float = 0.5f * b2_linearSlop

    // Main iteration loop.
    const k_maxIters int = 20
    iter int = 0
    while iter < k_maxIters && v.Length() - sigma > tolerance {
        b2Assert(simplex.m_count < 3, #get __file__, #get __line__, 'b2Assert(simplex.m_count < 3)')

        output.iterations += 1

        // Support in direction -v (A - B)
        indexA = proxyA.GetSupport(b2MulT(xfA.q, v.Negated()))
        wA = b2Mul(&xfA, *proxyA.GetVertex(indexA))
        indexB = proxyB.GetSupport(b2MulT(xfB.q, v))
        wB = b2Mul(&xfB, *proxyB.GetVertex(indexB))
        p POD b2Vec2 = wA - wB

        // -v is a normal at p
        v.Normalize()

        // Intersect ray with plane
        vp float = b2Dot(v, p)
        vr float = b2Dot(v, r)
        if vp - sigma > lambda * vr {
            if vr <= 0.0f, return false

            lambda = (vp - sigma) / vr
            if lambda > 1.0f, return false

            n = v.Negated()
            simplex.m_count = 0
        }

        // Reverse simplex since it works with B - A.
        // Shift by lambda * r because we want the closest point to the current clip point.
        // Note that the support point p is not shifted because we want the plane equation
        // to be formed in unshifted space.
        vertex *b2_distance\b2SimplexVertex = vertices at simplex.m_count
        vertex.indexA = indexB
        vertex.wA = wB + r * lambda
        vertex.indexB = indexA
        vertex.wB = wA
        vertex.w = vertex.wB - vertex.wA
        vertex.a = 1.0f
        simplex.m_count += 1

        switch simplex.m_count {
        case 1
            /* nothing */
        case 2
            simplex.Solve2()
        case 3
            simplex.Solve3()
        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }
        
        // If we have 3 points, then the origin is in the corresponding triangle.
        if simplex.m_count == 3 {
            // Overlap
            return false
        }

        // Get search direction.
        v = simplex.GetClosestPoint()

        // Iteration count is equated to the number of support point calls.
        ++iter
    }

    if iter == 0 {
        // Initial overlap
        return false
    }

    // Prepare output.
    pointA, pointB POD b2Vec2 = undef
    simplex.GetWitnessPoints(&pointB, &pointA)

    if v.LengthSquared() > 0.0f {
        n = v.Negated()
        n.Normalize()
    }

    output.point = pointA + n * radiusA
    output.normal = n
    output.lambda = lambda
    output.iterations = iter
    return true
}



struct b2_distance\b2SimplexVertex (
    wA b2Vec2,      // support point in proxyA
    wB b2Vec2,      // support point in proxyB
    w b2Vec2,       // wB - wA
    a float,        // barycentric coordinate for closest point
    indexA int,     // wA index
    indexB int      // wB index
)

struct b2_distance\b2Simplex (
    m_v1, m_v2, m_v3 b2_distance\b2SimplexVertex,
    m_count int
) {
    func ReadCache(cache *b2SimplexCache, proxyA *b2DistanceProxy, transformA *b2Transform, proxyB *b2DistanceProxy, transformB *b2Transform) {
        b2Assert(cache.count <= 3, #get __file__, #get __line__, 'b2Assert(cache.count <= 3)')

        // Copy data from cache.
        this.m_count = cache.count

        vertices *b2_distance\b2SimplexVertex = &this.m_v1

        for(i int = 0; i < this.m_count; ++i){
            v *b2_distance\b2SimplexVertex = vertices at i

            v.indexA = cache.indexA[i]
            v.indexB = cache.indexB[i]
            wALocal POD b2Vec2 = POD *proxyA.GetVertex(v.indexA)
            wBLocal POD b2Vec2 = POD *proxyB.GetVertex(v.indexB)
            v.wA = b2Mul(transformA, wALocal)
            v.wB = b2Mul(transformB, wBLocal)
            v.w = v.wB - v.wA
            v.a = 0.0f
        }

        // Compute the new simplex metric, if it is substantially different than
        // old metric then flush the simplex.
        if this.m_count > 1 {
            metric1 float = cache.metric
            metric2 float = this.GetMetric()
            if metric2 < 0.5f * metric1 || 2.0f * metric1 < metric2 || metric2 < b2_epsilon {
                // Reset the simplex.
                this.m_count = 0
            }
        }

        // If the cache is empty or invalid ...
        if this.m_count == 0
        {
            v *b2_distance\b2SimplexVertex = vertices
            v.indexA = 0
            v.indexB = 0
            wALocal POD b2Vec2 = POD *proxyA.GetVertex(0)
            wBLocal POD b2Vec2 = POD *proxyB.GetVertex(0)
            v.wA = b2Mul(transformA, wALocal)
            v.wB = b2Mul(transformB, wBLocal)
            v.w = v.wB - v.wA
            v.a = 1.0f
            this.m_count = 1
        }
    }

    func WriteCache(cache *b2SimplexCache) {
        cache.metric = this.GetMetric()
        cache.count = cast ushort this.m_count

        vertices *b2_distance\b2SimplexVertex = &this.m_v1

        for(i int = 0; i < this.m_count; ++i){
            cache.indexA[i] = cast ubyte vertices[i].indexA
            cache.indexB[i] = cast ubyte vertices[i].indexB
        }
    }

    func GetSearchDirection() b2Vec2 {
        switch this.m_count {
        case 1, return this.m_v1.w.Negated()
        case 2
            e12 POD b2Vec2 = this.m_v2.w - this.m_v1.w
            sgn float = b2Cross(e12, this.m_v1.w.Negated())

            if sgn > 0.0f {
                // Origin is left of e12.
                return b2Cross(1.0f, e12)
            } else {
                // Origin is right of e12.
                return b2Cross(e12, 1.0f)
            }
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        return b2Vec2_zero
    }

    func GetClosestPoint() b2Vec2 {
        switch this.m_count {
        case 0
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            return b2Vec2_zero
        case 1, return this.m_v1.w
        case 2, return this.m_v1.a * this.m_v1.w + this.m_v2.a * this.m_v2.w
        case 3, return b2Vec2_zero
        }
        
        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        return b2Vec2_zero
    }

    func GetWitnessPoints(pA *b2Vec2, pB *b2Vec2) {
        switch this.m_count {
        case 0
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')

        case 1
            *pA = this.m_v1.wA
            *pB = this.m_v1.wB

        case 2
            *pA = this.m_v1.a * this.m_v1.wA + this.m_v2.a * this.m_v2.wA
            *pB = this.m_v1.a * this.m_v1.wB + this.m_v2.a * this.m_v2.wB

        case 3
            *pA = this.m_v1.a * this.m_v1.wA + this.m_v2.a * this.m_v2.wA + this.m_v3.a * this.m_v3.wA
            *pB = *pA

        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }
    }

    func GetMetric() float {
        switch this.m_count {
        case 0
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            return 0.0f
        case 1, return 0.0f
        case 2, return b2Distance(this.m_v1.w, this.m_v2.w)
        case 3, return b2Cross(this.m_v2.w - this.m_v1.w, this.m_v3.w - this.m_v1.w)
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        return 0.0f
    }

    // Solve a line segment using barycentric coordinates.
    //
    // p = a1 * w1 + a2 * w2
    // a1 + a2 = 1
    //
    // The vector from the origin to the closest point on the line is
    // perpendicular to the line.
    // e12 = w2 - w1
    // dot(p, e) = 0
    // a1 * dot(w1, e) + a2 * dot(w2, e) = 0
    //
    // 2-by-2 linear system
    // [1      1     ][a1] = [1]
    // [w1.e12 w2.e12][a2] = [0]
    //
    // Define
    // d12_1 =  dot(w2, e12)
    // d12_2 = -dot(w1, e12)
    // d12 = d12_1 + d12_2
    //
    // Solution
    // a1 = d12_1 / d12
    // a2 = d12_2 / d12
    func Solve2() void {
        w1 POD b2Vec2 = POD this.m_v1.w
        w2 POD b2Vec2 = POD this.m_v2.w
        e12 POD b2Vec2 = POD w2 - w1

        // w1 region
        d12_2 float = 0.0f - b2Dot(w1, e12)
        if d12_2 <= 0.0f {
            // a2 <= 0, so we clamp it to 0
            this.m_v1.a = 1.0f
            this.m_count = 1
            return
        }

        // w2 region
        d12_1 float = b2Dot(w2, e12)
        if d12_1 <= 0.0f {
            // a1 <= 0, so we clamp it to 0
            this.m_v2.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v2
            return
        }

        // Must be in e12 region.
        inv_d12 float = 1.0f / (d12_1 + d12_2)
        this.m_v1.a = d12_1 * inv_d12
        this.m_v2.a = d12_2 * inv_d12
        this.m_count = 2
    }

    // Possible regions:
    // - points[2]
    // - edge points[0]-points[2]
    // - edge points[1]-points[2]
    // - inside the triangle
    func Solve3() void {
        w1 POD b2Vec2 = POD this.m_v1.w
        w2 POD b2Vec2 = POD this.m_v2.w
        w3 POD b2Vec2 = POD this.m_v3.w

        // Edge12
        // [1      1     ][a1] = [1]
        // [w1.e12 w2.e12][a2] = [0]
        // a3 = 0
        e12 POD b2Vec2 = w2 - w1
        w1e12 float = b2Dot(w1, e12)
        w2e12 float = b2Dot(w2, e12)
        d12_1 float = w2e12
        d12_2 float = 0.0f - w1e12

        // Edge13
        // [1      1     ][a1] = [1]
        // [w1.e13 w3.e13][a3] = [0]
        // a2 = 0
        e13 POD b2Vec2 = w3 - w1
        w1e13 float = b2Dot(w1, e13)
        w3e13 float = b2Dot(w3, e13)
        d13_1 float = w3e13
        d13_2 float = 0.0f - w1e13

        // Edge23
        // [1      1     ][a2] = [1]
        // [w2.e23 w3.e23][a3] = [0]
        // a1 = 0
        e23 POD b2Vec2 = w3 - w2
        w2e23 float = b2Dot(w2, e23)
        w3e23 float = b2Dot(w3, e23)
        d23_1 float = w3e23
        d23_2 float = 0.0f - w2e23
        
        // Triangle123
        n123 float = b2Cross(e12, e13)

        d123_1 float = n123 * b2Cross(w2, w3)
        d123_2 float = n123 * b2Cross(w3, w1)
        d123_3 float = n123 * b2Cross(w1, w2)

        // w1 region
        if d12_2 <= 0.0f && d13_2 <= 0.0f {
            this.m_v1.a = 1.0f
            this.m_count = 1
            return
        }

        // e12
        if d12_1 > 0.0f && d12_2 > 0.0f && d123_3 <= 0.0f {
            inv_d12 float = 1.0f / (d12_1 + d12_2)
            this.m_v1.a = d12_1 * inv_d12
            this.m_v2.a = d12_2 * inv_d12
            this.m_count = 2
            return
        }

        // e13
        if d13_1 > 0.0f && d13_2 > 0.0f && d123_2 <= 0.0f {
            inv_d13 float = 1.0f / (d13_1 + d13_2)
            this.m_v1.a = d13_1 * inv_d13
            this.m_v3.a = d13_2 * inv_d13
            this.m_count = 2
            this.m_v2 = this.m_v3
            return
        }

        // w2 region
        if d12_1 <= 0.0f && d23_2 <= 0.0f {
            this.m_v2.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v2
            return
        }

        // w3 region
        if d13_1 <= 0.0f && d23_1 <= 0.0f {
            this.m_v3.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v3
            return
        }

        // e23
        if d23_1 > 0.0f && d23_2 > 0.0f && d123_1 <= 0.0f {
            inv_d23 float = 1.0f / (d23_1 + d23_2)
            this.m_v2.a = d23_1 * inv_d23
            this.m_v3.a = d23_2 * inv_d23
            this.m_count = 2
            this.m_v1 = this.m_v3
            return
        }

        // Must be in triangle123
        inv_d123 float = 1.0f / (d123_1 + d123_2 + d123_3)
        this.m_v1.a = d123_1 * inv_d123
        this.m_v2.a = d123_2 * inv_d123
        this.m_v3.a = d123_3 * inv_d123
        this.m_count = 3
    }
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// Compute the collision manifold between two circles.
func b2CollideCircles(
    manifold *b2Manifold,
    circleA *b2CircleShape,
    in xfA *b2Transform,
    circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

    pA POD b2Vec2 = b2Mul(xfA, circleA.m_p)
    pB POD b2Vec2 = b2Mul(xfB, circleB.m_p)

    d POD b2Vec2 = pB - pA
    distSqr float = b2Dot(d, d)
    rA float = circleA.m_radius
    rB float = circleB.m_radius
    radius float = rA + rB
    if distSqr > radius * radius, return

    manifold.type = b2ManifoldType::e_circles
    manifold.localPoint = circleA.m_p
    manifold.localNormal.SetZero()
    manifold.pointCount = 1

    manifold.points[0].localPoint = circleB.m_p
    manifold.points[0].id.key = 0
}

/// Compute the collision manifold between a polygon and a circle.
func b2CollidePolygonAndCircle(
    manifold *b2Manifold,
    polygonA *b2PolygonShape,
    in xfA *b2Transform,
    circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

    // Compute circle position in the frame of the polygon.
    c POD b2Vec2 = b2Mul(xfB, circleB.m_p)
    cLocal POD b2Vec2 = b2MulT(xfA, c)

    // Find the min separating edge.
    normalIndex int = 0
    separation float = 0.0f - b2_maxFloat
    radius float = polygonA.m_radius + circleB.m_radius
    vertexCount int = polygonA.m_count
    vertices *b2Vec2 = polygonA.m_vertices at 0
    normals *b2Vec2 = polygonA.m_normals at 0

    for(i int = 0; i < vertexCount; ++i){
        s float = b2Dot(normals[i], cLocal - vertices[i])

        if s > radius, return

        if s > separation {
            separation = s
            normalIndex = i
        }
    }

    // Vertices that subtend the incident face.
    vertIndex1 int = normalIndex
    vertIndex2 int = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0
    v1 POD b2Vec2 = vertices[vertIndex1]
    v2 POD b2Vec2 = vertices[vertIndex2]

    // If the center is inside the polygon ...
    if separation < b2_epsilon {
        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = normals[normalIndex]
        manifold.localPoint = (v1 + v2) * 0.5f
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
        return
    }

    // Compute barycentric coordinates
    u1 float = b2Dot(cLocal - v1, v2 - v1)
    u2 float = b2Dot(cLocal - v2, v1 - v2)
    if u1 <= 0.0f {
        if b2DistanceSquared(cLocal, v1) > radius * radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = cLocal - v1
        manifold.localNormal.Normalize()
        manifold.localPoint = v1
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
    } else if u2 <= 0.0f {
        if b2DistanceSquared(cLocal, v2) > radius * radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = cLocal - v2
        manifold.localNormal.Normalize()
        manifold.localPoint = v2
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
    } else {
        faceCenter POD b2Vec2 = (v1 + v2) * 0.5f
        s float = b2Dot(cLocal - faceCenter, normals[vertIndex1])
        if s > radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = normals[vertIndex1]
        manifold.localPoint = faceCenter
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
	}
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Find the max separation between poly1 and poly2 using edge normals from poly1.
func b2_collide_polygon\b2FindMaxSeparation(
    edgeIndex *int,
    in poly1 *b2PolygonShape,
    in xf1 *b2Transform,
    in poly2 *b2PolygonShape,
    in xf2 *b2Transform
) float {
    count1 int = poly1.m_count
    count2 int = poly2.m_count
    n1s *b2Vec2 = poly1.m_normals at 0
    v1s *b2Vec2 = poly1.m_vertices at 0
    v2s *b2Vec2 = poly2.m_vertices at 0
    xf POD b2Transform = b2MulT(xf2, xf1)

    bestIndex int = 0
    maxSeparation float = 0.0f - b2_maxFloat

    for(i int = 0; i < count1; ++i){
        // Get poly1 normal in frame2.
        n POD b2Vec2 = b2Mul(xf.q, n1s[i])
        v1 POD b2Vec2 = b2Mul(&xf, v1s[i])

        // Find deepest point for normal i.
        si float = b2_maxFloat
        for(j int = 0; j < count2; ++j){
            sij float = b2Dot(n, v2s[j] - v1)
            if sij < si, si = sij
        }

        if si > maxSeparation {
            maxSeparation = si
            bestIndex = i
        }
    }

    *edgeIndex = bestIndex
    return maxSeparation
}

func b2_collide_polygon\b2FindIncidentEdge(
    in cRef *2 b2ClipVertex,
    in poly1 *b2PolygonShape,
    in xf1 *b2Transform,
    in edge1 int,
    in poly2 *b2PolygonShape,
    in xf2 *b2Transform
) {
    define c = *cRef
    normals1 *b2Vec2 = poly1.m_normals at 0

    count2 int = poly2.m_count
    vertices2 *b2Vec2 = poly2.m_vertices at 0
    normals2 *b2Vec2 = poly2.m_normals at 0

    b2Assert(0 <= edge1 && edge1 < poly1.m_count, #get __file__, #get __line__, 'b2Assert(0 <= edge1 && edge1 < poly1.m_count)')

    // Get the normal of the reference edge in poly2's frame.
    normal1 POD b2Vec2 = b2MulT(xf2.q, b2Mul(xf1.q, normals1[edge1]))

    // Find the incident edge on poly2.
    index int = 0
    minDot float = b2_maxFloat
    for(i int = 0; i < count2; ++i){
        dot float = b2Dot(normal1, normals2[i])
        if dot < minDot {
            minDot = dot
            index = i
        }
    }

    // Build the clip vertices for the incident edge.
    i1 int = index
    i2 int = i1 + 1 < count2 ? i1 + 1 : 0

    c[0].v = b2Mul(xf2, vertices2[i1])
    c[0].id.cf.indexA = cast ubyte edge1
    c[0].id.cf.indexB = cast ubyte i1
    c[0].id.cf.typeA = b2ContactFeatureType::e_face as ubyte
    c[0].id.cf.typeB = b2ContactFeatureType::e_vertex as ubyte

    c[1].v = b2Mul(xf2, vertices2[i2])
    c[1].id.cf.indexA = cast ubyte edge1
    c[1].id.cf.indexB = cast ubyte i2
    c[1].id.cf.typeA = b2ContactFeatureType::e_face as ubyte
    c[1].id.cf.typeB = b2ContactFeatureType::e_vertex as ubyte
}

// Find edge normal of max separation on A - return if separating axis is found
// Find edge normal of max separation on B - return if separation axis is found
// Choose reference edge as min(minA, minB)
// Find incident edge
// Clip

/// Compute the collision manifold between two polygons.
func b2CollidePolygons(
    manifold *b2Manifold,
    polyA *b2PolygonShape,
    in xfA *b2Transform,
    polyB *b2PolygonShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0
    totalRadius float = polyA.m_radius + polyB.m_radius

    edgeA int = 0
    separationA float = b2_collide_polygon\b2FindMaxSeparation(&edgeA, polyA, xfA, polyB, xfB)
    if separationA > totalRadius, return

    edgeB int = 0
    separationB float = b2_collide_polygon\b2FindMaxSeparation(&edgeB, polyB, xfB, polyA, xfA)
    if separationB > totalRadius, return

    poly1 *b2PolygonShape = undef    // reference polygon
    poly2 *b2PolygonShape = undef    // incident polygon
    xf1, xf2 POD b2Transform = undef
    edge1 int = undef                    // reference edge
    flip ubyte = undef
    const k_tol float = 0.1f * b2_linearSlop

    if separationB > separationA + k_tol {
        poly1 = polyB
        poly2 = polyA
        xf1 = *xfB
        xf2 = *xfA
        edge1 = edgeB
        manifold.type = b2ManifoldType::e_faceB
        flip = 1
    } else {
        poly1 = polyA
        poly2 = polyB
        xf1 = *xfA
        xf2 = *xfB
        edge1 = edgeA
        manifold.type = b2ManifoldType::e_faceA
        flip = 0
    }

    incidentEdge POD 2 b2ClipVertex = undef
    b2_collide_polygon\b2FindIncidentEdge(&incidentEdge, poly1, &xf1, edge1, poly2, &xf2)
    
    count1 int = poly1.m_count
    vertices1 *b2Vec2 = poly1.m_vertices at 0

    iv1 int = edge1
    iv2 int = edge1 + 1 < count1 ? edge1 + 1 : 0

    v11 POD b2Vec2 = vertices1[iv1]
    v12 POD b2Vec2 = vertices1[iv2]

    localTangent POD b2Vec2 = v12 - v11
    localTangent.Normalize()
    
    localNormal POD b2Vec2 = b2Cross(localTangent, 1.0f)
    planePoint POD b2Vec2 = (v11 + v12) * 0.5f

    tangent POD b2Vec2 = b2Mul(xf1.q, localTangent)
    normal POD b2Vec2 = b2Cross(tangent, 1.0f)
    
    v11 = b2Mul(&xf1, v11)
    v12 = b2Mul(&xf1, v12)

    // Face offset.
    frontOffset float = b2Dot(normal, v11)

    // Side offsets, extended by polytope skin thickness.
    sideOffset1 float = 0.0f - b2Dot(tangent, v11) + totalRadius
    sideOffset2 float = b2Dot(tangent, v12) + totalRadius

    // Clip incident edge against extruded edge1 side edges.
    clipPoints1 POD 2 b2ClipVertex = undef
    clipPoints2 POD 2 b2ClipVertex = undef
    np int = undef

    // Clip to box side 1
    np = b2ClipSegmentToLine(&clipPoints1, &incidentEdge, tangent.Negated(), sideOffset1, iv1)
    if np < 2, return

    // Clip to negative box side 1
    np = b2ClipSegmentToLine(&clipPoints2, &clipPoints1, tangent, sideOffset2, iv2)
    if np < 2, return

    // Now clipPoints2 contains the clipped points.
    manifold.localNormal = localNormal
    manifold.localPoint = planePoint

    pointCount int = 0
    for(i int = 0; i < b2_maxManifoldPoints; ++i){
        separation float = b2Dot(normal, clipPoints2[i].v) - frontOffset

        if separation <= totalRadius {
            cp *b2ManifoldPoint = manifold.points at pointCount
            cp.localPoint = b2MulT(&xf2, clipPoints2[i].v)
            cp.id = clipPoints2[i].id

            if flip {
                // Swap features
                cf POD b2ContactFeature = cp.id.cf
                cp.id.cf.indexA = cf.indexB
                cp.id.cf.indexB = cf.indexA
                cp.id.cf.typeA = cf.typeB
                cp.id.cf.typeB = cf.typeA
            }

            ++pointCount
        }
    }

    manifold.pointCount = pointCount
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/// Compute the collision manifold between an edge and a circle.
func b2CollideEdgeAndCircle(
    out manifold *b2Manifold,
    in edgeA *b2EdgeShape,
    in xfA *b2Transform,
    in circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0
    
    // Compute circle in frame of edge
    Q POD b2Vec2 = b2MulT(xfA, b2Mul(xfB, circleB.m_p))
    
    A POD b2Vec2 = edgeA.m_vertex1
    B POD b2Vec2 = edgeA.m_vertex2
    e POD b2Vec2 = B - A
    
    // Normal points to the right for a CCW winding
    n POD b2Vec2 = POD b2Vec2(e.y, -e.x)
    offset float = b2Dot(n, Q - A)
    oneSided bool = edgeA.m_oneSided

    if oneSided && offset < 0.0f, return

    // Barycentric coordinates
    u float = b2Dot(e, B - Q)
    v float = b2Dot(e, Q - A)
    
    radius float = edgeA.m_radius + circleB.m_radius
    
    cf POD b2ContactFeature
    cf.indexB = 0
    cf.typeB = cast ubyte b2ContactFeatureType::e_vertex
    
    // Region A
    if v <= 0.0f {
        P POD b2Vec2 = A
        d POD b2Vec2 = Q - P
        dd float = b2Dot(d, d)

        if dd > radius * radius, return
        
        // Is there an edge connected to A?
        if edgeA.m_oneSided {
            A1 POD b2Vec2 = edgeA.m_vertex0
            B1 POD b2Vec2 = A
            e1 POD b2Vec2 = B1 - A1
            u1 float = b2Dot(e1, B1 - Q)
            
            // Is the circle in Region AB of the previous edge?
            if u1 > 0.0f, return
        }

        cf.indexA = 0
        cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_circles
        manifold.localNormal.SetZero()
        manifold.localPoint = P
        manifold.points[0].id.key = 0
        manifold.points[0].id.cf = cf
        manifold.points[0].localPoint = circleB.m_p
        return
    }
    
    // Region B
    if u <= 0.0f {
        P POD b2Vec2 = B
        d POD b2Vec2 = Q - P
        dd float = b2Dot(d, d)
        if dd > radius * radius, return
        
        // Is there an edge connected to B?
        if edgeA.m_oneSided {
            B2 POD b2Vec2 = edgeA.m_vertex3
            A2 POD b2Vec2 = B
            e2 POD b2Vec2 = B2 - A2
            v2 float = b2Dot(e2, Q - A2)
            
            // Is the circle in Region AB of the next edge?
            if v2 > 0.0f, return
        }
        
        cf.indexA = 1
        cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_circles
        manifold.localNormal.SetZero()
        manifold.localPoint = P
        manifold.points[0].id.key = 0
        manifold.points[0].id.cf = cf
        manifold.points[0].localPoint = circleB.m_p
        return
    }
    
    // Region AB
    den float = b2Dot(e, e)
    b2Assert(den > 0.0f, #get __file__, #get __line__, 'b2Assert(den > 0.0f)')
    P POD b2Vec2 = (1.0f / den) * (u * A + v * B)
    d POD b2Vec2 = Q - P
    dd float = b2Dot(d, d)
    if dd > radius * radius, return
    
    if offset < 0.0f {
        n.Set(0.0f - n.x, 0.0f - n.y)
    }

    n.Normalize()
    
    cf.indexA = 0
    cf.typeA = cast ubyte b2ContactFeatureType::e_face
    manifold.pointCount = 1
    manifold.type = b2ManifoldType::e_faceA
    manifold.localNormal = n
    manifold.localPoint = A
    manifold.points[0].id.key = 0
    manifold.points[0].id.cf = cf
    manifold.points[0].localPoint = circleB.m_p
}

// This structure is used to keep track of the best separating axis.
struct b2_collide_edge\b2EPAxis (
    normal b2Vec2,
    type b2_collide_edge\b2EPAxisType,
    index int,
    separation float
)

enum b2_collide_edge\b2EPAxisType(e_unknown, e_edgeA, e_edgeB)

// This holds polygon B expressed in frame A.
struct b2_collide_edge\b2TempPolygon (
    vertices /* b2_maxPolygonVertices */ 8 b2Vec2,
    normals /* b2_maxPolygonVertices */ 8 b2Vec2,
    count int
)

// Reference face used for clipping
struct b2_collide_edge\b2ReferenceFace (
    i1, i2 int,
    v1, v2 b2Vec2,
    normal b2Vec2,
    sideNormal1 b2Vec2,
    sideOffset1 float,
    sideNormal2 b2Vec2,
    sideOffset2 float
)

func b2_collide_edge\b2ComputeEdgeSeparation(
    in polygonB *b2_collide_edge\b2TempPolygon,
    in v1 *b2Vec2,
    in normal1 *b2Vec2
) b2_collide_edge\b2EPAxis {
    axis POD b2_collide_edge\b2EPAxis = undef
    axis.type = b2_collide_edge\b2EPAxisType::e_edgeA
    axis.index = -1
    axis.separation = 0.0f - FLT_MAX
    axis.normal.SetZero()

    axes POD 2 b2Vec2 = undef
    axes[0] = POD *normal1
    axes[1] = POD normal1.Negated()

    // Find axis with least overlap (min-max problem)
    for(j int = 0; j < 2; ++j){
        sj float = FLT_MAX

        // Find deepest polygon vertex along axis j
        for(i int = 0; i < polygonB.count; ++i){
            si float = b2Dot(axes[j], polygonB.vertices[i] - *v1)
            if si < sj, sj = si
        }

        if sj > axis.separation {
            axis.index = j
            axis.separation = sj
            axis.normal = axes[j]
        }
    }

    return axis
}

func b2_collide_edge\b2ComputePolygonSeparation(
    in polygonB *b2_collide_edge\b2TempPolygon,
    in v1 *b2Vec2,
    in v2 *b2Vec2
) b2_collide_edge\b2EPAxis {
    axis POD b2_collide_edge\b2EPAxis = undef
    axis.type = b2_collide_edge\b2EPAxisType::e_unknown
    axis.index = -1
    axis.separation = 0.0f - FLT_MAX
    axis.normal.SetZero()

    for(i int = 0; i < polygonB.count; ++i){
        n POD b2Vec2 = polygonB.normals[i].Negated()

        s1 float = b2Dot(n, polygonB.vertices[i] - *v1)
        s2 float = b2Dot(n, polygonB.vertices[i] - *v2)
        s float = b2Min(s1, s2)

        if s > axis.separation {
            axis.type = b2_collide_edge\b2EPAxisType::e_edgeB
            axis.index = i
            axis.separation = s
            axis.normal = n
        }
    }

    return axis
}

/// Compute the collision manifold between an edge and a polygon.
func b2CollideEdgeAndPolygon(
    manifold *b2Manifold,
    edgeA *b2EdgeShape,
    in xfA *b2Transform,
    polygonB *b2PolygonShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

    xf POD b2Transform = b2MulT(xfA, xfB)

    centroidB POD b2Vec2 = b2Mul(&xf, &polygonB.m_centroid)

    v1 POD b2Vec2 = edgeA.m_vertex1
    v2 POD b2Vec2 = edgeA.m_vertex2

    edge1 POD b2Vec2 = v2 - v1
    edge1.Normalize()

    // Normal points to the right for a CCW winding
    normal1 POD b2Vec2 = b2Vec2(edge1.y, 0.0f - edge1.x)
    offset1 float = b2Dot(normal1, centroidB - v1)

    oneSided bool = edgeA.m_oneSided
    if oneSided && offset1 < 0.0f, return

    // Get polygonB in frameA
    tempPolygonB POD b2_collide_edge\b2TempPolygon = undef
    tempPolygonB.count = polygonB.m_count
    for(i int = 0; i < polygonB.m_count; ++i){
        tempPolygonB.vertices[i] = b2Mul(&xf, &polygonB.m_vertices[i])
        tempPolygonB.normals[i] = b2Mul(xf.q, polygonB.m_normals[i])
    }

    radius float = polygonB.m_radius + edgeA.m_radius

    edgeAxis POD b2_collide_edge\b2EPAxis = b2_collide_edge\b2ComputeEdgeSeparation(&tempPolygonB, &v1, &normal1)
    if edgeAxis.separation > radius, return

    polygonAxis POD b2_collide_edge\b2EPAxis = b2_collide_edge\b2ComputePolygonSeparation(&tempPolygonB, &v1, &v2)
    if (polygonAxis.separation > radius), return

    // Use hysteresis for jitter reduction.
    const k_relativeTol float = 0.98f
    const k_absoluteTol float = 0.001f

    primaryAxis POD b2_collide_edge\b2EPAxis = undef
    if polygonAxis.separation - radius > k_relativeTol * (edgeAxis.separation - radius) + k_absoluteTol {
        primaryAxis = polygonAxis
    } else {
        primaryAxis = edgeAxis
    }

    if oneSided {
        // Smooth collision
        // See https://box2d.org/posts/2020/06/ghost-collisions/

        edge0 POD b2Vec2 = v1 - edgeA.m_vertex0
        edge0.Normalize()
        normal0 POD b2Vec2 = b2Vec2(edge0.y, 0.0f - edge0.x)
        convex1 bool = b2Cross(edge0, edge1) >= 0.0f

        edge2 POD b2Vec2 = edgeA.m_vertex3 - v2
        edge2.Normalize()
        normal2 POD b2Vec2 = b2Vec2(edge2.y, 0.0f - edge2.x)
        convex2 bool = b2Cross(edge1, edge2) >= 0.0f

        const sinTol float = 0.1f
        side1 bool = b2Dot(primaryAxis.normal, edge1) <= 0.0f

        // Check Gauss Map
        if side1 {
            if convex1 {
                if b2Cross(primaryAxis.normal, normal0) > sinTol {
                    // Skip region
                    return
                }

                // Admit region
            } else {
                // Snap region
                primaryAxis = edgeAxis
            }
        } else {
            if convex2 {
                if b2Cross(normal2, primaryAxis.normal) > sinTol {
                    // Skip region
                    return
                }

                // Admit region
            } else {
                // Snap region
                primaryAxis = edgeAxis
            }
        }
    }

    clipPoints POD 2 b2ClipVertex = undef
    ref POD b2_collide_edge\b2ReferenceFace = undef

    if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
        manifold.type = b2ManifoldType::e_faceA

        // Search for the polygon normal that is most anti-parallel to the edge normal.
        bestIndex int = 0
        bestValue float = b2Dot(primaryAxis.normal, tempPolygonB.normals[0])
        for(i int = 1; i < tempPolygonB.count; ++i){
            value float = b2Dot(primaryAxis.normal, tempPolygonB.normals[i])
            if value < bestValue {
                bestValue = value
                bestIndex = i
            }
        }

        i1 int = bestIndex
        i2 int = i1 + 1 < tempPolygonB.count ? i1 + 1 : 0

        clipPoints[0].v = tempPolygonB.vertices[i1]
        clipPoints[0].id.cf.indexA = 0
        clipPoints[0].id.cf.indexB = cast ubyte i1
        clipPoints[0].id.cf.typeA = cast ubyte b2ContactFeatureType::e_face
        clipPoints[0].id.cf.typeB = cast ubyte b2ContactFeatureType::e_vertex

        clipPoints[1].v = tempPolygonB.vertices[i2]
        clipPoints[1].id.cf.indexA = 0
        clipPoints[1].id.cf.indexB = cast ubyte i2
        clipPoints[1].id.cf.typeA = cast ubyte b2ContactFeatureType::e_face
        clipPoints[1].id.cf.typeB = cast ubyte b2ContactFeatureType::e_vertex

        ref.i1 = 0
        ref.i2 = 1
        ref.v1 = v1
        ref.v2 = v2
        ref.normal = primaryAxis.normal
        ref.sideNormal1 = edge1.Negated()
        ref.sideNormal2 = edge1
    } else {
        manifold.type = b2ManifoldType::e_faceB

        clipPoints[0].v = v2
        clipPoints[0].id.cf.indexA = 1
        clipPoints[0].id.cf.indexB = cast ubyte primaryAxis.index
        clipPoints[0].id.cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
        clipPoints[0].id.cf.typeB = cast ubyte b2ContactFeatureType::e_face

        clipPoints[1].v = v1
        clipPoints[1].id.cf.indexA = 0
        clipPoints[1].id.cf.indexB = cast ubyte primaryAxis.index
        clipPoints[1].id.cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
        clipPoints[1].id.cf.typeB = cast ubyte b2ContactFeatureType::e_face

        ref.i1 = primaryAxis.index
        ref.i2 = ref.i1 + 1 < tempPolygonB.count ? ref.i1 + 1 : 0
        ref.v1 = tempPolygonB.vertices[ref.i1]
        ref.v2 = tempPolygonB.vertices[ref.i2]
        ref.normal = tempPolygonB.normals[ref.i1]

        // CCW winding
        ref.sideNormal1.Set(ref.normal.y, 0.0f - ref.normal.x)
        ref.sideNormal2 = ref.sideNormal1.Negated()
    }

    ref.sideOffset1 = b2Dot(ref.sideNormal1, ref.v1)
    ref.sideOffset2 = b2Dot(ref.sideNormal2, ref.v2)

    // Clip incident edge against reference face side planes
    clipPoints1 POD 2 b2ClipVertex = undef
    clipPoints2 POD 2 b2ClipVertex = undef
    np int = undef

    // Clip to side 1
    np = b2ClipSegmentToLine(&clipPoints1, &clipPoints, ref.sideNormal1, ref.sideOffset1, ref.i1)
    if np < b2_maxManifoldPoints, return

    // Clip to side 2
    np = b2ClipSegmentToLine(&clipPoints2, &clipPoints1, ref.sideNormal2, ref.sideOffset2, ref.i2)
    if np < b2_maxManifoldPoints, return

    // Now clipPoints2 contains the clipped points.
    if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
        manifold.localNormal = ref.normal
        manifold.localPoint = ref.v1
    } else {
        manifold.localNormal = polygonB.m_normals[ref.i1]
        manifold.localPoint = polygonB.m_vertices[ref.i1]
    }

    pointCount int = 0
    for(i int = 0; i < b2_maxManifoldPoints; ++i){
        separation float = undef

        separation = b2Dot(ref.normal, clipPoints2[i].v - ref.v1)

        if separation <= radius {
            cp *b2ManifoldPoint = manifold.points at pointCount

            if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
                cp.localPoint = b2MulT(&xf, &clipPoints2[i].v)
                cp.id = clipPoints2[i].id
            } else {
                cp.localPoint = clipPoints2[i].v
                cp.id.cf.typeA = clipPoints2[i].id.cf.typeB
                cp.id.cf.typeB = clipPoints2[i].id.cf.typeA
                cp.id.cf.indexA = clipPoints2[i].id.cf.indexB
                cp.id.cf.indexB = clipPoints2[i].id.cf.indexA
            }

            ++pointCount
        }
    }

    manifold.pointCount = pointCount
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2Pair (proxyIdA, proxyIdB int)

define b2BroadPhase\e_nullProxy = -1

/// The broad-phase is used for computing pairs and performing volume queries and ray casts.
/// This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
/// It is up to the client to consume the new pairs and to track subsequent overlap.
struct b2BroadPhase (
    m_tree b2DynamicTree,

    m_proxyCount int,

    m_moveBuffer *int,
    m_moveCapacity int,
    m_moveCount int,

    m_pairBuffer *b2Pair,
    m_pairCapacity int,
    m_pairCount int,

    m_queryProxyId int
) {
    func __defer__ {
        b2Free(this.m_moveBuffer)
        b2Free(this.m_pairBuffer)
    }

    /// Create a proxy with an initial AABB. Pairs are not reported until
    /// UpdatePairs is called.
    func CreateProxy(in aabb *b2AABB, userData ptr) int {
        proxyId int = this.m_tree.CreateProxy(aabb, userData)
        ++this.m_proxyCount
        this.BufferMove(proxyId)
        return proxyId
    }

    /// Destroy a proxy. It is up to the client to remove any pairs.
    func DestroyProxy(proxyId int) void {
        this.UnBufferMove(proxyId)
        --this.m_proxyCount
        this.m_tree.DestroyProxy(proxyId)
    }

    /// Call MoveProxy as many times as you like, then when you are done
    /// call UpdatePairs to finalized the proxy pairs (for your time step).
    func MoveProxy(proxyId int, in aabb *b2AABB, in displacement *b2Vec2) void {
        buffer bool = this.m_tree.MoveProxy(proxyId, aabb, displacement)
        if buffer {
            this.BufferMove(proxyId)
        }
    }

    /// Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.
    func TouchProxy(proxyId int) void {
        this.BufferMove(proxyId)
    }

    /// Get the fat AABB for a proxy.
    func GetFatAABB(proxyId int) *b2AABB {
        return this.m_tree.GetFatAABB(proxyId)
    }

    /// Get user data from a proxy. Returns nullptr if the id is invalid.
    func GetUserData(proxyId int) ptr {
        return this.m_tree.GetUserData(proxyId)
    }

    /// Test overlap of fat AABBs.
    func TestOverlap(proxyIdA int, proxyIdB int) bool {
        aabbA *b2AABB = this.m_tree.GetFatAABB(proxyIdA)
        aabbB *b2AABB = this.m_tree.GetFatAABB(proxyIdB)
        return b2TestOverlap(aabbA, aabbB)
    }

    /// Get the number of proxies.
    func GetProxyCount() int {
        return this.m_proxyCount
    }

    /// Update the pairs. This results in pair callbacks. This can only add pairs.
    func UpdatePairs(callback *$T) void {
        // Reset pair buffer
        this.m_pairCount = 0

        // Perform tree queries for all moving proxies.
        for(i int = 0; i < this.m_moveCount; ++i){
            this.m_queryProxyId = this.m_moveBuffer[i]

            if this.m_queryProxyId == b2BroadPhase\e_nullProxy, continue

            // We have to query the tree with the fat AABB so that
            // we don't fail to create a pair that may touch later.
            fatAABB *b2AABB = this.m_tree.GetFatAABB(this.m_queryProxyId)

            // Query tree, create pairs and add them pair buffer.
            this.m_tree.Query(this, fatAABB)
        }

        // Send pairs to caller
        for(i int = 0; i < this.m_pairCount; ++i){
            primaryPair *b2Pair = this.m_pairBuffer at i
            userDataA ptr = this.m_tree.GetUserData(primaryPair.proxyIdA)
            userDataB ptr = this.m_tree.GetUserData(primaryPair.proxyIdB)

            callback.AddPair(userDataA, userDataB)
        }

        // Clear move flags
        for(i int = 0; i < this.m_moveCount; ++i){
            proxyId int = this.m_moveBuffer[i]

            if proxyId == b2BroadPhase\e_nullProxy, continue

            this.m_tree.ClearMoved(proxyId)
        }

        // Reset move buffer
        this.m_moveCount = 0
    }

    /// Query an AABB for overlapping proxies. The callback class
    /// is called for each proxy that overlaps the supplied AABB.
    func Query(callback *$T, in aabb *b2AABB) {
        this.m_tree.Query(callback, aabb)
    }

    /// Ray-cast against the proxies in the tree. This relies on the callback
    /// to perform a exact ray-cast in the case were the proxy contains a shape.
    /// The callback also performs the any collision filtering. This has performance
    /// roughly equal to k * log(n), where k is the number of collisions and n is the
    /// number of proxies in the tree.
    /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
    /// @param callback a callback class that is called for each proxy that is hit by the ray.
    func RayCast(callback *$T, in input *b2RayCastInput) void {
        this.m_tree.RayCast(callback, input)
    }

    /// Get the height of the embedded tree.
    func GetTreeHeight() int {
        return this.m_tree.GetHeight()
    }

    /// Get the balance of the embedded tree.
    func GetTreeBalance() int {
        return this.m_tree.GetMaxBalance()
    }

    /// Get the quality metric of the embedded tree.
    func GetTreeQuality() float {
        return this.m_tree.GetAreaRatio()
    }

    /// Shift the world origin. Useful for large worlds.
    /// The shift formula is: position -= newOrigin
    /// @param newOrigin the new origin with respect to the old origin
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        this.m_tree.ShiftOrigin(newOrigin)
    }

    // ------------------------------------------------------------------

    func BufferMove(proxyId int) void {
        if this.m_moveCount == this.m_moveCapacity {
            oldBuffer *int = this.m_moveBuffer
            this.m_moveCapacity *= 2
            this.m_moveBuffer = b2Alloc(this.m_moveCapacity * sizeof int) as *int
            memcpy(this.m_moveBuffer, oldBuffer, this.m_moveCount * sizeof int)
            b2Free(oldBuffer)
        }

        this.m_moveBuffer[this.m_moveCount] = proxyId
        ++this.m_moveCount
    }

    func UnBufferMove(proxyId int) void {
        for(i int = 0; i < this.m_moveCount; ++i){
            if this.m_moveBuffer[i] == proxyId {
                this.m_moveBuffer[i] = b2BroadPhase\e_nullProxy
            }
        }
    }

    // This is called from b2DynamicTree::Query when we are gathering pairs.
    func QueryCallback(proxyId int) bool {
        // A proxy cannot form a pair with itself.
        if proxyId == this.m_queryProxyId, return true

        const moved bool = this.m_tree.WasMoved(proxyId)

        if moved && proxyId > this.m_queryProxyId {
            // Both proxies are moving. Avoid duplicate pairs.
            return true
        }

        // Grow the pair buffer as needed.
        if this.m_pairCount == this.m_pairCapacity {
            oldBuffer *b2Pair = this.m_pairBuffer
            this.m_pairCapacity = this.m_pairCapacity + (this.m_pairCapacity >> 1)
            this.m_pairBuffer = b2Alloc(this.m_pairCapacity * sizeof b2Pair) as *b2Pair
            memcpy(this.m_pairBuffer, oldBuffer, this.m_pairCount * sizeof b2Pair)
            b2Free(oldBuffer)
        }

        this.m_pairBuffer[this.m_pairCount].proxyIdA = b2Min(proxyId, this.m_queryProxyId)
        this.m_pairBuffer[this.m_pairCount].proxyIdB = b2Max(proxyId, this.m_queryProxyId)
        ++this.m_pairCount

        return true
    }
}

func b2BroadPhase() b2BroadPhase {
    bp POD b2BroadPhase = undef
    bp.m_tree = POD b2DynamicTree()
    bp.m_proxyCount = 0

    bp.m_pairCapacity = 16
    bp.m_pairCount = 0
    bp.m_pairBuffer = b2Alloc(bp.m_pairCapacity * sizeof b2Pair) as *b2Pair

    bp.m_moveCapacity = 16
    bp.m_moveCount = 0
    bp.m_moveBuffer = b2Alloc(bp.m_moveCapacity * sizeof int) as *int
    return bp
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#default b2_dynamic_tree_validate false

import "sys/cstring.adept"

define b2_nullNode = -1

/// A node in the dynamic tree. The client does not interact with this directly.
struct b2TreeNode (
    /// Enlarged AABB
    aabb b2AABB,

    userData ptr,

    union(parent, next int),

    child1 int,
    child2 int,

    // leaf = 0, free node = -1
    height int,

    moved bool
) {
    func IsLeaf() bool { return this.child1 == b2_nullNode; }
}

/// A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt.
/// A dynamic tree arranges data in a binary tree to accelerate
/// queries such as volume queries and ray casts. Leafs are proxies
/// with an AABB. In the tree we expand the proxy AABB by b2_fatAABBFactor
/// so that the proxy AABB is bigger than the client object. This allows the client
/// object to move by small amounts without triggering a tree update.
///
/// Nodes are pooled and relocatable, so we use node indices rather than pointers.
struct b2DynamicTree (
    m_root int,

    m_nodes *b2TreeNode,
    m_nodeCount int,
    m_nodeCapacity int,

    m_freeList int,

    m_insertionCount int
) {
    func __defer__ {
        // This frees the entire tree in one shot.
        b2Free(this.m_nodes)
    }

    /// Create a proxy. Provide a tight fitting AABB and a userData pointer.
    func CreateProxy(in aabb *b2AABB, userData ptr) int {
        // Create a proxy in the tree as a leaf node. We return the index
        // of the node instead of a pointer so that we can grow
        // the node pool.

        proxyId int = this.AllocateNode()

        // Fatten the aabb.
        r POD b2Vec2 = b2Vec2(b2_aabbExtension, b2_aabbExtension)
        this.m_nodes[proxyId].aabb.lowerBound = aabb.lowerBound - r
        this.m_nodes[proxyId].aabb.upperBound = aabb.upperBound + r
        this.m_nodes[proxyId].userData = userData
        this.m_nodes[proxyId].height = 0
        this.m_nodes[proxyId].moved = true

        this.InsertLeaf(proxyId)

        return proxyId
    }

    /// Destroy a proxy. This asserts if the id is invalid.
    func DestroyProxy(proxyId int) void {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')
        b2Assert(this.m_nodes[proxyId].IsLeaf(), #get __file__, #get __line__, 'b2Assert(this.m_nodes[proxyId].IsLeaf())')

        this.RemoveLeaf(proxyId)
        this.FreeNode(proxyId)
    }

    /// Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
    /// then the proxy is removed from the tree and re-inserted. Otherwise
    /// the function returns immediately.
    /// @return true if the proxy was re-inserted.
    func MoveProxy(proxyId int, in aabb *b2AABB, in displacement *b2Vec2) bool {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')

        b2Assert(this.m_nodes[proxyId].IsLeaf(), #get __file__, #get __line__, 'b2Assert(this.m_nodes[proxyId].IsLeaf())')

        // Extend AABB
        fatAABB POD b2AABB = undef
        r POD b2Vec2 = b2Vec2(b2_aabbExtension, b2_aabbExtension)
        fatAABB.lowerBound = aabb.lowerBound - r
        fatAABB.upperBound = aabb.upperBound + r

        // Predict AABB movement
        d POD b2Vec2 = *displacement * b2_aabbMultiplier

        if d.x < 0.0f {
            fatAABB.lowerBound.x += d.x
        } else {
            fatAABB.upperBound.x += d.x
        }

        if d.y < 0.0f {
            fatAABB.lowerBound.y += d.y
        } else {
            fatAABB.upperBound.y += d.y
        }

        treeAABB *b2AABB = &this.m_nodes[proxyId].aabb

        if treeAABB.Contains(aabb) {
            // The tree AABB still contains the object, but it might be too large.
            // Perhaps the object was moving fast but has since gone to sleep.
            // The huge AABB is larger than the new fat AABB.
            hugeAABB POD b2AABB = undef
            hugeAABB.lowerBound = fatAABB.lowerBound - r * 4.0f
            hugeAABB.upperBound = fatAABB.upperBound + r * 4.0f

            if hugeAABB.Contains(treeAABB) {
                // The tree AABB contains the object AABB and the tree AABB is
                // not too large. No tree update needed.
                return false
            }

            // Otherwise the tree AABB is huge and needs to be shrunk
        }

        this.RemoveLeaf(proxyId)

        this.m_nodes[proxyId].aabb = POD fatAABB

        this.InsertLeaf(proxyId)

        this.m_nodes[proxyId].moved = true

        return true
    }

    /// Get proxy user data.
    /// @return the proxy user data or 0 if the id is invalid.
    func GetUserData(proxyId int) ptr {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')
        return this.m_nodes[proxyId].userData
    }

    func WasMoved(proxyId int) bool {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')
        return this.m_nodes[proxyId].moved
    }

    func ClearMoved(proxyId int) void {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')
        this.m_nodes[proxyId].moved = false
    }

    /// Get the fat AABB for a proxy.
    func GetFatAABB(proxyId int) *b2AABB {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)')
        return &this.m_nodes[proxyId].aabb
    }

    /// Query an AABB for overlapping proxies. The callback class
    /// is called for each proxy that overlaps the supplied AABB.
    func Query(callback *$T, in aabb *b2AABB) void {
        stack <int, 256 int> b2GrowableStack = undef
        b2GrowableStack(&stack)

        stack.Push(&this.m_root)

        while stack.GetCount() > 0 {
            nodeId int = stack.Pop()
            if nodeId == b2_nullNode, continue

            node *b2TreeNode = this.m_nodes at nodeId

            if b2TestOverlap(&node.aabb, aabb) {
                if node.IsLeaf() {
                    proceed bool = callback.QueryCallback(nodeId)
                    unless proceed, return
                } else {
                    stack.Push(&node.child1)
                    stack.Push(&node.child2)
                }
            }
        }
    }

    /// Ray-cast against the proxies in the tree. This relies on the callback
    /// to perform a exact ray-cast in the case were the proxy contains a shape.
    /// The callback also performs the any collision filtering. This has performance
    /// roughly equal to k * log(n), where k is the number of collisions and n is the
    /// number of proxies in the tree.
    /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
    /// @param callback a callback class that is called for each proxy that is hit by the ray.
    func RayCast(callback *$T, in input *b2RayCastInput) void {
        p1 POD b2Vec2 = input.p1
        p2 POD b2Vec2 = input.p2
        r POD b2Vec2 = p2 - p1
        b2Assert(r.LengthSquared() > 0.0f, #get __file__, #get __line__, 'b2Assert(r.LengthSquared() > 0.0f)')
        r.Normalize()

        // v is perpendicular to the segment.
        v POD b2Vec2 = b2Cross(1.0f, r)
        abs_v POD b2Vec2 = b2Abs(v)

        // Separating axis for segment (Gino, p80).
        // |dot(v, p1 - c)| > dot(|v|, h)

        maxFraction float = input.maxFraction

        // Build a bounding box for the segment.
        segmentAABB b2AABB = undef
        
        if true {
            t POD b2Vec2 = p1 + maxFraction * (p2 - p1)
            segmentAABB.lowerBound = b2Min(p1, t)
            segmentAABB.upperBound = b2Max(p1, t)
        }

        stack <int, 256 int> b2GrowableStack = undef
        b2GrowableStack(&stack)

        stack.Push(&this.m_root)

        while stack.GetCount() > 0 {
            nodeId int = stack.Pop()

            if nodeId == b2_nullNode, continue

            node *b2TreeNode = this.m_nodes at nodeId

            unless b2TestOverlap(&node.aabb, &segmentAABB), continue

            // Separating axis for segment (Gino, p80).
            // |dot(v, p1 - c)| > dot(|v|, h)
            c POD b2Vec2 = node.aabb.GetCenter()
            h POD b2Vec2 = node.aabb.GetExtents()
            separation float = b2Abs(b2Dot(v, p1 - c)) - b2Dot(abs_v, h)

            if separation > 0.0f, continue

            if node.IsLeaf() {
                subInput b2RayCastInput = undef
                subInput.p1 = input.p1
                subInput.p2 = input.p2
                subInput.maxFraction = maxFraction

                value float = callback.RayCastCallback(&subInput, nodeId)

                if value == 0.0f {
                    // The client has terminated the ray cast.
                    return
                }

                if value > 0.0f {
                    // Update segment bounding box.
                    maxFraction = value
                    t POD b2Vec2 = p1 + maxFraction * (p2 - p1)
                    segmentAABB.lowerBound = b2Min(p1, t)
                    segmentAABB.upperBound = b2Max(p1, t)
                }
            } else {
                stack.Push(&node.child1)
                stack.Push(&node.child2)
            }
        }
    }

    /// Validate this tree. For testing.
    func Validate() void {
        #if b2DEBUG
            this.ValidateStructure(this.m_root)
            this.ValidateMetrics(this.m_root)

            freeCount int = 0
            freeIndex int = this.m_freeList
            while freeIndex != b2_nullNode {
                b2Assert(0 <= freeIndex && freeIndex < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= freeIndex && freeIndex < this.m_nodeCapacity)')
                freeIndex = this.m_nodes[freeIndex].next
                ++freeCount
            }

            b2Assert(this.GetHeight() == this.ComputeHeight(), #get __file__, #get __line__, 'b2Assert(this.GetHeight() == this.ComputeHeight())');

            b2Assert(this.m_nodeCount + this.freeCount == this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(this.m_nodeCount + this.freeCount == this.m_nodeCapacity)')
        #end
    }

    /// Compute the height of the binary tree in O(N) time. Should not be
    /// called often.
    func GetHeight() int {
        if this.m_root == b2_nullNode, return 0
        return this.m_nodes[this.m_root].height
    }

    /// Get the maximum balance of an node in the tree. The balance is the difference
    /// in height of the two children of a node.
    func GetMaxBalance() int {
        maxBalance int = 0

        for(i int = 0; i < this.m_nodeCapacity; ++i){
            node *b2TreeNode = this.m_nodes at i
            if node.height <= 1, continue

            b2Assert(node.IsLeaf() == false, #get __file__, #get __line__, 'b2Assert(node.IsLeaf() == false)')

            child1 int = node.child1
            child2 int = node.child2
            balance int = b2Abs(this.m_nodes[child2].height - this.m_nodes[child1].height)
            maxBalance = b2Max(maxBalance, balance)
        }

        return maxBalance
    }

    /// Get the ratio of the sum of the node areas to the root area.
    func GetAreaRatio() float {
        if this.m_root == b2_nullNode, return 0.0f

        root *b2TreeNode = this.m_nodes at this.m_root
        rootArea float = root.aabb.GetPerimeter()

        totalArea float = 0.0f
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            node *b2TreeNode = this.m_nodes at i
            if node.height < 0 {
                // Free node in pool
                continue
            }

            totalArea += node.aabb.GetPerimeter()
        }

        return totalArea / rootArea
    }

    /// Build an optimal tree. Very expensive. For testing.
    func RebuildBottomUp() void {
        nodes *int = b2Alloc(this.m_nodeCount * sizeof int) as *int
        count int = 0

        // Build array of leaves. Free the rest.
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            if this.m_nodes[i].height < 0 {
                // free node in pool
                continue
            }

            if this.m_nodes[i].IsLeaf() {
                this.m_nodes[i].parent = b2_nullNode
                nodes[count] = i
                ++count
            } else {
                this.FreeNode(i)
            }
        }

        while count > 1 {
            minCost float = b2_maxFloat
            iMin int = -1
            jMin int = -1

            for(i int = 0; i < count; ++i){
                aabbi POD b2AABB = POD this.m_nodes[nodes[i]].aabb

                for(j int = i + 1; j < count; ++j){
                    aabbj POD b2AABB = POD this.m_nodes[nodes[j]].aabb
                    b POD b2AABB = undef
                    b.Combine(&aabbi, &aabbj)
                    cost float = b.GetPerimeter()
                    if cost < minCost {
                        iMin = i
                        jMin = j
                        minCost = cost
                    }
                }
            }

            index1 int = nodes[iMin]
            index2 int = nodes[jMin]
            child1 *b2TreeNode = this.m_nodes at index1
            child2 *b2TreeNode = this.m_nodes at index2

            parentIndex int = this.AllocateNode()
            parent *b2TreeNode = this.m_nodes at parentIndex
            parent.child1 = index1
            parent.child2 = index2
            parent.height = 1 + b2Max(child1.height, child2.height)
            parent.aabb.Combine(&child1.aabb, &child2.aabb)
            parent.parent = b2_nullNode

            child1.parent = parentIndex
            child2.parent = parentIndex

            nodes[jMin] = nodes[count - 1]
            nodes[iMin] = parentIndex
            --count
        }

        this.m_root = nodes[0]
        b2Free(nodes)

        this.Validate()
    }

    /// Shift the world origin. Useful for large worlds.
    /// The shift formula is: position -= newOrigin
    /// @param newOrigin the new origin with respect to the old origin
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        // Build array of leaves. Free the rest.
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            this.m_nodes[i].aabb.lowerBound.SubtractAssign(*newOrigin)
            this.m_nodes[i].aabb.upperBound.SubtractAssign(*newOrigin)
        }
    }

    // (typically private methods...)

    // Allocate a node from the pool. Grow the pool if necessary.
    func AllocateNode() int {
        // Expand the node pool as needed.
        if this.m_freeList == b2_nullNode {
            b2Assert(this.m_nodeCount == this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(this.m_nodeCount == this.m_nodeCapacity)')

            // The free list is empty. Rebuild a bigger pool.
            oldNodes *b2TreeNode = this.m_nodes
            this.m_nodeCapacity *= 2
            this.m_nodes = b2Alloc(this.m_nodeCapacity * sizeof b2TreeNode) as *b2TreeNode
            memcpy(this.m_nodes, oldNodes, this.m_nodeCount * sizeof b2TreeNode)
            b2Free(oldNodes)

            // Build a linked list for the free list. The parent
            // pointer becomes the "next" pointer.
            for(i int = this.m_nodeCount; i < this.m_nodeCapacity - 1; ++i){
                this.m_nodes[i].next = i + 1
                this.m_nodes[i].height = -1
            }
            this.m_nodes[this.m_nodeCapacity - 1].next = b2_nullNode
            this.m_nodes[this.m_nodeCapacity - 1].height = -1
            this.m_freeList = this.m_nodeCount
        }

        // Peel a node off the free list.
        nodeId int = this.m_freeList
        this.m_freeList = this.m_nodes[nodeId].next
        this.m_nodes[nodeId].parent = b2_nullNode
        this.m_nodes[nodeId].child1 = b2_nullNode
        this.m_nodes[nodeId].child2 = b2_nullNode
        this.m_nodes[nodeId].height = 0
        this.m_nodes[nodeId].userData = null
        this.m_nodes[nodeId].moved = false
        ++this.m_nodeCount
        return nodeId
    }

    // Return a node to the pool.
    func FreeNode(nodeId int) void {
        b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity)')
        b2Assert(0 < this.m_nodeCount, #get __file__, #get __line__, 'b2Assert(0 < this.m_nodeCount)')
        this.m_nodes[nodeId].next = this.m_freeList
        this.m_nodes[nodeId].height = -1
        this.m_freeList = nodeId
        --this.m_nodeCount
    }

    func InsertLeaf(leaf int) void {
        ++this.m_insertionCount

        if this.m_root == b2_nullNode {
            this.m_root = leaf
            this.m_nodes[this.m_root].parent = b2_nullNode
            return
        }

        // Find the best sibling for this node
        leafAABB POD b2AABB = POD this.m_nodes[leaf].aabb
        index int = this.m_root
        while this.m_nodes[index].IsLeaf() == false {
            child1 int = this.m_nodes[index].child1
            child2 int = this.m_nodes[index].child2

            area float = this.m_nodes[index].aabb.GetPerimeter()

            combinedAABB POD b2AABB = undef
            combinedAABB.Combine(&this.m_nodes[index].aabb, &leafAABB)
            combinedArea float = combinedAABB.GetPerimeter()

            // Cost of creating a new parent for this node and the new leaf
            cost float = 2.0f * combinedArea

            // Minimum cost of pushing the leaf further down the tree
            inheritanceCost float = 2.0f * (combinedArea - area)

            // Cost of descending into child1
            cost1 float = undef

            if this.m_nodes[child1].IsLeaf() {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child1].aabb)
                cost1 = aabb.GetPerimeter() + inheritanceCost
            } else {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child1].aabb)
                oldArea float = this.m_nodes[child1].aabb.GetPerimeter()
                newArea float = aabb.GetPerimeter()
                cost1 = (newArea - oldArea) + inheritanceCost
            }

            // Cost of descending into child2
            cost2 float = undef
            if this.m_nodes[child2].IsLeaf() {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child2].aabb)
                cost2 = aabb.GetPerimeter() + inheritanceCost
            } else {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child2].aabb)
                oldArea float = this.m_nodes[child2].aabb.GetPerimeter()
                newArea float = aabb.GetPerimeter()
                cost2 = newArea - oldArea + inheritanceCost
            }

            // Descend according to the minimum cost.
            if cost < cost1 && cost < cost2, break

            // Descend
            if cost1 < cost2 {
                index = child1
            } else {
                index = child2
            }
        }

        sibling int = index

        // Create a new parent.
        oldParent int = this.m_nodes[sibling].parent
        newParent int = this.AllocateNode()
        this.m_nodes[newParent].parent = oldParent
        this.m_nodes[newParent].userData = null
        this.m_nodes[newParent].aabb.Combine(&leafAABB, &this.m_nodes[sibling].aabb)
        this.m_nodes[newParent].height = this.m_nodes[sibling].height + 1

        if oldParent != b2_nullNode {
            // The sibling was not the root.
            if this.m_nodes[oldParent].child1 == sibling {
                this.m_nodes[oldParent].child1 = newParent
            } else {
                this.m_nodes[oldParent].child2 = newParent
            }

            this.m_nodes[newParent].child1 = sibling
            this.m_nodes[newParent].child2 = leaf
            this.m_nodes[sibling].parent = newParent
            this.m_nodes[leaf].parent = newParent
        } else {
            // The sibling was the root.
            this.m_nodes[newParent].child1 = sibling
            this.m_nodes[newParent].child2 = leaf
            this.m_nodes[sibling].parent = newParent
            this.m_nodes[leaf].parent = newParent
            this.m_root = newParent
        }

        // Walk back up the tree fixing heights and AABBs
        index = this.m_nodes[leaf].parent
        while index != b2_nullNode {
            index = this.Balance(index)

            child1 int = this.m_nodes[index].child1
            child2 int = this.m_nodes[index].child2

            b2Assert(child1 != b2_nullNode, #get __file__, #get __line__, 'b2Assert(child1 != b2_nullNode)')
            b2Assert(child2 != b2_nullNode, #get __file__, #get __line__, 'b2Assert(child2 != b2_nullNode)')

            this.m_nodes[index].height = 1 + b2Max(this.m_nodes[child1].height, this.m_nodes[child2].height)
            this.m_nodes[index].aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)

            index = this.m_nodes[index].parent
        }

        #if b2_dynamic_tree_validate
            this.Validate()
        #end
    }

    func RemoveLeaf(leaf int) void {
        if leaf == this.m_root {
            this.m_root = b2_nullNode
            return
        }

        parent int = this.m_nodes[leaf].parent
        grandParent int = this.m_nodes[parent].parent
        sibling int = undef

        if this.m_nodes[parent].child1 == leaf {
            sibling = this.m_nodes[parent].child2
        } else {
            sibling = this.m_nodes[parent].child1
        }

        if grandParent != b2_nullNode {
            // Destroy parent and connect sibling to grandParent.
            if this.m_nodes[grandParent].child1 == parent {
                this.m_nodes[grandParent].child1 = sibling
            } else {
                this.m_nodes[grandParent].child2 = sibling
            }

            this.m_nodes[sibling].parent = grandParent
            this.FreeNode(parent)

            // Adjust ancestor bounds.
            index int = grandParent
            while index != b2_nullNode {
                index = this.Balance(index)

                child1 int = this.m_nodes[index].child1
                child2 int = this.m_nodes[index].child2

                this.m_nodes[index].aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)
                this.m_nodes[index].height = 1 + b2Max(this.m_nodes[child1].height, this.m_nodes[child2].height)

                index = this.m_nodes[index].parent
            }
        } else {
            this.m_root = sibling
            this.m_nodes[sibling].parent = b2_nullNode
            this.FreeNode(parent)
        }

        #if b2_dynamic_tree_validate
            this.Validate()
        #end
    }

    // Perform a left or right rotation if node A is imbalanced.
    // Returns the new root index.
    func Balance(iA int) int {
        b2Assert(iA != b2_nullNode, #get __file__, #get __line__, 'b2Assert(iA != b2_nullNode)')

        A *b2TreeNode = this.m_nodes at iA
        if A.IsLeaf() || A.height < 2 {
            return iA
        }

        iB int = A.child1
        iC int = A.child2
        b2Assert(0 <= iB && iB < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iB && iB < this.m_nodeCapacity)')
        b2Assert(0 <= iC && iC < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iC && iC < this.m_nodeCapacity)')

        B *b2TreeNode = this.m_nodes at iB
        C *b2TreeNode = this.m_nodes at iC

        balance int = C.height - B.height

        // Rotate C up
        if balance > 1 {
            iF int = C.child1
            iG int = C.child2
            F *b2TreeNode = this.m_nodes at iF
            G *b2TreeNode = this.m_nodes at iG
            b2Assert(0 <= iF && iF < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iF && iF < this.m_nodeCapacity)')
            b2Assert(0 <= iG && iG < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iG && iG < this.m_nodeCapacity)')

            // Swap A and C
            C.child1 = iA
            C.parent = A.parent
            A.parent = iC

            // A's old parent should point to C
            if C.parent != b2_nullNode {
                if this.m_nodes[C.parent].child1 == iA {
                    this.m_nodes[C.parent].child1 = iC
                } else {
                    b2Assert(this.m_nodes[C.parent].child2 == iA, #get __file__, #get __line__, 'b2Assert(this.m_nodes[C.parent].child2 == iA)')
                    this.m_nodes[C.parent].child2 = iC
                }
            } else {
                this.m_root = iC
            }

            // Rotate
            if F.height > G.height {
                C.child2 = iF
                A.child2 = iG
                G.parent = iA
                A.aabb.Combine(&B.aabb, &G.aabb)
                C.aabb.Combine(&A.aabb, &F.aabb)

                A.height = 1 + b2Max(B.height, G.height)
                C.height = 1 + b2Max(A.height, F.height)
            } else {
                C.child2 = iG
                A.child2 = iF
                F.parent = iA
                A.aabb.Combine(&B.aabb, &F.aabb)
                C.aabb.Combine(&A.aabb, &G.aabb)

                A.height = 1 + b2Max(B.height, F.height)
                C.height = 1 + b2Max(A.height, G.height)
            }

            return iC
        }
        
        // Rotate B up
        if balance < -1 {
            iD int = B.child1
            iE int = B.child2
            D *b2TreeNode = this.m_nodes at iD
            E *b2TreeNode = this.m_nodes at iE
            b2Assert(0 <= iD && iD < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iD && iD < this.m_nodeCapacity)')
            b2Assert(0 <= iE && iE < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= iE && iE < this.m_nodeCapacity)')

            // Swap A and B
            B.child1 = iA
            B.parent = A.parent
            A.parent = iB

            // A's old parent should point to B
            if B.parent != b2_nullNode {
                if this.m_nodes[B.parent].child1 == iA {
                    this.m_nodes[B.parent].child1 = iB
                } else {
                    b2Assert(this.m_nodes[B.parent].child2 == iA, #get __file__, #get __line__, 'b2Assert(this.m_nodes[B.parent].child2 == iA)')
                    this.m_nodes[B.parent].child2 = iB
                }
            } else {
                this.m_root = iB
            }

            // Rotate
            if D.height > E.height {
                B.child2 = iD
                A.child1 = iE
                E.parent = iA
                A.aabb.Combine(&C.aabb, &E.aabb)
                B.aabb.Combine(&A.aabb, &D.aabb)

                A.height = 1 + b2Max(C.height, E.height)
                B.height = 1 + b2Max(A.height, D.height)
            } else {
                B.child2 = iE
                A.child1 = iD
                D.parent = iA
                A.aabb.Combine(&C.aabb, &D.aabb)
                B.aabb.Combine(&A.aabb, &E.aabb)

                A.height = 1 + b2Max(C.height, D.height)
                B.height = 1 + b2Max(A.height, E.height)
            }

            return iB
        }

        return iA
    }

    func ComputeHeight() int {
        return this.ComputeHeight(this.m_root)
    }

    func ComputeHeight(nodeId int) int {
        b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity)')
        node *b2TreeNode = this.m_nodes at nodeId

        if node.IsLeaf(), return 0

        height1 int = this.ComputeHeight(node.child1)
        height2 int = this.ComputeHeight(node.child2)
        return 1 + b2Max(height1, height2)
    }

    func ValidateStructure(index int) void {
        if index == b2_nullNode, return
        
        if index == this.m_root {
            b2Assert(this.m_nodes[index].parent == b2_nullNode, #get __file__, #get __line__, 'b2Assert(this.m_nodes[index].parent == b2_nullNode)')
        }

        node *b2TreeNode = this.m_nodes at index

        child1 int = node.child1
        child2 int = node.child2

        if node.IsLeaf() {
            b2Assert(child1 == b2_nullNode, #get __file__, #get __line__, 'b2Assert(child1 == b2_nullNode)')
            b2Assert(child2 == b2_nullNode, #get __file__, #get __line__, 'b2Assert(child2 == b2_nullNode)')
            b2Assert(node.height == 0, #get __file__, #get __line__, 'b2Assert(node.height == 0)')
            return
        }

        b2Assert(0 <= child1 && child1 < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= child1 && child1 < this.m_nodeCapacity)')
        b2Assert(0 <= child2 && child2 < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= child2 && child2 < this.m_nodeCapacity)')

        b2Assert(this.m_nodes[child1].parent == index, #get __file__, #get __line__, 'b2Assert(this.m_nodes[child1].parent == index)')
        b2Assert(this.m_nodes[child2].parent == index, #get __file__, #get __line__, 'b2Assert(this.m_nodes[child2].parent == index)')

        this.ValidateStructure(child1)
        this.ValidateStructure(child2)
    }

    func ValidateMetrics(index int) void {
        if index == b2_nullNode, return

        node *b2TreeNode = this.m_nodes at index

        child1 int = node.child1
        child2 int = node.child2

        if node.IsLeaf() {
            b2Assert(child1 == b2_nullNode, #get __file__, #get __line__, 'b2Assert(child1 == b2_nullNode)')
            b2Assert(child2 == b2_nullNode, #get __file__, #get __line__, 'b2Assert(child2 == b2_nullNode)')
            b2Assert(node.height == 0, #get __file__, #get __line__, 'b2Assert(node.height == 0)')
            return
        }

        b2Assert(0 <= child1 && child1 < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= child1 && child1 < this.m_nodeCapacity)')
        b2Assert(0 <= child2 && child2 < this.m_nodeCapacity, #get __file__, #get __line__, 'b2Assert(0 <= child2 && child2 < this.m_nodeCapacity)')

        height1 int = this.m_nodes[child1].height
        height2 int = this.m_nodes[child2].height
        height int = undef
        height = 1 + b2Max(height1, height2)
        b2Assert(node.height == height, #get __file__, #get __line__, 'b2Assert(node.height == height)')

        aabb POD b2AABB = undef
        aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)

        b2Assert(aabb.lowerBound == node.aabb.lowerBound, #get __file__, #get __line__, 'b2Assert(aabb.lowerBound == node.aabb.lowerBound)')
        b2Assert(aabb.upperBound == node.aabb.upperBound, #get __file__, #get __line__, 'b2Assert(aabb.upperBound == node.aabb.upperBound)')

        this.ValidateMetrics(child1)
        this.ValidateMetrics(child2)
    }
}


/// Constructing the tree initializes the node pool.
func b2DynamicTree() b2DynamicTree {
    dt POD b2DynamicTree = undef
    
    dt.m_root = b2_nullNode

    dt.m_nodeCapacity = 16
    dt.m_nodeCount = 0
    dt.m_nodes = b2Alloc(dt.m_nodeCapacity * sizeof b2TreeNode) as *b2TreeNode
    memset(dt.m_nodes, 0, dt.m_nodeCapacity * sizeof b2TreeNode)

    // Build a linked list for the free list.
    for(i int = 0; i < dt.m_nodeCapacity - 1; ++i){
        dt.m_nodes[i].next = i + 1
        dt.m_nodes[i].height = -1
    }

    dt.m_nodes[dt.m_nodeCapacity - 1].next = b2_nullNode
    dt.m_nodes[dt.m_nodeCapacity - 1].height = -1
    dt.m_freeList = 0

    dt.m_insertionCount = 0
    return dt
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstring.adept"

// Example Usage: <int, 512 int> b2GrowableStack
struct <$T, $Sizing> b2GrowableStack (
    m_stack *$T,
    union (m_array $T, _m_array_storage $Sizing),
    m_count int,
    m_capacity int
) {
    verbatim func __defer__ {
        if this.m_stack != &this.m_array {
            b2Free(this.m_stack)
            this.m_stack = null
        }
    }

    func Push(in element *$T) void {
        if this.m_count == this.m_capacity {
            old *$T = this.m_stack
            this.m_capacity *= 2
            this.m_stack = b2Alloc(this.m_capacity * sizeof $T) as *$T

            memcpy(this.m_stack, old, this.m_count * sizeof $T)

            if old != &this.m_array {
                b2Free(old)
            }
        }

        this.m_stack[this.m_count] = POD *element
        ++this.m_count
    }

    func Pop() $T {
        b2Assert(this.m_count > 0, #get __file__, #get __line__, 'b2Assert(this.m_count > 0)')
        --this.m_count
        return this.m_stack[this.m_count]
    }

    func GetCount() int {
        return this.m_count
    }
}

func b2GrowableStack(gs *<$T, $Sizing> b2GrowableStack) void {
    gs.m_stack = &gs.m_array
    gs.m_count = 0
    gs.m_capacity = sizeof $Sizing / sizeof $T
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES
    class b2Fixture    class b2Joint    class b2Contact    class b2Controller    class b2World    struct b2FixtureDef    struct b2JointEdge    struct b2ContactEdge*/

/// The body type.
/// static: zero mass, zero velocity, may be manually moved
/// kinematic: zero mass, non-zero velocity set by user, moved by solver
/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver
enum b2BodyType (b2_staticBody, b2_kinematicBody, b2_dynamicBody)

define b2_staticBody = b2BodyType::b2_staticBody
define b2_kinematicBody = b2BodyType::b2_kinematicBody
define b2_dynamicBody = b2BodyType::b2_dynamicBody

/// A body definition holds all the data needed to construct a rigid body.
/// You can safely re-use body definitions. Shapes are added to a body after construction.
struct b2BodyDef (
    /// The body type: static, kinematic, or dynamic.
    /// Note: if a dynamic body would have zero mass, the mass is set to one.
    type b2BodyType,

    /// The world position of the body. Avoid creating bodies at the origin
    /// since this can lead to many overlapping shapes.
    position b2Vec2,

    /// The world angle of the body in radians.
    angle float,

    /// The linear velocity of the body's origin in world co-ordinates.
    linearVelocity b2Vec2,

    /// The angular velocity of the body.
    angularVelocity float,

    /// Linear damping is use to reduce the linear velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    /// Units are 1/time
    linearDamping float,

    /// Angular damping is use to reduce the angular velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    /// Units are 1/time
    angularDamping float,

    /// Set this flag to false if this body should never fall asleep. Note that
    /// this increases CPU usage.
    allowSleep bool,

    /// Is this body initially awake or sleeping?
    awake bool,

    /// Should this body be prevented from rotating? Useful for characters.
    fixedRotation bool,

    /// Is this a fast moving body that should be prevented from tunneling through
    /// other moving bodies? Note that all bodies are prevented from tunneling through
    /// kinematic and static bodies. This setting is only considered on dynamic bodies.
    /// @warning You should use this flag sparingly since it increases processing time.
    bullet bool,

    /// Does this body start out enabled?
    enabled bool,

    /// Use this to store application specific body data.
    userData b2BodyUserData,

    /// Scale the gravity applied to this body.
    gravityScale float
)

/// This constructor sets the body definition default values.
func b2BodyDef() b2BodyDef {
    bdef POD b2BodyDef = undef
    bdef.position.Set(0.0f, 0.0f)
    bdef.angle = 0.0f
    bdef.linearVelocity.Set(0.0f, 0.0f)
    bdef.angularVelocity = 0.0f
    bdef.linearDamping = 0.0f
    bdef.angularDamping = 0.0f
    bdef.allowSleep = true
    bdef.awake = true
    bdef.fixedRotation = false
    bdef.bullet = false
    bdef.type = b2_staticBody
    bdef.enabled = true
    bdef.gravityScale = 1.0f
    return bdef
}

define b2Body\e_islandFlag        = 0x0001
define b2Body\e_awakeFlag         = 0x0002
define b2Body\e_autoSleepFlag     = 0x0004
define b2Body\e_bulletFlag        = 0x0008
define b2Body\e_fixedRotationFlag = 0x0010
define b2Body\e_enabledFlag       = 0x0020
define b2Body\e_toiFlag           = 0x0040

/// A rigid body. These are created via b2World::CreateBody.
struct b2Body (
    m_type b2BodyType,

    m_flags ushort,

    m_islandIndex int,

    m_xf b2Transform, // the body origin transform
    m_sweep b2Sweep,  // the swept motion for CCD

    m_linearVelocity b2Vec2,
    m_angularVelocity float,

    m_force b2Vec2,
    m_torque float,

    m_world *b2World,
    m_prev *b2Body,
    m_next *b2Body,

    m_fixtureList *b2Fixture,
    m_fixtureCount int,

    m_jointList *b2JointEdge,
    m_contactList *b2ContactEdge,

    m_mass, m_invMass float,

    // Rotational inertia about the center of mass.
    m_I, m_invI float,

    m_linearDamping float,
    m_angularDamping float,
    m_gravityScale float,

    m_sleepTime float,

    m_userData b2BodyUserData
) {
    /// Creates a fixture and attach it to this body. Use this function if you need
    /// to set some fixture parameters, like friction. Otherwise you can create the
    /// fixture directly from a shape.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// Contacts are not created until the next time step.
    /// @param def the fixture definition.
    /// @warning This function is locked during callbacks.
    func CreateFixture(definition *b2FixtureDef) *b2Fixture {
        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')
        if this.m_world.IsLocked(), return null

        allocator *b2BlockAllocator = &this.m_world.m_blockAllocator

        memory ptr = allocator.Allocate(sizeof b2Fixture)
        fixture *b2Fixture = b2Fixture(memory)
        fixture.Create(allocator, this, definition)


        if this.m_flags & b2Body\e_enabledFlag {
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            fixture.CreateProxies(broadPhase, &this.m_xf)
        }

        fixture.m_next = this.m_fixtureList
        this.m_fixtureList = fixture
        ++this.m_fixtureCount

        fixture.m_body = this

        // Adjust mass properties if needed.
        if fixture.m_density > 0.0f {
            this.ResetMassData()
        }

        // Let the world know we have a new fixture. This will cause new contacts
        // to be created at the beginning of the next time step.
        this.m_world.m_newContacts = true

        return fixture
    }

    /// Creates a fixture from a shape and attach it to this body.
    /// This is a convenience function. Use b2FixtureDef if you need to set parameters
    /// like friction, restitution, user data, or filtering.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// @param shape the shape to be cloned.
    /// @param density the shape density (set to zero for static bodies).
    /// @warning This function is locked during callbacks.
    func CreateFixture(shape *b2Shape, density float) *b2Fixture {
        definition POD b2FixtureDef = b2FixtureDef()
        definition.shape = shape
        definition.density = density
        return this.CreateFixture(&definition)
    }

    /// Destroy a fixture. This removes the fixture from the broad-phase and
    /// destroys all contacts associated with this fixture. This will
    /// automatically adjust the mass of the body if the body is dynamic and the
    /// fixture has positive density.
    /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.
    /// @param fixture the fixture to be removed.
    /// @warning This function is locked during callbacks.
    func DestroyFixture(fixture *b2Fixture) {
        if fixture == null, return

        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')
        if this.m_world.IsLocked(), return

        b2Assert(fixture.m_body == this, #get __file__, #get __line__, 'b2Assert(fixture.m_body == this)')

        // Remove the fixture from this body's singly linked list.
        b2Assert(this.m_fixtureCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_fixtureCount > 0)')
        node **b2Fixture = &this.m_fixtureList
        found bool = false
        while *node != null {
            if *node == fixture {
                *node = fixture.m_next
                found = true
                break
            }

            node = &(*node).m_next
        }

        // You tried to remove a shape that is not attached to this body.
        b2Assert(found, #get __file__, #get __line__, 'b2Assert(found)')

        // Destroy any contacts associated with the fixture.
        edge *b2ContactEdge = this.m_contactList
        while edge {
            c *b2Contact = edge.contact
            edge = edge.next

            fixtureA *b2Fixture = c.GetFixtureA()
            fixtureB *b2Fixture = c.GetFixtureB()

            if fixture == fixtureA || fixture == fixtureB {
                // This destroys the contact and removes it from
                // this body's contact list.
                this.m_world.m_contactManager.Destroy(c)
            }
        }

        allocator *b2BlockAllocator = &this.m_world.m_blockAllocator

        if this.m_flags & b2Body\e_enabledFlag {
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            fixture.DestroyProxies(broadPhase)
        }

        fixture.m_body = null
        fixture.m_next = null
        fixture.Destroy(allocator)
        fixture.__defer__()
        allocator.Free(fixture, sizeof b2Fixture)

        --this.m_fixtureCount

        // Reset the mass data.
        this.ResetMassData()
    }

    /// Set the position of the body's origin and rotation.
    /// Manipulating a body's transform may cause non-physical behavior.
    /// Note: contacts are updated on the next call to b2World::Step.
    /// @param position the world position of the body's local origin.
    /// @param angle the world rotation in radians.
    func SetTransform(in position *b2Vec2, angle float) {
        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')
        if this.m_world.IsLocked(), return

        this.m_xf.q.Set(angle)
        this.m_xf.p = *position

        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.a = angle

        this.m_sweep.c0 = this.m_sweep.c
        this.m_sweep.a0 = angle

        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            f.Synchronize(broadPhase, &this.m_xf, &this.m_xf)
        }

        // Check for new contacts the next step
        this.m_world.m_newContacts = true
    }

    /// Get the body transform for the body's origin.
    /// @return the world transform of the body's origin.
    func GetTransform() *b2Transform {
        return &this.m_xf
    }

    /// Get the world body origin position.
    /// @return the world position of the body's origin.
    func GetPosition() *b2Vec2 {
        return &this.m_xf.p
    }

    /// Get the angle in radians.
    /// @return the current world rotation angle in radians.
    func GetAngle() float {
        return this.m_sweep.a
    }

    /// Get the world position of the center of mass.
    func GetWorldCenter() *b2Vec2 {
        return &this.m_sweep.c
    }

    /// Get the local position of the center of mass.
    func GetLocalCenter() *b2Vec2 {
        return &this.m_sweep.localCenter
    }

    /// Set the linear velocity of the center of mass.
    /// @param v the new linear velocity of the center of mass.
    func SetLinearVelocity(in v *b2Vec2) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if b2Dot(*v, *v) > 0.0f {
            this.SetAwake(true)
        }

        this.m_linearVelocity = *v
    }

    /// Get the linear velocity of the center of mass.
    /// @return the linear velocity of the center of mass.
    func GetLinearVelocity() *b2Vec2 {
        return &this.m_linearVelocity
    }

    /// Set the angular velocity.
    /// @param omega the new angular velocity in radians/second.
    func SetAngularVelocity(omega float) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if omega * omega > 0.0f {
            this.SetAwake(true)
        }

        this.m_angularVelocity = omega
    }

    /// Get the angular velocity.
    /// @return the angular velocity in radians/second.
    func GetAngularVelocity() float {
        return this.m_angularVelocity
    }

    /// Apply a force at a world point. If the force is not
    /// applied at the center of mass, it will generate a torque and
    /// affect the angular velocity. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    /// @param point the world position of the point of application.
    /// @param wake also wake up the body
    func ApplyForce(in force *b2Vec2, in point *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping.
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_force.AddAssign(*force)
            this.m_torque += b2Cross(*point - this.m_sweep.c, *force)
        }
    }

    /// Apply a force to the center of mass. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    /// @param wake also wake up the body
    func ApplyForceToCenter(in force *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_force.AddAssign(*force)
        }
    }

    /// Apply a torque. This affects the angular velocity
    /// without affecting the linear velocity of the center of mass.
    /// @param torque about the z-axis (out of the screen), usually in N-m.
    /// @param wake also wake up the body
    func ApplyTorque(torque float, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_torque += torque
        }
    }

    /// Apply an impulse at a point. This immediately modifies the velocity.
    /// It also modifies the angular velocity if the point of application
    /// is not at the center of mass. This wakes up the body.
    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
    /// @param point the world position of the point of application.
    /// @param wake also wake up the body
    func ApplyLinearImpulse(in impulse *b2Vec2, in point *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_linearVelocity.AddAssign(this.m_invMass * *impulse)
            this.m_angularVelocity += this.m_invI * b2Cross(*point - this.m_sweep.c, *impulse)
        }
    }

    /// Apply an impulse to the center of mass. This immediately modifies the velocity.
    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
    /// @param wake also wake up the body
    func ApplyLinearImpulseToCenter(in impulse *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_linearVelocity.AddAssign(this.m_invMass * *impulse)
        }
    }

    /// Apply an angular impulse.
    /// @param impulse the angular impulse in units of kg*m*m/s
    /// @param wake also wake up the body
    func ApplyAngularImpulse(impulse float, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_angularVelocity += this.m_invI * impulse
        }
    }

    /// Get the total mass of the body.
    /// @return the mass, usually in kilograms (kg).
    func GetMass() float {
        return this.m_mass
    }

    /// Get the rotational inertia of the body about the local origin.
    /// @return the rotational inertia, usually in kg-m^2.
    func GetInertia() float {
        return this.m_I + this.m_mass * b2Dot(this.m_sweep.localCenter, this.m_sweep.localCenter)
    }

    /// Get the mass data of the body.
    /// @return a struct containing the mass, inertia and center of the body.
    func GetMassData(out data *b2MassData) void {
        data.mass = this.m_mass
        data.I = this.m_I + this.m_mass * b2Dot(this.m_sweep.localCenter, this.m_sweep.localCenter)
        data.center = this.m_sweep.localCenter
    }

    /// Set the mass properties to override the mass properties of the fixtures.
    /// Note that this changes the center of mass position.
    /// Note that creating or destroying fixtures can also alter the mass.
    /// This function has no effect if the body isn't dynamic.
    /// @param data the mass properties.
    func SetMassData(in massData *b2MassData) void {
        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')
        if this.m_world.IsLocked(), return

        if this.m_type != b2_dynamicBody, return

        this.m_invMass = 0.0f
        this.m_I = 0.0f
        this.m_invI = 0.0f

        this.m_mass = massData.mass
        if this.m_mass <= 0.0f {
            this.m_mass = 1.0f
        }

        this.m_invMass = 1.0f / this.m_mass

        if massData.I > 0.0f && (this.m_flags & b2Body\e_fixedRotationFlag) == 0 {
            this.m_I = massData.I - this.m_mass * b2Dot(massData.center, massData.center)
            b2Assert(this.m_I > 0.0f, #get __file__, #get __line__, 'b2Assert(this.m_I > 0.0f)')
            this.m_invI = 1.0f / this.m_I
        }

        // Move center of mass.
        oldCenter POD b2Vec2 = this.m_sweep.c
        this.m_sweep.localCenter =  massData.center
        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.c0 = this.m_sweep.c

        // Update center of mass velocity.
        this.m_linearVelocity.AddAssign(b2Cross(this.m_angularVelocity, this.m_sweep.c - oldCenter))
    }

    /// This resets the mass properties to the sum of the mass properties of the fixtures.
    /// This normally does not need to be called unless you called SetMassData to override
    /// the mass and you later want to reset the mass.
    func ResetMassData() void {
        // Compute mass data from shapes. Each shape has its own density.
        this.m_mass = 0.0f
        this.m_invMass = 0.0f
        this.m_I = 0.0f
        this.m_invI = 0.0f
        this.m_sweep.localCenter.SetZero()

        // Static and kinematic bodies have zero mass.
        if this.m_type == b2BodyType::b2_staticBody || this.m_type == b2BodyType::b2_kinematicBody {
            this.m_sweep.c0 = this.m_xf.p
            this.m_sweep.c = this.m_xf.p
            this.m_sweep.a0 = this.m_sweep.a
            return
        }

        b2Assert(this.m_type == b2BodyType::b2_dynamicBody, #get __file__, #get __line__, 'b2Assert(this.m_type == b2BodyType::b2_dynamicBody)')

        // Accumulate mass over all fixtures.
        localCenter POD b2Vec2 = b2Vec2_zero
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            if f.m_density == 0.0f, continue

            f.GetMassData(undef massData b2MassData)
            this.m_mass += massData.mass
            localCenter.AddAssign(massData.mass * massData.center)
            this.m_I += massData.I
        }

        // Compute center of mass.
        if this.m_mass > 0.0f {
            this.m_invMass = 1.0f / this.m_mass
            localCenter.MultiplyAssign(this.m_invMass)
        }

        if this.m_I > 0.0f && (this.m_flags & b2Body\e_fixedRotationFlag) == 0 {
            // Center the inertia about the center of mass.
            this.m_I -= this.m_mass * b2Dot(localCenter, localCenter)
            b2Assert(this.m_I > 0.0f, #get __file__, #get __line__, 'b2Assert(this.m_I > 0.0f)')
            this.m_invI = 1.0f / this.m_I

        } else {
            this.m_I = 0.0f
            this.m_invI = 0.0f
        }

        // Move center of mass.
        oldCenter POD b2Vec2 = this.m_sweep.c
        this.m_sweep.localCenter = localCenter
        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.c0 = this.m_sweep.c


        // Update center of mass velocity.
        this.m_linearVelocity.AddAssign(b2Cross(this.m_angularVelocity, this.m_sweep.c - oldCenter))
    }

    /// Get the world coordinates of a point given the local coordinates.
    /// @param localPoint a point on the body measured relative the the body's origin.
    /// @return the same point expressed in world coordinates.
    func GetWorldPoint(in localPoint *b2Vec2) b2Vec2 {
        return b2Mul(&this.m_xf, *localPoint)
    }

    /// Get the world coordinates of a vector given the local coordinates.
    /// @param localVector a vector fixed in the body.
    /// @return the same vector expressed in world coordinates.
    func GetWorldVector(in localVector *b2Vec2) b2Vec2 {
        return b2Mul(this.m_xf.q, *localVector)
    }

    /// Gets a local point relative to the body's origin given a world point.
    /// @param worldPoint a point in world coordinates.
    /// @return the corresponding local point relative to the body's origin.
    func GetLocalPoint(in worldPoint *b2Vec2) b2Vec2 {
        return b2MulT(&this.m_xf, *worldPoint)
    }

    /// Gets a local vector given a world vector.
    /// @param worldVector a vector in world coordinates.
    /// @return the corresponding local vector.
    func GetLocalVector(in worldVector *b2Vec2) b2Vec2 {
        return b2MulT(this.m_xf.q, *worldVector)
    }

    /// Get the world linear velocity of a world point attached to this body.
    /// @param worldPoint a point in world coordinates.
    /// @return the world velocity of a point.
    func GetLinearVelocityFromWorldPoint(in worldPoint *b2Vec2) b2Vec2 {
        return this.m_linearVelocity + b2Cross(this.m_angularVelocity, *worldPoint - this.m_sweep.c)
    }

    /// Get the world velocity of a local point.
    /// @param localPoint a point in local coordinates.
    /// @return the world velocity of a point.
    func GetLinearVelocityFromLocalPoint(in localPoint *b2Vec2) b2Vec2 {
        world_point POD b2Vec2 = this.GetWorldPoint(localPoint)
        return this.GetLinearVelocityFromWorldPoint(&world_point)
    }

    /// Get the linear damping of the body.
    func GetLinearDamping() float {
        return this.m_linearDamping
    }

    /// Set the linear damping of the body.
    func SetLinearDamping(linearDamping float) void {
        this.m_linearDamping = linearDamping
    }

    /// Get the angular damping of the body.
    func GetAngularDamping() float {
        return this.m_angularDamping
    }

    /// Set the angular damping of the body.
    func SetAngularDamping(angularDamping float) void {
        this.m_angularDamping = angularDamping
    }

    /// Get the gravity scale of the body.
    func GetGravityScale() float {
        return this.m_gravityScale
    }

    /// Set the gravity scale of the body.
    func SetGravityScale(scale float) void {
        this.m_gravityScale = scale
    }

    /// Set the type of this body. This may alter the mass and velocity.
    func SetType(type b2BodyType) void {
        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')

        if this.m_world.IsLocked(), return
        if this.m_type == type, return

        this.m_type = type

        this.ResetMassData()

        if this.m_type == b2BodyType::b2_staticBody {
            this.m_linearVelocity.SetZero()
            this.m_angularVelocity = 0.0f
            this.m_sweep.a0 = this.m_sweep.a
            this.m_sweep.c0 = this.m_sweep.c
            this.m_flags &= ~b2Body\e_awakeFlag
            this.SynchronizeFixtures()
        }

        this.SetAwake(true)

        this.m_force.SetZero()
        this.m_torque = 0.0f

        // Delete the attached contacts.
        ce *b2ContactEdge = this.m_contactList
        while ce {
            ce0 *b2ContactEdge = ce
            ce = ce.next
            this.m_world.m_contactManager.Destroy(ce0.contact)
        }
        this.m_contactList = null

        // Touch the proxies so that new contacts will be created (when appropriate)
        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            proxyCount int = f.m_proxyCount
            for(i int = 0; i < proxyCount; ++i){
                broadPhase.TouchProxy(f.m_proxies[i].proxyId)
            }
        }
    }

    /// Get the type of this body.
    func GetType() b2BodyType {
        return this.m_type
    }

    /// Should this body be treated like a bullet for continuous collision detection?
    func SetBullet(flag bool) void {
        if flag {
            this.m_flags |= b2Body\e_bulletFlag
        } else {
            this.m_flags &= ~b2Body\e_bulletFlag
        }
    }

    /// Is this body treated like a bullet for continuous collision detection?
    func IsBullet() bool {
        return (this.m_flags & b2Body\e_bulletFlag) == b2Body\e_bulletFlag
    }

    /// You can disable sleeping on this body. If you disable sleeping, the
    /// body will be woken.
    func SetSleepingAllowed(flag bool) void {
        if flag {
            this.m_flags |= b2Body\e_autoSleepFlag
        } else {
            this.m_flags &= ~b2Body\e_autoSleepFlag
            this.SetAwake(true)
        }
    }

    /// Is this body allowed to sleep
    func IsSleepingAllowed() bool {
        return (this.m_flags & b2Body\e_autoSleepFlag) == b2Body\e_autoSleepFlag
    }

    /// Set the sleep state of the body. A sleeping body has very
    /// low CPU cost.
    /// @param flag set to true to wake the body, false to put it to sleep.
    func SetAwake(flag bool) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if flag {
            this.m_flags |= b2Body\e_awakeFlag
            this.m_sleepTime = 0.0f
        } else {
            this.m_flags &= ~b2Body\e_awakeFlag
            this.m_sleepTime = 0.0f
            this.m_linearVelocity.SetZero()
            this.m_angularVelocity = 0.0f
            this.m_force.SetZero()
            this.m_torque = 0.0f
        }
    }

    /// Get the sleeping state of this body.
    /// @return true if the body is awake.
    func IsAwake() bool {
        return (this.m_flags & b2Body\e_awakeFlag) == b2Body\e_awakeFlag
    }

    /// Allow a body to be disabled. A disabled body is not simulated and cannot
    /// be collided with or woken up.
    /// If you pass a flag of true, all fixtures will be added to the broad-phase.
    /// If you pass a flag of false, all fixtures will be removed from the
    /// broad-phase and all contacts will be destroyed.
    /// Fixtures and joints are otherwise unaffected. You may continue
    /// to create/destroy fixtures and joints on disabled bodies.
    /// Fixtures on a disabled body are implicitly disabled and will
    /// not participate in collisions, ray-casts, or queries.
    /// Joints connected to a disabled body are implicitly disabled.
    /// An diabled body is still owned by a b2World object and remains
    /// in the body list.
    func SetEnabled(flag bool) void {
        b2Assert(this.m_world.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked() == false)')

        if flag == this.IsEnabled(), return

        if flag {
            this.m_flags |= b2Body\e_enabledFlag

            // Create all proxies.
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next) {
                f.CreateProxies(broadPhase, &this.m_xf)
            }

            // Contacts are created at the beginning of the next
            this.m_world.m_newContacts = true
        } else {
            this.m_flags &= ~b2Body\e_enabledFlag

            // Destroy all proxies.
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.DestroyProxies(broadPhase)
            }

            // Destroy the attached contacts.
            ce *b2ContactEdge = this.m_contactList
            while ce {
                ce0 *b2ContactEdge = ce
                ce = ce.next
                this.m_world.m_contactManager.Destroy(ce0.contact)
            }
            this.m_contactList = null
        }
    }

    /// Get the active state of the body.
    func IsEnabled() bool {
        return (this.m_flags & b2Body\e_enabledFlag) == b2Body\e_enabledFlag
    }

    /// Set this body to have fixed rotation. This causes the mass
    /// to be reset.
    func SetFixedRotation(flag bool) void{
        status bool = (this.m_flags & b2Body\e_fixedRotationFlag) == b2Body\e_fixedRotationFlag
        if status == flag, return

        if flag {
            this.m_flags |= b2Body\e_fixedRotationFlag
        } else {
            this.m_flags &= ~b2Body\e_fixedRotationFlag
        }

        this.m_angularVelocity = 0.0f

        this.ResetMassData()
    }

    /// Does this body have fixed rotation?
    func IsFixedRotation() bool {
        return (this.m_flags & b2Body\e_fixedRotationFlag) == b2Body\e_fixedRotationFlag
    }

    /// Get the list of all fixtures attached to this body.
    func GetFixtureList() *b2Fixture {
        return this.m_fixtureList
    }

    /// Get the list of all joints attached to this body.
    func GetJointList() *b2JointEdge {
        return this.m_jointList
    }

    /// Get the list of all contacts attached to this body.
    /// @warning this list changes during the time step and you may
    /// miss some collisions if you don't use b2ContactListener.
    func GetContactList() *b2ContactEdge {
        return this.m_contactList
    }

    /// Get the next body in the world's body list.
    func GetNext() *b2Body {
        return this.m_next
    }

    /// Get the user data pointer that was provided in the body definition.
    func GetUserData() *b2BodyUserData {
        return &this.m_userData
    }

    /// Get the parent world of this body.
    func GetWorld() *b2World {
        return this.m_world
    }

    /// Dump this body to a file
    func Dump() void {
        bodyIndex int = this.m_islandIndex

        // %hf is sufficient to save and load the same value using text
        // FLT_DECIMAL_DIG == 9

        b2Dump('{\n')
        b2Dump('  b2BodyDef bd;\n')
        b2Dump('  bd.type = b2BodyType(%d);\n', cast int this.m_type)
        b2Dump('  bd.position.Set(%hf, %hf);\n', this.m_xf.p.x, this.m_xf.p.y)
        b2Dump('  bd.angle = %hf;\n', this.m_sweep.a)
        b2Dump('  bd.linearVelocity.Set(%hf, %hf);\n', this.m_linearVelocity.x, this.m_linearVelocity.y)
        b2Dump('  bd.angularVelocity = %hf;\n', this.m_angularVelocity)
        b2Dump('  bd.linearDamping = %hf;\n', this.m_linearDamping)
        b2Dump('  bd.angularDamping = %hf;\n', this.m_angularDamping)
        b2Dump('  bd.allowSleep = bool(%d);\n', this.m_flags & b2Body\e_autoSleepFlag)
        b2Dump('  bd.awake = bool(%d);\n', this.m_flags & b2Body\e_awakeFlag)
        b2Dump('  bd.fixedRotation = bool(%d);\n', this.m_flags & b2Body\e_fixedRotationFlag)
        b2Dump('  bd.bullet = bool(%d);\n', this.m_flags & b2Body\e_bulletFlag)
        b2Dump('  bd.enabled = bool(%d);\n', this.m_flags & b2Body\e_enabledFlag)
        b2Dump('  bd.gravityScale = %hf;\n', this.m_gravityScale)
        b2Dump('  bodies[%d] = m_world->CreateBody(&bd);\n', this.m_islandIndex)
        b2Dump('\n')
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            b2Dump('  {\n')
            f.Dump(bodyIndex)
            b2Dump('  }\n')
        }
        b2Dump('}\n')
    }

    func __defer__ {
        // shapes and joints are destroyed in b2World::Destroy
    }

    func SynchronizeFixtures() void {
        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase

        if this.m_flags & b2Body\e_awakeFlag {
            xf1 POD b2Transform = undef
            xf1.q.Set(this.m_sweep.a0)
            xf1.p = this.m_sweep.c0 - b2Mul(xf1.q, this.m_sweep.localCenter)

            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.Synchronize(broadPhase, &xf1, &this.m_xf)
            }
        } else {
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.Synchronize(broadPhase, &this.m_xf, &this.m_xf)
            }
        }
    }

    func SynchronizeTransform() void {
        this.m_xf.q.Set(this.m_sweep.a)
        this.m_xf.p = this.m_sweep.c - b2Mul(this.m_xf.q, this.m_sweep.localCenter)
    }

    // This is used to prevent connected bodies from colliding.
    // It may lie, depending on the collideConnected flag.
    func ShouldCollide(in other *b2Body) bool {
        // At least one body should be dynamic.
        if this.m_type != b2BodyType::b2_dynamicBody && other.m_type != b2BodyType::b2_dynamicBody {
            return false
        }

        // Does a joint prevent collision?
        for(jn *b2JointEdge = this.m_jointList; jn; jn = jn.next){
            if jn.other == other && jn.joint.m_collideConnected == false {
                return false
            }
        }

        return true
    }

    func Advance(alpha float) void {
        // Advance to the new safe time. This doesn't sync the broad-phase.
        this.m_sweep.Advance(alpha)
        this.m_sweep.c = this.m_sweep.c0
        this.m_sweep.a = this.m_sweep.a0
        this.m_xf.q.Set(this.m_sweep.a)
        this.m_xf.p = this.m_sweep.c - b2Mul(this.m_xf.q, this.m_sweep.localCenter)
    }
}

func b2Body(uninitialized *b2Body, bd *b2BodyDef, world *b2World) *b2Body {
    b2Assert(bd.position.IsValid(), #get __file__, #get __line__, 'b2Assert(bd.position.IsValid())')
    b2Assert(bd.linearVelocity.IsValid(), #get __file__, #get __line__, 'b2Assert(bd.linearVelocity.IsValid())')
    b2Assert(b2IsValid(bd.angle), #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angle))')
    b2Assert(b2IsValid(bd.angularVelocity), #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angularVelocity))')
    b2Assert(b2IsValid(bd.angularDamping) && bd.angularDamping >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angularDamping) && bd.angularDamping >= 0.0f)')
    b2Assert(b2IsValid(bd.linearDamping) && bd.linearDamping >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.linearDamping) && bd.linearDamping >= 0.0f)')
    
    uninitialized.m_flags = 0

    if bd.bullet,        uninitialized.m_flags |= b2Body\e_bulletFlag
    if bd.fixedRotation, uninitialized.m_flags |= b2Body\e_fixedRotationFlag
    if bd.allowSleep,    uninitialized.m_flags |= b2Body\e_autoSleepFlag
    if bd.awake && bd.type != b2BodyType::b2_staticBody, uninitialized.m_flags |= b2Body\e_awakeFlag
    if bd.enabled,       uninitialized.m_flags |= b2Body\e_enabledFlag

    uninitialized.m_world = world

    uninitialized.m_xf.p = bd.position
    uninitialized.m_xf.q.Set(bd.angle)

    uninitialized.m_sweep.localCenter.SetZero()
    uninitialized.m_sweep.c0 = uninitialized.m_xf.p
    uninitialized.m_sweep.c = uninitialized.m_xf.p
    uninitialized.m_sweep.a0 = bd.angle
    uninitialized.m_sweep.a = bd.angle
    uninitialized.m_sweep.alpha0 = 0.0f

    uninitialized.m_jointList = null
    uninitialized.m_contactList = null
    uninitialized.m_prev = null
    uninitialized.m_next = null

    uninitialized.m_linearVelocity = bd.linearVelocity
    uninitialized.m_angularVelocity = bd.angularVelocity

    uninitialized.m_linearDamping = bd.linearDamping
    uninitialized.m_angularDamping = bd.angularDamping
    uninitialized.m_gravityScale = bd.gravityScale

    uninitialized.m_force.SetZero()
    uninitialized.m_torque = 0.0f

    uninitialized.m_sleepTime = 0.0f

    uninitialized.m_type = bd.type

    uninitialized.m_mass = 0.0f
    uninitialized.m_invMass = 0.0f

    uninitialized.m_I = 0.0f
    uninitialized.m_invI = 0.0f

    uninitialized.m_userData = bd.userData

    uninitialized.m_fixtureList = null
    uninitialized.m_fixtureCount = 0
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES:
    class b2BlockAllocator;
    class b2Body;
    class b2BroadPhase;
    class b2Fixture;
*/

/// This holds contact filtering data.
struct b2Filter (categoryBits, maskBits ushort, groupIndex short)

func b2Filter() b2Filter {
    f POD b2Filter = undef
    f.categoryBits = 0x0001
    f.maskBits = 0xFFFF
    f.groupIndex = 0
    return f
}

/// A fixture definition is used to create a fixture. This class defines an
/// abstract fixture definition. You can reuse fixture definitions safely.
struct b2FixtureDef (
    /// The shape, this must be set. The shape will be cloned, so you
    /// can create the shape on the stack.
    shape *b2Shape,

    /// Use this to store application specific fixture data.
    userData b2FixtureUserData,

    /// The friction coefficient, usually in the range [0,1].
    friction float,

    /// The restitution (elasticity) usually in the range [0,1].
    restitution float,

    /// Restitution velocity threshold, usually in m/s. Collisions above this
    /// speed have restitution applied (will bounce).
    restitutionThreshold float,

    /// The density, usually in kg/m^2.
    density float,

    /// A sensor shape collects contact information but never generates a collision
    /// response.
    isSensor bool,

    /// Contact filtering data.
    filter b2Filter
)

/// The constructor sets the default fixture definition values.
func b2FixtureDef() b2FixtureDef {
    fd POD b2FixtureDef = undef
    fd.shape = null
    fd.friction = 0.2f
    fd.restitution = 0.0f
    fd.restitutionThreshold = 1.0f * b2_lengthUnitsPerMeter
    fd.density = 0.0f
    fd.isSensor = false
    fd.filter = b2Filter()
    return fd
}

/// This proxy is used internally to connect fixtures to the broad-phase.
struct b2FixtureProxy (aabb b2AABB, fixture *b2Fixture, childIndex, proxyId int)

/// A fixture is used to attach a shape to a body for collision detection. A fixture
/// inherits its transform from its parent. Fixtures hold additional non-geometric data
/// such as friction, collision filters, etc.
/// Fixtures are created via b2Body::CreateFixture.
/// @warning you cannot reuse fixtures.
struct b2Fixture (
    m_density float,
    m_next *b2Fixture,
    m_body *b2Body,
    m_shape *b2Shape,
    m_friction float,
    m_restitution float,
    m_restitutionThreshold float,
    m_proxies *b2FixtureProxy,
    m_proxyCount int,
    m_filter b2Filter,
    m_isSensor bool,
    m_userData b2FixtureUserData
) {
    /// Get the type of the child shape. You can use this to down cast to the concrete shape.
    /// @return the shape type.
    func GetType() b2ShapeType {
        return this.m_shape.GetType()
    }

    /// Get the child shape. You can modify the child shape, however you should not change the
    /// number of vertices because this will crash some collision caching mechanisms.
    /// Manipulating the shape may lead to non-physical behavior.
    func GetShape() *b2Shape {
        return this.m_shape
    }
    
    /// Set if this fixture is a sensor.
    func SetSensor(sensor bool) void {
        if sensor != this.m_isSensor {
            this.m_body.SetAwake(true)
            this.m_isSensor = sensor
        }
    }

    /// Is this fixture a sensor (non-solid)?
    /// @return the true if the shape is a sensor.
    func IsSensor() bool {
        return this.m_isSensor
    }

    /// Set the contact filtering data. This will not update contacts until the next time
    /// step when either parent body is active and awake.
    /// This automatically calls Refilter.
    func SetFilterData(filter *b2Filter) void {
        this.m_filter = *filter
        this.Refilter()
    }

    /// Get the contact filtering data.
    func GetFilterData() *b2Filter {
        return &this.m_filter
    }

    /// Call this if you want to establish collision that was previously disabled by b2ContactFilter::ShouldCollide.
    func Refilter() void {
        if this.m_body == null, return

        // Flag associated contacts for filtering.
        edge *b2ContactEdge = this.m_body.GetContactList()

        while edge {
            contact *b2Contact = edge.contact
            fixtureA *b2Fixture = contact.GetFixtureA()
            fixtureB *b2Fixture = contact.GetFixtureB()

            if fixtureA == this || fixtureB == this {
                contact.FlagForFiltering()
            }

            edge = edge.next
        }

        world *b2World = this.m_body.GetWorld()

        if world == null, return
        
        // Touch each proxy so that new pairs may be created
        broadPhase *b2BroadPhase = &world.m_contactManager.m_broadPhase

        for(i int = 0; i < this.m_proxyCount; ++i){
            broadPhase.TouchProxy(this.m_proxies[i].proxyId)
        }
    }

    /// Get the parent body of this fixture. This is nullptr if the fixture is not attached.
    /// @return the parent body.
    func GetBody() *b2Body {
        return this.m_body
    }
    
    /// Get the next fixture in the parent body's fixture list.
    /// @return the next shape.
    func GetNext() *b2Fixture {
        return this.m_next
    }
    
    /// Get the user data that was assigned in the fixture definition. Use this to
    /// store your application specific data.
    func GetUserData() *b2FixtureUserData {
        return &this.m_userData
    }

    /// Test a point for containment in this fixture.
    /// @param p a point in world coordinates.
    func TestPoint(p *b2Vec2) bool {
        return this.m_shape.TestPoint(this.m_body.GetTransform(), p)
    }

    /// Cast a ray against this shape.
    /// @param output the ray-cast results.
    /// @param input the ray-cast input parameters.
    /// @param childIndex the child shape index (e.g. edge index)
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, childIndex int) bool {
        return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex)
    }

    /// Get the mass data for this fixture. The mass data is based on the density and
    /// the shape. The rotational inertia is about the shape's origin. This operation
    /// may be expensive.
    func GetMassData(massData *b2MassData) void {
        this.m_shape.ComputeMass(massData, this.m_density)
    }

    /// Set the density of this fixture. This will _not_ automatically adjust the mass
    /// of the body. You must call b2Body::ResetMassData to update the body's mass.
    func SetDensity(density float) void {
        b2Assert(b2IsValid(density) && density >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(density) && density >= 0.0f)')
        this.m_density = density
    }

    /// Get the density of this fixture.
    func GetDensity() float {
        return this.m_density
    }

    /// Get the coefficient of friction.
    func GetFriction() float {
        return this.m_friction
    }

    /// Set the coefficient of friction. This will _not_ change the friction of
    /// existing contacts.
    func SetFriction(friction float) void {
        this.m_friction = friction
    }

    /// Get the coefficient of restitution.
    func GetRestitution() float {
        return this.m_restitution
    }

    /// Set the coefficient of restitution. This will _not_ change the restitution of
    /// existing contacts.
    func SetRestitution(restitution float) void {
        this.m_restitution = restitution
    }

    /// Get the restitution velocity threshold.
    func GetRestitutionThreshold() float {
        return this.m_restitutionThreshold
    }

    /// Set the restitution threshold. This will _not_ change the restitution threshold of
    /// existing contacts.
    func SetRestitutionThreshold(threshold float) void {
        this.m_restitutionThreshold = threshold
    }

    /// Get the fixture's AABB. This AABB may be enlarge and/or stale.
    /// If you need a more accurate AABB, compute it using the shape and
    /// the body transform.
    func GetAABB(childIndex int) *b2AABB {
        b2Assert(0 <= childIndex && childIndex < this.m_proxyCount, #get __file__, #get __line__, 'b2Assert(0 <= childIndex && childIndex < this.m_proxyCount)')
        return &this.m_proxies[childIndex].aabb
    }

    /// Dump this fixture to the log file.
    func Dump(bodyIndex int) void {
        b2Dump('    b2FixtureDef fd;\n')
        b2Dump('    fd.friction = %hf;\n', this.m_friction)
        b2Dump('    fd.restitution = %hf;\n', this.m_restitution)
        b2Dump('    fd.restitutionThreshold = %hf;\n', this.m_restitutionThreshold)
        b2Dump('    fd.density = %hf;\n', this.m_density)
        b2Dump('    fd.isSensor = bool(%d);\n', this.m_isSensor)
        b2Dump('    fd.filter.categoryBits = uint16(%d);\n', this.m_filter.categoryBits)
        b2Dump('    fd.filter.maskBits = uint16(%d);\n', this.m_filter.maskBits)
        b2Dump('    fd.filter.groupIndex = int16(%d);\n', this.m_filter.groupIndex)

        switch this.m_shape.m_type {
        case b2ShapeType::e_circle
            s *b2CircleShape = this.m_shape as *b2CircleShape
            b2Dump('    b2CircleShape shape;\n')
            b2Dump('    shape.m_radius = %hf;\n', s.m_radius)
            b2Dump('    shape.m_p.Set(%hf, %hf);\n', s.m_p.x, s.m_p.y)

        case b2ShapeType::e_edge
            s *b2EdgeShape = this.m_shape as *b2EdgeShape
            b2Dump('    b2EdgeShape shape;\n')
            b2Dump('    shape.m_radius = %hf;\n', s.m_radius)
            b2Dump('    shape.m_vertex0.Set(%hf, %hf);\n', s.m_vertex0.x, s.m_vertex0.y)
            b2Dump('    shape.m_vertex1.Set(%hf, %hf);\n', s.m_vertex1.x, s.m_vertex1.y)
            b2Dump('    shape.m_vertex2.Set(%hf, %hf);\n', s.m_vertex2.x, s.m_vertex2.y)
            b2Dump('    shape.m_vertex3.Set(%hf, %hf);\n', s.m_vertex3.x, s.m_vertex3.y)
            b2Dump('    shape.m_oneSided = bool(%d);\n', s.m_oneSided)

        case b2ShapeType::e_polygon
            s *b2PolygonShape = this.m_shape as *b2PolygonShape
            b2Dump('    b2PolygonShape shape;\n')
            b2Dump('    b2Vec2 vs[%d];\n', b2_maxPolygonVertices)
            for(i int = 0; i < s.m_count; ++i){
                b2Dump('    vs[%d].Set(%hf, %hf);\n', i, s.m_vertices[i].x, s.m_vertices[i].y)
            }
            b2Dump('    shape.Set(vs, %d);\n', s.m_count)

        case b2ShapeType::e_chain
            s *b2ChainShape = this.m_shape as *b2ChainShape
            b2Dump('    b2ChainShape shape;\n')
            b2Dump('    b2Vec2 vs[%d];\n', s.m_count)
            for(i int = 0; i < s.m_count; ++i){
                b2Dump('    vs[%d].Set(%hf, %hf);\n', i, s.m_vertices[i].x, s.m_vertices[i].y)
            }
            b2Dump('    shape.CreateChain(vs, %d);\n', s.m_count)
            b2Dump('    shape.m_prevVertex.Set(%hf, %hf);\n', s.m_prevVertex.x, s.m_prevVertex.y)
            b2Dump('    shape.m_nextVertex.Set(%hf, %hf);\n', s.m_nextVertex.x, s.m_nextVertex.y)

        default
            return
        }

        b2Dump('\n')
        b2Dump('    fd.shape = &shape;\n')
        b2Dump('\n')
        b2Dump('    bodies[%d]->CreateFixture(&fd);\n', bodyIndex)
    }

    // We need separation create/destroy functions from the constructor/destructor because
    // the destructor cannot access the allocator (no destructor arguments allowed by C++).
    func Create(allocator *b2BlockAllocator, body *b2Body, definition *b2FixtureDef) void {
        this.m_userData = definition.userData
        this.m_friction = definition.friction
        this.m_restitution = definition.restitution
        this.m_restitutionThreshold = definition.restitutionThreshold

        this.m_body = body
        this.m_next = null

        this.m_filter = definition.filter

        this.m_isSensor = definition.isSensor

        this.m_shape = definition.shape.Clone(allocator)

        // Reserve proxy space
        childCount int = this.m_shape.GetChildCount()
        this.m_proxies = allocator.Allocate(childCount * sizeof b2FixtureProxy) as *b2FixtureProxy

        for(i int = 0; i < childCount; ++i){
            this.m_proxies[i].fixture = null
            this.m_proxies[i].proxyId = b2BroadPhase\e_nullProxy
        }

        this.m_proxyCount = 0
        this.m_density = definition.density
    }

    func Destroy(allocator *b2BlockAllocator) void {
        // The proxies must be destroyed before calling this.
        b2Assert(this.m_proxyCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_proxyCount == 0)')

        // Free the proxy array.
        childCount int = this.m_shape.GetChildCount()
        allocator.Free(this.m_proxies, childCount * sizeof b2FixtureProxy)
        this.m_proxies = null

        // Free the child shape.
        switch this.m_shape.m_type {
        case b2ShapeType::e_circle
            s *b2CircleShape = this.m_shape as *b2CircleShape
            s.__defer__()
            allocator.Free(s, sizeof b2CircleShape)
            
        case b2ShapeType::e_edge
            s *b2EdgeShape = this.m_shape as *b2EdgeShape
            s.__defer__()
            allocator.Free(s, sizeof b2EdgeShape)
            
        case b2ShapeType::e_polygon
            s *b2PolygonShape = this.m_shape as *b2PolygonShape
            s.__defer__()
            allocator.Free(s, sizeof b2PolygonShape)

        case b2ShapeType::e_chain
            s *b2ChainShape = this.m_shape as *b2ChainShape
            s.__defer__()
            allocator.Free(s, sizeof b2ChainShape)

        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }

        this.m_shape = null
    }

    // These support body activation/deactivation.
    func CreateProxies(broadPhase *b2BroadPhase, in xf *b2Transform) void {
        b2Assert(this.m_proxyCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_proxyCount == 0)')

        // Create proxies in the broad-phase.
        this.m_proxyCount = this.m_shape.GetChildCount()

        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i
            this.m_shape.ComputeAABB(&proxy.aabb, xf, i)
            proxy.proxyId = broadPhase.CreateProxy(&proxy.aabb, proxy)
            proxy.fixture = this
            proxy.childIndex = i
        }
    }

    func DestroyProxies(broadPhase *b2BroadPhase) void {
        // Destroy proxies in the broad-phase.
        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i
            broadPhase.DestroyProxy(proxy.proxyId)
            proxy.proxyId = b2BroadPhase\e_nullProxy
        }

        this.m_proxyCount = 0
    }

    func Synchronize(broadPhase *b2BroadPhase, in transform1 *b2Transform, in transform2 *b2Transform) void {
        if this.m_proxyCount == 0, return

        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i

            // Compute an AABB that covers the swept shape (may miss some rotation effect).
            this.m_shape.ComputeAABB(undef aabb1 b2AABB, transform1, proxy.childIndex)
            this.m_shape.ComputeAABB(undef aabb2 b2AABB, transform2, proxy.childIndex)
        
            proxy.aabb.Combine(&aabb1, &aabb2)

            displacement POD b2Vec2 = aabb2.GetCenter() - aabb1.GetCenter()

            broadPhase.MoveProxy(proxy.proxyId, &proxy.aabb, &displacement)
        }
    }
}

func b2Fixture() b2Fixture {
    f POD b2Fixture = undef
    return *b2Fixture(&f)
}

func b2Fixture(mem ptr) *b2Fixture {
    f *b2Fixture = mem as *b2Fixture
    f.m_body = null
    f.m_next = null
    f.m_proxies = null
    f.m_proxyCount = 0
    f.m_shape = null
    f.m_density = 0.0f
    f.m_filter = b2Filter()
    return f
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES:
    class b2Body;
    class b2Contact;
    class b2Fixture;
    class b2World;
    class b2BlockAllocator;
    class b2StackAllocator;
    class b2ContactListener;
*/

/// Friction mixing law. The idea is to allow either fixture to drive the friction to zero.
/// For example, anything slides on ice.
func b2MixFriction(friction1, friction2 float) float {
    return b2Sqrt(friction1 * friction2)
}

/// Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface.
/// For example, a superball bounces on anything.
func b2MixRestitution(restitution1, restitution2 float) float {
    return restitution1 > restitution2 ? restitution1 : restitution2
}

/// Restitution mixing law. This picks the lowest value.
func b2MixRestitutionThreshold(threshold1, threshold2 float) float {
    return threshold1 < threshold2 ? threshold1 : threshold2
}

alias b2ContactCreateFcn = func(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator) *b2Contact

alias b2ContactDestroyFcn = func(*b2Contact, *b2BlockAllocator) void

struct b2ContactRegister (createFcn b2ContactCreateFcn, destroyFcn b2ContactDestroyFcn, primary bool)

/// A contact edge is used to connect bodies and contacts together
/// in a contact graph where each body is a node and each contact
/// is an edge. A contact edge belongs to a doubly linked list
/// maintained in each attached body. Each contact has two contact
/// nodes, one for each attached body.
struct b2ContactEdge (
    other *b2Body,          ///< provides quick access to the other body attached.
    contact *b2Contact,     ///< the contact
    prev *b2ContactEdge,    ///< the previous contact edge in the body's contact list
    next *b2ContactEdge     ///< the next contact edge in the body's contact list
)

/// The class manages contact between two shapes. A contact exists for each overlapping
/// AABB in the broad-phase (except if filtered). Therefore a contact object may exist
/// that has no contact points.
struct b2Contact (
    m_flags uint,

    // World pool and list pointers.
    m_prev *b2Contact,
    m_next *b2Contact,

    // Nodes for connecting bodies.
    m_nodeA b2ContactEdge,
    m_nodeB b2ContactEdge,

    m_fixtureA *b2Fixture,
    m_fixtureB *b2Fixture,

    m_indexA int,
    m_indexB int,

    m_manifold b2Manifold,

    m_toiCount int,
    m_toi float,

    m_friction float,
    m_restitution float,
    m_restitutionThreshold float,

    m_tangentSpeed float,

    f_defer func(ptr) void,
    f_Evaluate func(ptr, *b2Manifold, *b2Transform, *b2Transform) void
) {
    verbatim func __defer__ {
        if this.f_defer as ptr {
            f func(ptr) void = this.f_defer
            f(this)
        }
    }

    /// Get the contact manifold. Do not modify the manifold unless you understand the
    /// internals of Box2D.
    func GetManifold() *b2Manifold {
        return &this.m_manifold
    }

    /// Get the world manifold.
    func GetWorldManifold(worldManifold *b2WorldManifold) void {
        bodyA *b2Body   = this.m_fixtureA.GetBody()
        bodyB *b2Body   = this.m_fixtureB.GetBody()
        shapeA *b2Shape = this.m_fixtureA.GetShape()
        shapeB *b2Shape = this.m_fixtureB.GetShape()

        worldManifold.Initialize(&this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius)
    }

    /// Is this contact touching?
    func IsTouching() bool {
        return (this.m_flags & b2Contact\e_touchingFlag) == b2Contact\e_touchingFlag
    }

    /// Enable/disable this contact. This can be used inside the pre-solve
    /// contact listener. The contact is only disabled for the current
    /// time step (or sub-step in continuous collisions).
    func SetEnabled(flag bool) void {
        if flag {
            this.m_flags |= b2Contact\e_enabledFlag
        } else {
            this.m_flags &= ~b2Contact\e_enabledFlag
        }
    }

    /// Has this contact been disabled?
    func IsEnabled() bool {
        return (this.m_flags & b2Contact\e_enabledFlag) == b2Contact\e_enabledFlag
    }

    /// Get the next contact in the world's contact list.
    func GetNext() *b2Contact {
        return this.m_next
    }

    /// Get fixture A in this contact.
    func GetFixtureA() *b2Fixture {
        return this.m_fixtureA
    }

    /// Get the child primitive index for fixture A.
    func GetChildIndexA() int {
        return this.m_indexA
    }

    /// Get fixture B in this contact.
    func GetFixtureB() *b2Fixture {
        return this.m_fixtureB
    }

    /// Get the child primitive index for fixture B.
    func GetChildIndexB() int {
        return this.m_indexB
    }

    /// Override the default friction mixture. You can call this in b2ContactListener::PreSolve.
    /// This value persists until set or reset.
    func SetFriction(friction float) void {
        this.m_friction = friction
    }

    /// Get the friction.
    func GetFriction() float {
        return this.m_friction
    }

    /// Reset the friction mixture to the default value.
    func ResetFriction() void {
        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction)
    }

    /// Override the default restitution mixture. You can call this in b2ContactListener::PreSolve.
    /// The value persists until you set or reset.
    func SetRestitution(restitution float) void {
        this.m_restitution = restitution
    }

    /// Get the restitution.
    func GetRestitution() float {
        return this.m_restitution
    }

    /// Reset the restitution to the default value.
    func ResetRestitution() void {
        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution)
    }

    /// Override the default restitution velocity threshold mixture. You can call this in b2ContactListener::PreSolve.
    /// The value persists until you set or reset.
    func SetRestitutionThreshold(threshold float) void {
        this.m_restitutionThreshold = threshold
    }

    /// Get the restitution threshold.
    func GetRestitutionThreshold() float {
        return this.m_restitutionThreshold
    }

    /// Reset the restitution threshold to the default value.
    func ResetRestitutionThreshold() void {
        this.m_restitutionThreshold = b2MixRestitutionThreshold(this.m_fixtureA.m_restitutionThreshold, this.m_fixtureB.m_restitutionThreshold)
    }

    /// Set the desired tangent speed for a conveyor belt behavior. In meters per second.
    func SetTangentSpeed(speed float) void {
        this.m_tangentSpeed = speed
    }

    /// Get the desired tangent speed. In meters per second.
    func GetTangentSpeed() float {
        return this.m_tangentSpeed
    }

    /// Flag this contact for filtering. Filtering will occur the next time step.
    func FlagForFiltering() void {
        this.m_flags |= b2Contact\e_filterFlag
    }

    // Update the contact manifold and touching status.
    // Note: do not assume the fixture AABBs are overlapping or are valid.
    func Update(listener *b2ContactListener) void {
        oldManifold POD b2Manifold = this.m_manifold

        // Re-enable this contact.
        this.m_flags |= b2Contact\e_enabledFlag

        touching bool = false
        wasTouching bool = (this.m_flags & b2Contact\e_touchingFlag) == b2Contact\e_touchingFlag

        sensorA bool = this.m_fixtureA.IsSensor()
        sensorB bool = this.m_fixtureB.IsSensor()
        sensor bool = sensorA || sensorB

        bodyA *b2Body = this.m_fixtureA.GetBody()
        bodyB *b2Body = this.m_fixtureB.GetBody()
        xfA *b2Transform = bodyA.GetTransform()
        xfB *b2Transform = bodyB.GetTransform()

        // Is this contact a sensor?
        if sensor {
            shapeA *b2Shape = this.m_fixtureA.GetShape()
            shapeB *b2Shape = this.m_fixtureB.GetShape()
            touching = b2TestOverlap(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB)

            // Sensors don't generate manifolds.
            this.m_manifold.pointCount = 0
        } else {
            this.Evaluate(&this.m_manifold, xfA, xfB)
            touching = this.m_manifold.pointCount > 0

            // Match old contact ids to new contact ids and copy the
            // stored impulses to warm start the solver.
            for(i int = 0; i < this.m_manifold.pointCount; ++i){
                mp2 *b2ManifoldPoint = this.m_manifold.points at i
                mp2.normalImpulse = 0.0f
                mp2.tangentImpulse = 0.0f
                id2 b2ContactID = mp2.id

                for(j int = 0; j < oldManifold.pointCount; ++j){
                    mp1 *b2ManifoldPoint = oldManifold.points at j

                    if mp1.id.key == id2.key {
                        mp2.normalImpulse = mp1.normalImpulse
                        mp2.tangentImpulse = mp1.tangentImpulse
                        break
                    }
                }
            }

            if touching != wasTouching {
                bodyA.SetAwake(true)
                bodyB.SetAwake(true)
            }
        }

        if touching {
            this.m_flags |= b2Contact\e_touchingFlag
        } else {
            this.m_flags &= ~b2Contact\e_touchingFlag
        }

        if wasTouching == false && touching == true && listener {
            listener.BeginContact(this)
        }

        if wasTouching == true && touching == false && listener {
            listener.EndContact(this)
        }

        if sensor == false && touching && listener {
            listener.PreSolve(this, &oldManifold)
        }
    }

    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        if this.f_Evaluate == null {
            printf('b2Contact.Evaluate() called when f_Evaluate is null!\n')
            printf('    (returning null)\n')
            return
        }

        f func(ptr, *b2Manifold, *b2Transform, *b2Transform) void = this.f_Evaluate
        f(this, manifold, xfA, xfB)
    }
}

// Used when crawling contact graph when forming islands.
define b2Contact\e_islandFlag = 0x0001

// Set when the shapes are touching.
define b2Contact\e_touchingFlag = 0x0002

// This contact can be disabled (by user)
define b2Contact\e_enabledFlag = 0x0004

// This contact needs filtering because a fixture filter was changed.
define b2Contact\e_filterFlag = 0x0008

// This bullet contact had a TOI event
define b2Contact\e_bulletHitFlag = 0x0010

// This contact has a valid TOI in m_toi
define b2Contact\e_toiFlag = 0x0020

b2Contact\s_registers POD /*b2ShapeType::e_typeCount*/ 4 /*b2ShapeType::e_typeCount*/ 4 b2ContactRegister
b2Contact\s_initialized bool = false

func b2Contact\InitializeRegisters() void {
    // Circle vs. Circle
    b2Contact\AddType(
        func &b2CircleContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2CircleContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_circle,
        b2ShapeType::e_circle)

    // Polygon vs. Circle
    b2Contact\AddType(
        func &b2PolygonAndCircleContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2PolygonAndCircleContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_polygon,
        b2ShapeType::e_circle)

    // Polygon vs. Polygon
    b2Contact\AddType(
        func &b2PolygonContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2PolygonContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_polygon,
        b2ShapeType::e_polygon)
    
    // Edge vs. Circle
    b2Contact\AddType(
        func &b2EdgeAndCircleContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2EdgeAndCircleContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_edge,
        b2ShapeType::e_circle)
    
    // Edge vs. Polygon
    b2Contact\AddType(
        func &b2EdgeAndPolygonContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2EdgeAndPolygonContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_edge,
        b2ShapeType::e_polygon)
    
    // Chain vs. Circle
    b2Contact\AddType(
        func &b2ChainAndCircleContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2ChainAndCircleContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_chain,
        b2ShapeType::e_circle)
    
    // Chain vs. Polygon
    b2Contact\AddType(
        func &b2ChainAndPolygonContact\Create(*b2Fixture, int, *b2Fixture, int, *b2BlockAllocator),
        func &b2ChainAndPolygonContact\Destroy(*b2Contact, *b2BlockAllocator),
        b2ShapeType::e_chain,
        b2ShapeType::e_polygon)
}

func b2Contact\AddType(createFcn b2ContactCreateFcn, destroyFcn b2ContactDestroyFcn, type1, type2 b2ShapeType) void {
    b2Assert(0 <= type1 as usize && type1 as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= type1 as usize && type1 as usize < b2ShapeType::e_typeCount as usize)')
    b2Assert(0 <= type2 as usize && type2 as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= type2 as usize && type2 as usize < b2ShapeType::e_typeCount as usize)')
    
    b2Contact\s_registers[type1 as usize][type2 as usize].createFcn = createFcn
    b2Contact\s_registers[type1 as usize][type2 as usize].destroyFcn = destroyFcn
    b2Contact\s_registers[type1 as usize][type2 as usize].primary = true

    if type1 != type2 {
        b2Contact\s_registers[type2 as usize][type1 as usize].createFcn = createFcn
        b2Contact\s_registers[type2 as usize][type1 as usize].destroyFcn = destroyFcn
        b2Contact\s_registers[type2 as usize][type1 as usize].primary = false
    }
}

func b2Contact\Create(fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int, allocator *b2BlockAllocator) *b2Contact {
    unless b2Contact\s_initialized {
        b2Contact\InitializeRegisters()
        b2Contact\s_initialized = true
    }

    type1 b2ShapeType = fixtureA.GetType()
    type2 b2ShapeType = fixtureB.GetType()

    b2Assert(0 <= type1 as usize && type1 as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= type1 as usize && type1 as usize < b2ShapeType::e_typeCount as usize)')
    b2Assert(0 <= type2 as usize && type2 as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= type2 as usize && type2 as usize < b2ShapeType::e_typeCount as usize)')
    
    createFcn b2ContactCreateFcn = b2Contact\s_registers[type1 as usize][type2 as usize].createFcn

    if createFcn {
        if b2Contact\s_registers[type1 as usize][type2 as usize].primary {
            return createFcn(fixtureA, indexA, fixtureB, indexB, allocator)
        } else {
            return createFcn(fixtureB, indexB, fixtureA, indexA, allocator)
        }
    }
    
    return null
}

func b2Contact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    b2Assert(b2Contact\s_initialized, #get __file__, #get __line__, 'b2Assert(b2Contact\\s_initialized)')

    fixtureA *b2Fixture = contact.m_fixtureA
    fixtureB *b2Fixture = contact.m_fixtureB

    if contact.m_manifold.pointCount > 0 && fixtureA.IsSensor() == false && fixtureB.IsSensor() == false {
        fixtureA.GetBody().SetAwake(true)
        fixtureB.GetBody().SetAwake(true)
    }

    typeA b2ShapeType = fixtureA.GetType()
    typeB b2ShapeType = fixtureB.GetType()

    b2Assert(0 <= typeA as usize && typeA as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= typeA as usize && typeA as usize < b2ShapeType::e_typeCount as usize)')
    b2Assert(0 <= typeB as usize && typeB as usize < b2ShapeType::e_typeCount as usize, #get __file__, #get __line__, 'b2Assert(0 <= typeB as usize && typeB as usize < b2ShapeType::e_typeCount as usize)')

    destroyFcn b2ContactDestroyFcn = b2Contact\s_registers[typeA as usize][typeB as usize].destroyFcn
    destroyFcn(contact, allocator)
}

func b2Contact(uninitialized *$b2ContactLike, use_defer bool) void {
    uninitialized.m_fixtureA = null
    uninitialized.m_fixtureB = null

    uninitialized.f_defer = use_defer ? func &__defer__(*$b2ContactLike) : null
    uninitialized.f_Evaluate = func &Evaluate(*$b2ContactLike, *b2Manifold, *b2Transform, *b2Transform)
}

func b2Contact(uninitialized *$b2ContactLike, use_defer bool, fA *b2Fixture, indexA int, fB *b2Fixture, indexB int) void {
    uninitialized.m_flags = b2Contact\e_enabledFlag

    uninitialized.m_fixtureA = fA
    uninitialized.m_fixtureB = fB

    uninitialized.m_indexA = indexA
    uninitialized.m_indexB = indexB

    uninitialized.m_manifold.pointCount = 0

    uninitialized.m_prev = null
    uninitialized.m_next = null

    uninitialized.m_nodeA.contact = null
    uninitialized.m_nodeA.prev = null
    uninitialized.m_nodeA.next = null
    uninitialized.m_nodeA.other = null

    uninitialized.m_nodeB.contact = null
    uninitialized.m_nodeB.prev = null
    uninitialized.m_nodeB.next = null
    uninitialized.m_nodeB.other = null

    uninitialized.m_toiCount = 0

    uninitialized.m_friction = b2MixFriction(uninitialized.m_fixtureA.m_friction, uninitialized.m_fixtureB.m_friction)
    uninitialized.m_restitution = b2MixRestitution(uninitialized.m_fixtureA.m_restitution, uninitialized.m_fixtureB.m_restitution)
    uninitialized.m_restitutionThreshold = b2MixRestitutionThreshold(uninitialized.m_fixtureA.m_restitutionThreshold, uninitialized.m_fixtureB.m_restitutionThreshold)

    uninitialized.m_tangentSpeed = 0.0f

    uninitialized.f_defer = use_defer ? func null &__defer__(*$b2ContactLike) as ptr : null
    uninitialized.f_Evaluate = func &Evaluate(*$b2ContactLike, *b2Manifold, *b2Transform, *b2Transform) as ptr
}



// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2ChainAndCircleContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        chain *b2ChainShape = this.m_fixtureA.GetShape() as *b2ChainShape

        edge POD b2EdgeShape = undef; b2EdgeShape(&edge)

        chain.GetChildEdge(&edge, this.m_indexA)
        b2CollideEdgeAndCircle(manifold, &edge, xfA, this.m_fixtureB.GetShape() as *b2CircleShape, xfB)
    }
}

func b2ChainAndCircleContact\Create(fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2ChainAndCircleContact(allocator.Allocate(sizeof b2ChainAndCircleContact) as *b2ChainAndCircleContact, fixtureA, indexA, fixtureB, indexB) as *b2Contact
}

func b2ChainAndCircleContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2ChainAndCircleContact).__defer__()
    allocator.Free(contact, sizeof b2ChainAndCircleContact)
}

func b2ChainAndCircleContact(uninitialized *b2ChainAndCircleContact, fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int) *b2ChainAndCircleContact {
    b2Contact(uninitialized, false, fixtureA, indexA, fixtureB, indexB)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_chain, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_chain)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2ChainAndPolygonContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        chain *b2ChainShape = this.m_fixtureA.GetShape() as *b2ChainShape

        edge POD b2EdgeShape = undef; b2EdgeShape(&edge)

        chain.GetChildEdge(&edge, this.m_indexA)
        b2CollideEdgeAndPolygon(manifold, &edge, xfA, this.m_fixtureB.GetShape() as *b2PolygonShape, xfB)
    }
}

func b2ChainAndPolygonContact\Create(fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2ChainAndPolygonContact(allocator.Allocate(sizeof b2ChainAndPolygonContact) as *b2ChainAndPolygonContact, fixtureA, indexA, fixtureB, indexB) as *b2Contact
}

func b2ChainAndPolygonContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2ChainAndPolygonContact).__defer__()
    allocator.Free(contact, sizeof b2ChainAndPolygonContact)
}

func b2ChainAndPolygonContact(uninitialized *b2ChainAndPolygonContact, fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int) *b2ChainAndPolygonContact {
    b2Contact(uninitialized, false, fixtureA, indexA, fixtureB, indexB)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_chain, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_chain)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2CircleContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        b2CollideCircles(manifold, this.m_fixtureA.GetShape() as *b2CircleShape, xfA, this.m_fixtureB.GetShape() as *b2CircleShape, xfB)
    }
}

func b2CircleContact\Create(fixtureA *b2Fixture, _indexA int, fixtureB *b2Fixture, _indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2CircleContact(allocator.Allocate(sizeof b2CircleContact) as *b2CircleContact, fixtureA, fixtureB) as *b2Contact
}

func b2CircleContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2CircleContact).__defer__()
    allocator.Free(contact, sizeof b2CircleContact)
}

func b2CircleContact(uninitialized *b2CircleContact, fixtureA *b2Fixture, fixtureB *b2Fixture) *b2CircleContact {
    b2Contact(uninitialized, false, fixtureA, 0, fixtureB, 0)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_circle, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_circle)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2EdgeAndCircleContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        b2CollideEdgeAndCircle(manifold, this.m_fixtureA.GetShape() as *b2EdgeShape, xfA, this.m_fixtureB.GetShape() as *b2CircleShape, xfB)
    }
}

func b2EdgeAndCircleContact\Create(fixtureA *b2Fixture, _indexA int, fixtureB *b2Fixture, _indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2EdgeAndCircleContact(allocator.Allocate(sizeof b2EdgeAndCircleContact) as *b2EdgeAndCircleContact, fixtureA, fixtureB) as *b2Contact
}

func b2EdgeAndCircleContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2EdgeAndCircleContact).__defer__()
    allocator.Free(contact, sizeof b2EdgeAndCircleContact)
}

func b2EdgeAndCircleContact(uninitialized *b2EdgeAndCircleContact, fixtureA *b2Fixture, fixtureB *b2Fixture) *b2EdgeAndCircleContact {
    b2Contact(uninitialized, false, fixtureA, 0, fixtureB, 0)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_edge, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_edge)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2EdgeAndPolygonContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        b2CollideEdgeAndPolygon(manifold, this.m_fixtureA.GetShape() as *b2EdgeShape, xfA, this.m_fixtureB.GetShape() as *b2PolygonShape, xfB)
    }
}

func b2EdgeAndPolygonContact\Create(fixtureA *b2Fixture, _indexA int, fixtureB *b2Fixture, _indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2EdgeAndPolygonContact(allocator.Allocate(sizeof b2EdgeAndPolygonContact) as *b2EdgeAndPolygonContact, fixtureA, fixtureB) as *b2Contact
}

func b2EdgeAndPolygonContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2EdgeAndPolygonContact).__defer__()
    allocator.Free(contact, sizeof b2EdgeAndPolygonContact)
}

func b2EdgeAndPolygonContact(uninitialized *b2EdgeAndPolygonContact, fixtureA *b2Fixture, fixtureB *b2Fixture) *b2EdgeAndPolygonContact {
    b2Contact(uninitialized, false, fixtureA, 0, fixtureB, 0)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_edge, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_edge)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2PolygonAndCircleContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        b2CollidePolygonAndCircle(manifold, this.m_fixtureA.GetShape() as *b2PolygonShape, xfA, this.m_fixtureB.GetShape() as *b2CircleShape, xfB)
    }
}

func b2PolygonAndCircleContact\Create(fixtureA *b2Fixture, _indexA int, fixtureB *b2Fixture, _indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2PolygonAndCircleContact(allocator.Allocate(sizeof b2PolygonAndCircleContact) as *b2PolygonAndCircleContact, fixtureA, fixtureB) as *b2Contact
}

func b2PolygonAndCircleContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2PolygonAndCircleContact).__defer__()
    allocator.Free(contact, sizeof b2PolygonAndCircleContact)
}

func b2PolygonAndCircleContact(uninitialized *b2PolygonAndCircleContact, fixtureA *b2Fixture, fixtureB *b2Fixture) *b2PolygonAndCircleContact {
    b2Contact(uninitialized, false, fixtureA, 0, fixtureB, 0)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_polygon, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_polygon)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct b2PolygonContact (struct b2Contact) {
    // (override)
    func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        b2CollidePolygons(manifold, this.m_fixtureA.GetShape() as *b2PolygonShape, xfA, this.m_fixtureB.GetShape() as *b2PolygonShape, xfB)
    }
}

func b2PolygonContact\Create(fixtureA *b2Fixture, _indexA int, fixtureB *b2Fixture, _indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2PolygonContact(allocator.Allocate(sizeof b2PolygonContact) as *b2PolygonContact, fixtureA, fixtureB) as *b2Contact
}

func b2PolygonContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2PolygonContact).__defer__()
    allocator.Free(contact, sizeof b2PolygonContact)
}

func b2PolygonContact(uninitialized *b2PolygonContact, fixtureA *b2Fixture, fixtureB *b2Fixture) *b2PolygonContact {
    b2Contact(uninitialized, false, fixtureA, 0, fixtureB, 0)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_polygon, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_polygon)')
    b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon, #get __file__, #get __line__, 'b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_polygon)')
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.



/// Profiling data. Times are in milliseconds.
struct b2Profile (step, collide, solve, solveInit, solveVelocity, solvePosition, broadphase, solveTOI float)

/// This is an internal structure.
struct b2TimeStep (
    dt float,               // time step
    inv_dt float,           // inverse time step (0 if dt == 0).
    dtRatio float,          // dt * inv_dt0
    velocityIterations int,
    positionIterations int,
    warmStarting bool
)

/// This is an internal structure.
struct b2Position (c b2Vec2, a float)

/// This is an internal structure.
struct b2Velocity (v b2Vec2, w float)

/// Solver Data
struct b2SolverData (
    step b2TimeStep,
    positions *b2Position,
    velocities *b2Velocity
)


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.



/*
REQUIRES:
    struct b2AABB;
    struct b2BodyDef;
    struct b2Color;
    struct b2JointDef;
    class b2Body;
    class b2Draw;
    class b2Fixture;
    class b2Joint;
*/

/// The world class manages all physics entities, dynamic simulation,
/// and asynchronous queries. The world also contains efficient memory
/// management facilities.
struct b2World (
    m_blockAllocator b2BlockAllocator,
    m_stackAllocator b2StackAllocator,

    m_contactManager b2ContactManager,

    m_bodyList *b2Body,
    m_jointList *b2Joint,

    m_bodyCount int,
    m_jointCount int,

    m_gravity b2Vec2,
    m_allowSleep bool,

    m_destructionListener *b2DestructionListener,
    m_debugDraw *b2Draw,

    // This is used to compute the time step ratio to
    // support a variable time step.
    m_inv_dt0 float,

    m_newContacts bool,
    m_locked bool,
    m_clearForces bool,

    // These are for debugging the solver.
    m_warmStarting bool,
    m_continuousPhysics bool,
    m_subStepping bool,

    m_stepComplete bool,

    m_profile b2Profile
) {
    /// Destruct the world. All physics entities are destroyed and all heap memory is released.
    func __defer__ {
        // Some shapes allocate using b2Alloc.
        b *b2Body = this.m_bodyList

        while b {
            bNext *b2Body = b.m_next
            f *b2Fixture = b.m_fixtureList

            while f {
                fNext *b2Fixture = f.m_next
                f.m_proxyCount = 0
                f.Destroy(&this.m_blockAllocator)
                f = fNext
            }

            b = bNext
        }
    }

    /// Register a destruction listener. The listener is owned by you and must
    /// remain in scope.
    func SetDestructionListener(listener *b2DestructionListener) void {
        this.m_destructionListener = listener
    }

    /// Register a contact filter to provide specific control over collision.
    /// Otherwise the default filter is used (b2_defaultFilter). The listener is
    /// owned by you and must remain in scope.
    func SetContactFilter(filter *b2ContactFilter) void {
        this.m_contactManager.m_contactFilter = filter
    }

    /// Register a contact event listener. The listener is owned by you and must
    /// remain in scope.
    func SetContactListener(listener *b2ContactListener) void {
        this.m_contactManager.m_contactListener = listener
    }

    /// Register a routine for debug drawing. The debug draw functions are called
    /// inside with b2World::DebugDraw method. The debug draw object is owned
    /// by you and must remain in scope.
    func SetDebugDraw(debugDraw *b2Draw) void {
        this.m_debugDraw = debugDraw
    }

    /// Create a rigid body given a definition. No reference to the definition
    /// is retained.
    /// @warning This function is locked during callbacks.
    func CreateBody(in definition *b2BodyDef) *b2Body {
        b2Assert(this.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.IsLocked() == false)')
        if this.IsLocked(), return null

        b *b2Body = this.m_blockAllocator.Allocate(sizeof b2Body) as *b2Body
        b2Body(b, definition, this)

        // Add to world doubly linked list.
        b.m_prev = null
        b.m_next = this.m_bodyList
        if this.m_bodyList, this.m_bodyList.m_prev = b
        this.m_bodyList = b
        ++this.m_bodyCount

        return b
    }

    /// Destroy a rigid body given a definition. No reference to the definition
    /// is retained. This function is locked during callbacks.
    /// @warning This automatically deletes all associated shapes and joints.
    /// @warning This function is locked during callbacks.
    func DestroyBody(b *b2Body) void {
        b2Assert(this.m_bodyCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_bodyCount > 0)')
        b2Assert(this.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.IsLocked() == false)')

        if this.IsLocked(), return

        // Delete the attached joints.
        je *b2JointEdge = b.m_jointList
        while je {
            je0 *b2JointEdge = je
            je = je.next

            if this.m_destructionListener {
                this.m_destructionListener.SayGoodbye(je0.joint)
            }

            this.DestroyJoint(je0.joint)

            b.m_jointList = je
        }
        b.m_jointList = null

        // Delete the attached contacts.
        ce *b2ContactEdge = b.m_contactList
        while ce {
            ce0 *b2ContactEdge = ce
            ce = ce.next
            this.m_contactManager.Destroy(ce0.contact)
        }
        b.m_contactList = null

        // Delete the attached fixtures. This destroys broad-phase proxies.
        f *b2Fixture = b.m_fixtureList
        while f {
            f0 *b2Fixture = f
            f = f.m_next

            if this.m_destructionListener {
                this.m_destructionListener.SayGoodbye(f0)
            }

            f0.DestroyProxies(&this.m_contactManager.m_broadPhase)
            f0.Destroy(&this.m_blockAllocator)
            f0.__defer__()
            this.m_blockAllocator.Free(f0, sizeof b2Fixture)

            b.m_fixtureList = f
            b.m_fixtureCount -= 1
        }
        b.m_fixtureList = null
        b.m_fixtureCount = 0

        // Remove world body list.
        if b.m_prev,             b.m_prev.m_next = b.m_next
        if b.m_next,             b.m_next.m_prev = b.m_prev
        if b == this.m_bodyList, this.m_bodyList = b.m_next
        
        --this.m_bodyCount
        b.__defer__()
        this.m_blockAllocator.Free(b, sizeof b2Body)
    }

    /// Create a joint to constrain bodies together. No reference to the definition
    /// is retained. This may cause the connected bodies to cease colliding.
    /// @warning This function is locked during callbacks.
    func CreateJoint(in definition *b2JointDef) *b2Joint {
        b2Assert(this.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.IsLocked() == false)')
        if this.IsLocked(), return null

        j *b2Joint = b2Joint\Create(definition, &this.m_blockAllocator)

        // Connect to the world list.
        j.m_prev = null
        j.m_next = this.m_jointList
        if this.m_jointList {
            this.m_jointList.m_prev = j
        }
        this.m_jointList = j
        ++this.m_jointCount

        // Connect to the bodies' doubly linked lists.
        j.m_edgeA.joint = j
        j.m_edgeA.other = j.m_bodyB
        j.m_edgeA.prev = null
        j.m_edgeA.next = j.m_bodyA.m_jointList
        if j.m_bodyA.m_jointList, j.m_bodyA.m_jointList.prev = &j.m_edgeA
        j.m_bodyA.m_jointList = &j.m_edgeA

        j.m_edgeB.joint = j
        j.m_edgeB.other = j.m_bodyA
        j.m_edgeB.prev = null
        j.m_edgeB.next = j.m_bodyB.m_jointList
        if j.m_bodyB.m_jointList, j.m_bodyB.m_jointList.prev = &j.m_edgeB
        j.m_bodyB.m_jointList = &j.m_edgeB

        bodyA *b2Body = definition.bodyA
        bodyB *b2Body = definition.bodyB

        // If the joint prevents collisions, then flag any contacts for filtering.
        if definition.collideConnected == false {
            edge *b2ContactEdge = bodyB.GetContactList()

            while edge {
                if edge.other == bodyA {
                    // Flag the contact for filtering at the next time step (where either
                    // body is awake).
                    edge.contact.FlagForFiltering()
                }

                edge = edge.next
            }
        }

        // Note: creating a joint doesn't wake the bodies.

        return j
    }

    /// Destroy a joint. This may cause the connected bodies to begin colliding.
    /// @warning This function is locked during callbacks.
    func DestroyJoint(j *b2Joint) void {
        b2Assert(this.IsLocked() == false, #get __file__, #get __line__, 'b2Assert(this.IsLocked() == false)')
        if this.IsLocked(), return

        collideConnected bool = j.m_collideConnected

        // Remove from the doubly linked list.
        if j.m_prev, j.m_prev.m_next = j.m_next
        if j.m_next, j.m_next.m_prev = j.m_prev
        if j == this.m_jointList, this.m_jointList = j.m_next

        // Disconnect from island graph.
        bodyA *b2Body = j.m_bodyA
        bodyB *b2Body = j.m_bodyB

        // Wake up connected bodies.
        bodyA.SetAwake(true)
        bodyB.SetAwake(true)

        // Remove from body 1.
        if j.m_edgeA.prev, j.m_edgeA.prev.next = j.m_edgeA.next
        if j.m_edgeA.next, j.m_edgeA.next.prev = j.m_edgeA.prev
        if &j.m_edgeA == bodyA.m_jointList, bodyA.m_jointList = j.m_edgeA.next

        j.m_edgeA.prev = null
        j.m_edgeA.next = null

        // Remove from body 2
        if j.m_edgeB.prev, j.m_edgeB.prev.next = j.m_edgeB.next
        if j.m_edgeB.next, j.m_edgeB.next.prev = j.m_edgeB.prev
        if &j.m_edgeB == bodyB.m_jointList, bodyB.m_jointList = j.m_edgeB.next

        j.m_edgeB.prev = null
        j.m_edgeB.next = null

        b2Joint\Destroy(j, &this.m_blockAllocator)

        b2Assert(this.m_jointCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_jointCount > 0)')
        --this.m_jointCount

        // If the joint prevents collisions, then flag any contacts for filtering.
        if collideConnected == false {
            edge *b2ContactEdge = bodyB.GetContactList()
            while edge {
                if edge.other == bodyA {
                    // Flag the contact for filtering at the next time step (where either
                    // body is awake).
                    edge.contact.FlagForFiltering()
                }

                edge = edge.next
            }
        }
    }

    /// Take a time step. This performs collision detection, integration,
    /// and constraint solution.
    /// @param timeStep the amount of time to simulate, this should not vary.
    /// @param velocityIterations for the velocity constraint solver.
    /// @param positionIterations for the position constraint solver.
    func Step(dt float, velocityIterations int, positionIterations int) void {
        stepTimer POD b2Timer = POD b2Timer()

        // If new fixtures were added, we need to find the new contacts.
        if this.m_newContacts {
            this.m_contactManager.FindNewContacts()
            this.m_newContacts = false
        }

        this.m_locked = true

        step POD b2TimeStep = undef
        step.dt = dt
        step.velocityIterations    = velocityIterations
        step.positionIterations = positionIterations

        if dt > 0.0f {
            step.inv_dt = 1.0f / dt
        } else {
            step.inv_dt = 0.0f
        }

        step.dtRatio = this.m_inv_dt0 * dt
        step.warmStarting = this.m_warmStarting
        
        // Update contacts. This is where some contacts are destroyed.
        if true {
            timer POD b2Timer = POD b2Timer()
            this.m_contactManager.Collide()
            this.m_profile.collide = timer.GetMilliseconds()
        }

        // Integrate velocities, solve velocity constraints, and integrate positions.
        if this.m_stepComplete && step.dt > 0.0f {
            timer POD b2Timer = POD b2Timer()
            this.Solve(&step)
            this.m_profile.solve = timer.GetMilliseconds()
        }

        // Handle TOI events.
        if this.m_continuousPhysics && step.dt > 0.0f {
            timer POD b2Timer = POD b2Timer()
            this.SolveTOI(&step)
            this.m_profile.solveTOI = timer.GetMilliseconds()
        }

        if step.dt > 0.0f {
            this.m_inv_dt0 = step.inv_dt
        }

        if this.m_clearForces {
            this.ClearForces()
        }

        this.m_locked = false
        this.m_profile.step = stepTimer.GetMilliseconds()
    }

    /// Manually clear the force buffer on all bodies. By default, forces are cleared automatically
    /// after each call to Step. The default behavior is modified by calling SetAutoClearForces.
    /// The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain
    /// a fixed sized time step under a variable frame-rate.
    /// When you perform sub-stepping you will disable auto clearing of forces and instead call
    /// ClearForces after all sub-steps are complete in one pass of your game loop.
    /// @see SetAutoClearForces
    func ClearForces() void {
        for(body *b2Body = this.m_bodyList; body; body = body.GetNext()){
            body.m_force.SetZero()
            body.m_torque = 0.0f
        }
    }

    /// Call this to draw shapes and other debug draw data. This is intentionally non-const.
    func DebugDraw() void {
        if this.m_debugDraw == null, return

        flags uint = this.m_debugDraw.GetFlags()

        if flags & b2Draw\e_shapeBit {
            for(b *b2Body = this.m_bodyList; b; b = b.GetNext()){
                xf *b2Transform = b.GetTransform()

                for(f *b2Fixture = b.GetFixtureList(); f; f = f.GetNext()){
                    if b.GetType() == b2_dynamicBody && b.m_mass == 0.0f {
                        // Bad body
                        c POD b2Color = POD b2Color(1.0f, 0.0f, 0.0f)
                        this.DrawShape(f, xf, &c)
                    } else if b.IsEnabled() == false {
                        c POD b2Color = POD b2Color(0.5f, 0.5f, 0.3f)
                        this.DrawShape(f, xf, &c)
                    } else if b.GetType() == b2_staticBody {
                        c POD b2Color = POD b2Color(0.5f, 0.9f, 0.5f)
                        this.DrawShape(f, xf, &c)
                    } else if b.GetType() == b2_kinematicBody {
                        c POD b2Color = POD b2Color(0.5f, 0.5f, 0.9f)
                        this.DrawShape(f, xf, &c)
                    } else if b.IsAwake() == false {
                        c POD b2Color = POD b2Color(0.6f, 0.6f, 0.6f)
                        this.DrawShape(f, xf, &c)
                    } else {
                        c POD b2Color = POD b2Color(0.9f, 0.7f, 0.7f)
                        this.DrawShape(f, xf, &c)
                    }
                }
            }
        }

        if flags & b2Draw\e_jointBit {
            for(j *b2Joint = this.m_jointList; j; j = j.GetNext()){
                j.Draw(this.m_debugDraw)
            }
        }

        if flags & b2Draw\e_pairBit {
            color POD b2Color = POD b2Color(0.3f, 0.9f, 0.9f)

            for(c *b2Contact = this.m_contactManager.m_contactList; c; c = c.GetNext()){
                fixtureA *b2Fixture = c.GetFixtureA()
                fixtureB *b2Fixture = c.GetFixtureB()
                indexA int = c.GetChildIndexA()
                indexB int = c.GetChildIndexB()
                cA POD b2Vec2 = POD fixtureA.GetAABB(indexA).GetCenter()
                cB POD b2Vec2 = POD fixtureB.GetAABB(indexB).GetCenter()

                this.m_debugDraw.DrawSegment(&cA, &cB, &color)
            }
        }

        if flags & b2Draw\e_aabbBit {
            color POD b2Color = POD b2Color(0.9f, 0.3f, 0.9f)
            bp *b2BroadPhase = &this.m_contactManager.m_broadPhase

            for(b *b2Body = this.m_bodyList; b; b = b.GetNext()){
                if b.IsEnabled() == false, continue

                for(f *b2Fixture = b.GetFixtureList(); f; f = f.GetNext()){
                    for(i int = 0; i < f.m_proxyCount; ++i){
                        proxy *b2FixtureProxy = f.m_proxies at i
                        aabb POD b2AABB = POD *bp.GetFatAABB(proxy.proxyId)
                        vs 4 b2Vec2 = undef
                        vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y)
                        vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y)
                        vs[2].Set(aabb.upperBound.x, aabb.upperBound.y)
                        vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y)

                        this.m_debugDraw.DrawPolygon(cast *b2Vec2 &vs, 4, &color)
                    }
                }
            }
        }

        if flags & b2Draw\e_centerOfMassBit {
            for(b *b2Body = this.m_bodyList; b; b = b.GetNext()){
                xf POD b2Transform = POD *b.GetTransform()
                xf.p = *b.GetWorldCenter()
                this.m_debugDraw.DrawTransform(&xf)
            }
        }
    }

    /// Query the world for all fixtures that potentially overlap the
    /// provided AABB.
    /// @param callback a user implemented callback class.
    /// @param aabb the query box.
    func QueryAABB(callback *b2QueryCallback, in aabb POD b2AABB) void { this.QueryAABB(callback, &aabb); }
    func QueryAABB(callback *b2QueryCallback, in aabb *b2AABB) void {
        wrapper POD b2WorldQueryWrapper = undef
        wrapper.broadPhase = &this.m_contactManager.m_broadPhase
        wrapper.callback = callback
        this.m_contactManager.m_broadPhase.Query(&wrapper, aabb)
    }

    /// Ray-cast the world for all fixtures in the path of the ray. Your callback
    /// controls whether you get the closest point, any point, or n-points.
    /// The ray-cast ignores shapes that contain the starting point.
    /// @param callback a user implemented callback class.
    /// @param point1 the ray starting point
    /// @param point2 the ray ending point
    func RayCast(callback *b2RayCastCallback, in point1, point2 POD b2Vec2) void { this.RayCast(callback, &point1, &point2); }
    func RayCast(callback *b2RayCastCallback, in point1, point2 *b2Vec2) void {
        wrapper POD b2WorldRayCastWrapper = undef
        wrapper.broadPhase = &this.m_contactManager.m_broadPhase
        wrapper.callback = callback
        input POD b2RayCastInput = undef
        input.maxFraction = 1.0f
        input.p1 = *point1
        input.p2 = *point2
        this.m_contactManager.m_broadPhase.RayCast(&wrapper, &input)
    }

    /// Get the world body list. With the returned body, use b2Body::GetNext to get
    /// the next body in the world list. A null body indicates the end of the list.
    /// @return the head of the world body list.
    func GetBodyList() *b2Body { return this.m_bodyList; }

    /// Get the world joint list. With the returned joint, use b2Joint::GetNext to get
    /// the next joint in the world list. A null joint indicates the end of the list.
    /// @return the head of the world joint list.
    func GetJointList() *b2Joint { return this.m_jointList; }

    /// Get the world contact list. With the returned contact, use b2Contact::GetNext to get
    /// the next contact in the world list. A null contact indicates the end of the list.
    /// @return the head of the world contact list.
    /// @warning contacts are created and destroyed in the middle of a time step.
    /// Use b2ContactListener to avoid missing contacts.
    func GetContactList() *b2Contact { return this.m_contactManager.m_contactList; }

    /// Enable/disable sleep.
    func SetAllowSleeping(flag bool) void {
        if flag == this.m_allowSleep, return

        this.m_allowSleep = flag

        if this.m_allowSleep == false {
            for(b *b2Body = this.m_bodyList; b; b = b.m_next){
                b.SetAwake(true)
            }
        }
    }

    func GetAllowSleeping() bool { return this.m_allowSleep; }

    /// Enable/disable warm starting. For testing.
    func SetWarmStarting(flag bool) void { this.m_warmStarting = flag; }
    func GetWarmStarting() bool { return this.m_warmStarting; }

    /// Enable/disable continuous physics. For testing.
    func SetContinuousPhysics(flag bool) void { this.m_continuousPhysics = flag; }
    func GetContinuousPhysics() bool { return this.m_continuousPhysics; }

    /// Enable/disable single stepped continuous physics. For testing.
    func SetSubStepping(flag bool) void { this.m_subStepping = flag; }
    func GetSubStepping() bool { return this.m_subStepping; }

    /// Get the number of broad-phase proxies.
    func GetProxyCount() int {
        return this.m_contactManager.m_broadPhase.GetProxyCount()
    }

    /// Get the number of bodies.
    func GetBodyCount() int { return this.m_bodyCount; }

    /// Get the number of joints.
    func GetJointCount() int { return this.m_jointCount; }

    /// Get the number of contacts (each may have 0 or more contact points).
    func GetContactCount() int { return this.m_contactManager.m_contactCount; }

    /// Get the height of the dynamic tree.
    func GetTreeHeight() int {
        return this.m_contactManager.m_broadPhase.GetTreeHeight()
    }

    /// Get the balance of the dynamic tree.
    func GetTreeBalance() int {
        return this.m_contactManager.m_broadPhase.GetTreeBalance()
    }

    /// Get the quality metric of the dynamic tree. The smaller the better.
    /// The minimum is 1.
    func GetTreeQuality() float {
        return this.m_contactManager.m_broadPhase.GetTreeQuality()
    }

    /// Change the global gravity vector.
    func SetGravity(in gravity POD b2Vec2) { this.SetGravity(&gravity); }
    func SetGravity(in gravity *b2Vec2) void { this.m_gravity = *gravity; }
    
    /// Get the global gravity vector.
    func GetGravity() b2Vec2 { return this.m_gravity; }

    /// Is the world locked (in the middle of a time step).
    func IsLocked() bool { return this.m_locked; }

    /// Set flag to control automatic clearing of forces after each time step.
    func SetAutoClearForces(flag bool) void { this.m_clearForces = flag; }

    /// Get the flag that controls automatic clearing of forces after each time step.
    func GetAutoClearForces() bool { return this.m_clearForces; }

    /// Shift the world origin. Useful for large worlds.
    /// The body shift formula is: position -= newOrigin
    /// @param newOrigin the new origin with respect to the old origin
    func ShiftOrigin(in newOrigin POD b2Vec2) void {
        b2Assert(this.m_locked == false, #get __file__, #get __line__, 'b2Assert(this.m_locked == false)')
        if this.m_locked, return

        for(b *b2Body = this.m_bodyList; b; b = b.m_next){
            b.m_xf.p.SubtractAssign(newOrigin)
            b.m_sweep.c0.SubtractAssign(newOrigin)
            b.m_sweep.c.SubtractAssign(newOrigin)
        }

        for(j *b2Joint = this.m_jointList; j; j = j.m_next){
            j.ShiftOrigin(&newOrigin)
        }

        this.m_contactManager.m_broadPhase.ShiftOrigin(&newOrigin)
    }

    /// Get the contact manager for testing.
    func GetContactManager() *b2ContactManager { return &this.m_contactManager; }

    /// Get the current profile.
    func GetProfile() *b2Profile { return &this.m_profile; }

    /// Dump the world into the log file.
    /// @warning this should be called outside of a time step.
    func Dump() void {
        if this.m_locked, return

        b2OpenDump('box2d_dump.inl')

        b2Dump('b2Vec2 g(%hf, %hf);\n', cast double this.m_gravity.x, cast double this.m_gravity.y)
        b2Dump('m_world->SetGravity(g);\n')

        b2Dump('b2Body** bodies = (b2Body**)b2Alloc(%d * sizeof(b2Body*));\n', this.m_bodyCount)
        b2Dump('b2Joint** joints = (b2Joint**)b2Alloc(%d * sizeof(b2Joint*));\n', this.m_jointCount)

        i int = 0
        for(b *b2Body = this.m_bodyList; b; b = b.m_next){
            b.m_islandIndex = i
            b.Dump()
            ++i
        }

        i = 0
        for(j *b2Joint = this.m_jointList; j; j = j.m_next){
            j.m_index = i
            ++i
        }

        // First pass on joints, skip gear joints.
        for(j *b2Joint = this.m_jointList; j; j = j.m_next){
            if j.m_type == b2JointType::e_gearJoint, continue

            b2Dump('{\n');
            j.Dump();
            b2Dump('}\n');
        }

        // Second pass on joints, only gear joints.
        for(j *b2Joint = this.m_jointList; j; j = j.m_next){
            if j.m_type != b2JointType::e_gearJoint, continue

            b2Dump('{\n')
            j.Dump()
            b2Dump('}\n')
        }

        b2Dump('b2Free(joints);\n')
        b2Dump('b2Free(bodies);\n')
        b2Dump('joints = nullptr;\n')
        b2Dump('bodies = nullptr;\n')

        b2CloseDump()
    }

    // --------------------------------------------------------

    // Find islands, integrate and solve constraints, solve position constraints
    func Solve(in step *b2TimeStep) void {
        this.m_profile.solveInit = 0.0f
        this.m_profile.solveVelocity = 0.0f
        this.m_profile.solvePosition = 0.0f

        // Size the island for the worst case.
        island b2Island = undef
        b2Island(&island, this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, &this.m_stackAllocator, this.m_contactManager.m_contactListener)

        // Clear all the island flags.
        for(b *b2Body = this.m_bodyList; b; b = b.m_next){
            b.m_flags &= ~b2Body\e_islandFlag
        }
        for(c *b2Contact = this.m_contactManager.m_contactList; c; c = c.m_next){
            c.m_flags &= ~b2Contact\e_islandFlag
        }
        for(j *b2Joint = this.m_jointList; j; j = j.m_next){
            j.m_islandFlag = false
        }

        // Build and simulate all awake islands.
        stackSize int = this.m_bodyCount
        stack **b2Body = this.m_stackAllocator.Allocate(stackSize * sizeof *b2Body) as **b2Body
        for(seed *b2Body = this.m_bodyList; seed; seed = seed.m_next){

            if seed.m_flags & b2Body\e_islandFlag, continue
            if seed.IsAwake() == false || seed.IsEnabled() == false, continue

            // The seed can be dynamic or kinematic.
            if seed.GetType() == b2_staticBody, continue

            // Reset island and stack.
            island.Clear()
            stackCount int = 0
            stack[stackCount++] = seed
            seed.m_flags |= b2Body\e_islandFlag

            // Perform a depth first search (DFS) on the constraint graph.
            while stackCount > 0 {
                // Grab the next body off the stack and add it to the island.
                b *b2Body = stack[--stackCount]
                b2Assert(b.IsEnabled() == true, #get __file__, #get __line__, 'b2Assert(b.IsEnabled() == true)')
                island.Add(b)

                // To keep islands as small as possible, we don't
                // propagate islands across static bodies.
                if b.GetType() == b2_staticBody, continue

                // Make sure the body is awake (without resetting sleep timer).
                b.m_flags |= b2Body\e_awakeFlag

                // Search all contacts connected to this body.
                for(ce *b2ContactEdge = b.m_contactList; ce; ce = ce.next){
                    contact *b2Contact = ce.contact

                    // Has this contact already been added to an island?
                    if contact.m_flags & b2Contact\e_islandFlag, continue

                    // Is this contact solid and touching?
                    if contact.IsEnabled() == false || contact.IsTouching() == false, continue

                    // Skip sensors.
                    sensorA bool = contact.m_fixtureA.m_isSensor
                    sensorB bool = contact.m_fixtureB.m_isSensor
                    if sensorA || sensorB, continue

                    island.Add(contact)
                    contact.m_flags |= b2Contact\e_islandFlag

                    other *b2Body = ce.other

                    // Was the other body already added to this island?
                    if other.m_flags & b2Body\e_islandFlag, continue

                    b2Assert(stackCount < stackSize, #get __file__, #get __line__, 'b2Assert(stackCount < stackSize)')
                    stack[stackCount++] = other
                    other.m_flags |= b2Body\e_islandFlag
                }

                // Search all joints connect to this body.
                for(je *b2JointEdge = b.m_jointList; je; je = je.next){
                    if je.joint.m_islandFlag == true, continue

                    other *b2Body = je.other

                    // Don't simulate joints connected to diabled bodies.
                    if other.IsEnabled() == false, continue

                    island.Add(je.joint)
                    je.joint.m_islandFlag = true

                    if other.m_flags & b2Body\e_islandFlag, continue

                    b2Assert(stackCount < stackSize, #get __file__, #get __line__, 'b2Assert(stackCount < stackSize)')
                    stack[stackCount++] = other
                    other.m_flags |= b2Body\e_islandFlag
                }
            }

            profile POD b2Profile = undef
            island.Solve(&profile, step, &this.m_gravity, this.m_allowSleep)
            this.m_profile.solveInit += profile.solveInit
            this.m_profile.solveVelocity += profile.solveVelocity
            this.m_profile.solvePosition += profile.solvePosition

            // Post solve cleanup.
            for(i int = 0; i < island.m_bodyCount; ++i){
                // Allow static bodies to participate in other islands.
                b *b2Body = island.m_bodies[i]
                if b.GetType() == b2_staticBody {
                    b.m_flags &= ~b2Body\e_islandFlag
                }
            }
        }

        this.m_stackAllocator.Free(stack)

        if true {
            timer POD b2Timer = b2Timer()

            // Synchronize fixtures, check for out of range bodies.
            for(b *b2Body = this.m_bodyList; b; b = b.GetNext()){
                // If a body was not in an island then it did not move.
                if (b.m_flags & b2Body\e_islandFlag) == 0, continue

                if b.GetType() == b2_staticBody, continue

                // Update fixtures (for broad-phase).
                b.SynchronizeFixtures()
            }

            // Look for new contacts.
            this.m_contactManager.FindNewContacts()
            this.m_profile.broadphase = timer.GetMilliseconds()
        }
    }

    // Find TOI contacts and solve them.
    func SolveTOI(in step *b2TimeStep) void {
        island b2Island = undef
        b2Island(&island, 2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, &this.m_stackAllocator, this.m_contactManager.m_contactListener)

        if this.m_stepComplete {
            for(b *b2Body = this.m_bodyList; b; b = b.m_next){
                b.m_flags &= ~b2Body\e_islandFlag
                b.m_sweep.alpha0 = 0.0f
            }

            for(c *b2Contact = this.m_contactManager.m_contactList; c; c = c.m_next){
                // Invalidate TOI
                c.m_flags &= ~(b2Contact\e_toiFlag | b2Contact\e_islandFlag)
                c.m_toiCount = 0
                c.m_toi = 1.0f
            }
        }

        // Find TOI events and solve them.
        until break {
            // Find the first TOI.
            minContact *b2Contact = null
            minAlpha float = 1.0f

            for(c *b2Contact = this.m_contactManager.m_contactList; c; c = c.m_next){
                // Is this contact disabled?
                if c.IsEnabled() == false, continue

                // Prevent excessive sub-stepping.
                if c.m_toiCount > b2_maxSubSteps, continue

                alpha float = 1.0f
                if c.m_flags & b2Contact\e_toiFlag {
                    // This contact has a valid cached TOI.
                    alpha = c.m_toi
                } else {
                    fA *b2Fixture = c.GetFixtureA()
                    fB *b2Fixture = c.GetFixtureB()

                    // Is there a sensor?
                    if fA.IsSensor() || fB.IsSensor(), continue

                    bA *b2Body = fA.GetBody()
                    bB *b2Body = fB.GetBody()

                    typeA b2BodyType = bA.m_type
                    typeB b2BodyType = bB.m_type
                    b2Assert(typeA == b2_dynamicBody || typeB == b2_dynamicBody, #get __file__, #get __line__, 'b2Assert(typeA == b2_dynamicBody || typeB == b2_dynamicBody)')

                    activeA bool = bA.IsAwake() && typeA != b2_staticBody
                    activeB bool = bB.IsAwake() && typeB != b2_staticBody

                    // Is at least one body active (awake and dynamic or kinematic)?
                    if activeA == false && activeB == false {
                        continue
                    }

                    collideA bool = bA.IsBullet() || typeA != b2_dynamicBody
                    collideB bool = bB.IsBullet() || typeB != b2_dynamicBody

                    // Are these two non-bullet dynamic bodies?
                    if collideA == false && collideB == false, continue

                    // Compute the TOI for this contact.
                    // Put the sweeps onto the same time interval.
                    alpha0 float = bA.m_sweep.alpha0

                    if bA.m_sweep.alpha0 < bB.m_sweep.alpha0 {
                        alpha0 = bB.m_sweep.alpha0
                        bA.m_sweep.Advance(alpha0)
                    } else if bB.m_sweep.alpha0 < bA.m_sweep.alpha0 {
                        alpha0 = bA.m_sweep.alpha0
                        bB.m_sweep.Advance(alpha0)
                    }

                    b2Assert(alpha0 < 1.0f, #get __file__, #get __line__, 'b2Assert(alpha0 < 1.0f)')

                    indexA int = c.GetChildIndexA()
                    indexB int = c.GetChildIndexB()

                    // Compute the time of impact in interval [0, minTOI]
                    input POD b2TOIInput = undef
                    input.proxyA.Set(fA.GetShape(), indexA)
                    input.proxyB.Set(fB.GetShape(), indexB)
                    input.sweepA = bA.m_sweep
                    input.sweepB = bB.m_sweep
                    input.tMax = 1.0f

                    output POD b2TOIOutput = undef
                    b2TimeOfImpact(&output, &input)

                    // Beta is the fraction of the remaining portion of the .
                    beta float = output.t
                    if output.state == b2TOIOutput\State::e_touching {
                        alpha = b2Min(alpha0 + (1.0f - alpha0) * beta, 1.0f)
                    } else {
                        alpha = 1.0f
                    }

                    c.m_toi = alpha
                    c.m_flags |= b2Contact\e_toiFlag
                }

                if alpha < minAlpha {
                    // This is the minimum TOI found so far.
                    minContact = c
                    minAlpha = alpha
                }
            }

            if minContact == null || 1.0f - 10.0f * b2_epsilon < minAlpha {
                // No more TOI events. Done!
                this.m_stepComplete = true
                break
            }

            // Advance the bodies to the TOI.
            fA *b2Fixture = minContact.GetFixtureA()
            fB *b2Fixture = minContact.GetFixtureB()
            bA *b2Body = fA.GetBody()
            bB *b2Body = fB.GetBody()

            backup1 POD b2Sweep = POD bA.m_sweep
            backup2 POD b2Sweep = POD bB.m_sweep

            bA.Advance(minAlpha)
            bB.Advance(minAlpha)

            // The TOI contact likely has some new contact points.
            minContact.Update(this.m_contactManager.m_contactListener)
            minContact.m_flags &= ~b2Contact\e_toiFlag
            ++minContact.m_toiCount

            // Is the contact solid?
            if minContact.IsEnabled() == false || minContact.IsTouching() == false {
                // Restore the sweeps.
                minContact.SetEnabled(false)
                bA.m_sweep = backup1
                bB.m_sweep = backup2
                bA.SynchronizeTransform()
                bB.SynchronizeTransform()
                continue
            }

            bA.SetAwake(true)
            bB.SetAwake(true)

            // Build the island
            island.Clear()
            island.Add(bA)
            island.Add(bB)
            island.Add(minContact)

            bA.m_flags |= b2Body\e_islandFlag
            bB.m_flags |= b2Body\e_islandFlag
            minContact.m_flags |= b2Contact\e_islandFlag

            // Get contacts on bodyA and bodyB.
            bodies 2 *b2Body = undef
            bodies[0] = bA
            bodies[1] = bB
            
            for(i int = 0; i < 2; ++i){
                body *b2Body = bodies[i]

                if body.m_type == b2_dynamicBody {
                    for(ce *b2ContactEdge = body.m_contactList; ce; ce = ce.next) {
                        if island.m_bodyCount == island.m_bodyCapacity, break
                        if island.m_contactCount == island.m_contactCapacity, break

                        contact *b2Contact = ce.contact

                        // Has this contact already been added to the island?
                        if contact.m_flags & b2Contact\e_islandFlag, continue

                        // Only add static, kinematic, or bullet bodies.
                        other *b2Body = ce.other
                        if other.m_type == b2_dynamicBody && body.IsBullet() == false && other.IsBullet() == false {
                            continue
                        }

                        // Skip sensors.
                        sensorA bool = contact.m_fixtureA.m_isSensor
                        sensorB bool = contact.m_fixtureB.m_isSensor
                        if sensorA || sensorB, continue

                        // Tentatively advance the body to the TOI.
                        backup POD b2Sweep = POD other.m_sweep
                        if (other.m_flags & b2Body\e_islandFlag) == 0 {
                            other.Advance(minAlpha)
                        }

                        // Update the contact points
                        contact.Update(this.m_contactManager.m_contactListener)

                        // Was the contact disabled by the user?
                        if contact.IsEnabled() == false {
                            other.m_sweep = backup
                            other.SynchronizeTransform()
                            continue
                        }

                        // Are there contact points?
                        if contact.IsTouching() == false {
                            other.m_sweep = backup
                            other.SynchronizeTransform()
                            continue
                        }

                        // Add the contact to the island
                        contact.m_flags |= b2Contact\e_islandFlag
                        island.Add(contact)

                        // Has the other body already been added to the island?
                        if other.m_flags & b2Body\e_islandFlag, continue
                        
                        // Add the other body to the island.
                        other.m_flags |= b2Body\e_islandFlag

                        if other.m_type != b2_staticBody {
                            other.SetAwake(true)
                        }

                        island.Add(other)
                    }
                }
            }

            subStep POD b2TimeStep = undef
            subStep.dt = (1.0f - minAlpha) * step.dt
            subStep.inv_dt = 1.0f / subStep.dt
            subStep.dtRatio = 1.0f
            subStep.positionIterations = 20
            subStep.velocityIterations = step.velocityIterations
            subStep.warmStarting = false
            island.SolveTOI(&subStep, bA.m_islandIndex, bB.m_islandIndex)

            // Reset island flags and synchronize broad-phase proxies.
            for(i int = 0; i < island.m_bodyCount; ++i){
                body *b2Body = island.m_bodies[i]
                body.m_flags &= ~b2Body\e_islandFlag

                if body.m_type != b2_dynamicBody, continue

                body.SynchronizeFixtures()

                // Invalidate all contact TOIs on this displaced body.
                for(ce *b2ContactEdge = body.m_contactList; ce; ce = ce.next){
                    ce.contact.m_flags &= ~(b2Contact\e_toiFlag | b2Contact\e_islandFlag)
                }
            }

            // Commit fixture proxy movements to the broad-phase so that new contacts are created.
            // Also, some contacts can be destroyed.
            this.m_contactManager.FindNewContacts()

            if this.m_subStepping {
                this.m_stepComplete = false
                break
            }
        }
    }
    
    func DrawShape(fixture *b2Fixture, in xf *b2Transform, in color *b2Color) void {
        switch fixture.GetType() {
        case b2ShapeType::e_circle
            circle *b2CircleShape = fixture.GetShape() as *b2CircleShape

            center POD b2Vec2 = POD b2Mul(xf, circle.m_p)
            radius float = circle.m_radius
            axis POD b2Vec2 = POD b2Mul(xf.q, b2Vec2(1.0f, 0.0f))

            this.m_debugDraw.DrawSolidCircle(&center, radius, &axis, color)

        case b2ShapeType::e_edge
            edge *b2EdgeShape = fixture.GetShape() as *b2EdgeShape
            v1 POD b2Vec2 = POD b2Mul(xf, edge.m_vertex1)
            v2 POD b2Vec2 = POD b2Mul(xf, edge.m_vertex2)
            this.m_debugDraw.DrawSegment(&v1, &v2, color)

            if edge.m_oneSided == false {
                this.m_debugDraw.DrawPoint(&v1, 4.0f, color)
                this.m_debugDraw.DrawPoint(&v2, 4.0f, color)
            }

        case b2ShapeType::e_chain
            chain *b2ChainShape = fixture.GetShape() as *b2ChainShape
            count int = chain.m_count
            vertices *b2Vec2 = chain.m_vertices

            v1 POD b2Vec2 = POD b2Mul(xf, vertices[0])

            for(i int = 1; i < count; ++i){
                v2 POD b2Vec2 = POD b2Mul(xf, vertices[i])
                this.m_debugDraw.DrawSegment(&v1, &v2, color)
                v1 = v2
            }

        case b2ShapeType::e_polygon
            poly *b2PolygonShape = fixture.GetShape() as *b2PolygonShape
            vertexCount int = poly.m_count
            b2Assert(vertexCount <= b2_maxPolygonVertices, #get __file__, #get __line__, 'b2Assert(vertexCount <= b2_maxPolygonVertices)')
            vertices /*b2_maxPolygonVertices*/ 8 b2Vec2 = undef

            for(i int = 0; i < vertexCount; ++i){
                vertices[i] = b2Mul(xf, poly.m_vertices[i])
            }

            this.m_debugDraw.DrawSolidPolygon(cast *b2Vec2 &vertices, vertexCount, color)
        
        }

        return
    } // (end of b2World.DrawShape)
}

/// Construct a world object.
/// @param gravity the world gravity vector.
func b2World(uninitialized *b2World, in gravity *b2Vec2) void {
    uninitialized.m_blockAllocator = b2BlockAllocator()
    b2StackAllocator(&uninitialized.m_stackAllocator)

    uninitialized.m_destructionListener = null
    uninitialized.m_debugDraw = null

    uninitialized.m_bodyList = null
    uninitialized.m_jointList = null

    uninitialized.m_bodyCount = 0
    uninitialized.m_jointCount = 0

    uninitialized.m_warmStarting = true
    uninitialized.m_continuousPhysics = true
    uninitialized.m_subStepping = false

    uninitialized.m_stepComplete = true

    uninitialized.m_allowSleep = true
    uninitialized.m_gravity = POD *gravity

    uninitialized.m_newContacts = false
    uninitialized.m_locked = false
    uninitialized.m_clearForces = true

    uninitialized.m_inv_dt0 = 0.0f

    uninitialized.m_contactManager = b2ContactManager()
    uninitialized.m_contactManager.m_allocator = &uninitialized.m_blockAllocator

    memset(&uninitialized.m_profile, 0, sizeof b2Profile)
}

// --------------------------------------------------------

struct b2WorldQueryWrapper (broadPhase *b2BroadPhase, callback *b2QueryCallback) {
    func QueryCallback(proxyId int) bool
    {
        proxy *b2FixtureProxy = this.broadPhase.GetUserData(proxyId) as *b2FixtureProxy
        return this.callback.ReportFixture(proxy.fixture)
    }
}

struct b2WorldRayCastWrapper (broadPhase *b2BroadPhase, callback *b2RayCastCallback) {
    func RayCastCallback(in input *b2RayCastInput, proxyId int) float
    {
        userData ptr = this.broadPhase.GetUserData(proxyId)
        proxy *b2FixtureProxy = userData as *b2FixtureProxy
        fixture *b2Fixture = proxy.fixture
        index int = proxy.childIndex
        output POD b2RayCastOutput = undef
        hit bool = fixture.RayCast(&output, input, index)

        if hit {
            fraction float = output.fraction
            point POD b2Vec2 = input.p1 *(1.0f - fraction) + input.p2 * fraction
            return this.callback.ReportFixture(fixture, &point, &output.normal, fraction)
        }

        return input.maxFraction
	}
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstring.adept"

define b2_blockSizeCount = 14

define b2_chunkSize = 16 * 1024      // (file local)
define b2_maxBlockSize = 640         // (file local)
define b2_chunkArrayIncrement = 128  // (file local)

/// This is a small object allocator used for allocating small
/// objects that persist for more than one time step.
/// See: http://www.codeproject.com/useritems/Small_Block_Allocator.asp
struct b2BlockAllocator (
    m_chunks *b2_block_allocator\b2Chunk,
    m_chunkCount int,
    m_chunkSpace int,
    m_freeLists 14 *b2_block_allocator\b2Block // (14 == b2_blockSizeCount)
) {
    func __defer__ {
        for(i int = 0; i < this.m_chunkCount; ++i){
            b2Free(this.m_chunks[i].blocks)
        }
        b2Free(this.m_chunks)
    }

    /// Helper for b2BlockAllocator.Allocate(int)
    // Usage: allocator.Allocate() ~> *Type
    func Allocate() *$T = this.Allocate(sizeof $T) as *$T

    /// Allocate memory. This will use b2Alloc if the size is larger than b2_maxBlockSize.
    func Allocate(size int) ptr {
        if size == 0, return null

        b2Assert(0 < size, #get __file__, #get __line__, 'b2Assert(0 < size)')

        if size > b2_maxBlockSize, return b2Alloc(size)

        b2_sizeMap_values *ubyte = cast *ubyte &b2_block_allocator\b2_sizeMap._opaque_values
        index int = b2_sizeMap_values[size]
        b2Assert(0 <= index && index < b2_blockSizeCount, #get __file__, #get __line__, 'b2Assert(0 <= index && index < b2_blockSizeCount)')

        if this.m_freeLists[index] {
            block *b2_block_allocator\b2Block = this.m_freeLists[index]
            this.m_freeLists[index] = block.next as *b2_block_allocator\b2Block
            return block
        }

        if this.m_chunkCount == this.m_chunkSpace {
            oldChunks *b2_block_allocator\b2Chunk = this.m_chunks
            this.m_chunkSpace += b2_chunkArrayIncrement
            this.m_chunks = b2Alloc(this.m_chunkSpace * sizeof b2_block_allocator\b2Chunk) as *b2_block_allocator\b2Chunk
            memcpy(this.m_chunks, oldChunks, this.m_chunkCount * sizeof b2_block_allocator\b2Chunk)
            memset(this.m_chunks at this.m_chunkCount, 0, b2_chunkArrayIncrement * sizeof b2_block_allocator\b2Chunk)
            b2Free(oldChunks)
        }

        chunk *b2_block_allocator\b2Chunk = this.m_chunks at this.m_chunkCount
        chunk.blocks = b2Alloc(b2_chunkSize) as *b2_block_allocator\b2Block

        #if b2_DEBUG
        memset(chunk.blocks, 0xcd, b2_chunkSize)
        #end

        blockSize int = b2_block_allocator\b2_blockSizes[index]
        chunk.blockSize = blockSize
        blockCount int = b2_chunkSize / blockSize
        b2Assert(blockCount * blockSize <= b2_chunkSize, #get __file__, #get __line__, 'b2Assert(blockCount * blockSize <= b2_chunkSize)')

        for(i int = 0; i < blockCount - 1; ++i){
            block *b2_block_allocator\b2Block = chunk.blocks as *ubyte at (blockSize * i) as *b2_block_allocator\b2Block
            next *b2_block_allocator\b2Block = chunk.blocks as *ubyte at (blockSize * (i + 1)) as *b2_block_allocator\b2Block
            block.next = next
        }

        last *b2_block_allocator\b2Block = chunk.blocks as *ubyte at (blockSize * (blockCount - 1)) as *b2_block_allocator\b2Block
        last.next = null

        this.m_freeLists[index] = chunk.blocks.next
        ++this.m_chunkCount
        return chunk.blocks
    }

    /// Free memory. This will use b2Free if the size is larger than b2_maxBlockSize.
    func Free(p ptr, size int) void {
        if size == 0, return

        b2Assert(0 < size, #get __file__, #get __line__, 'b2Assert(0 < size)')

        if size > b2_maxBlockSize {
            b2Free(p)
            return
        }

        b2_sizeMap_values *ubyte = cast *ubyte &b2_block_allocator\b2_sizeMap._opaque_values
        index int = b2_sizeMap_values[size]
        b2Assert(0 <= index && index < b2_blockSizeCount, #get __file__, #get __line__, 'b2Assert(0 <= index && index < b2_blockSizeCount)')

        #if b2_DEBUG
        // Verify the memory address and size is valid.
        blockSize int = b2_block_allocator\b2_blockSizes[index]
        found bool = false

        for(i int = 0; i < this.m_chunkCount; ++i){
            chunk *b2_block_allocator\b2Chunk = this.m_chunks at i

            if chunk.blockSize != blockSize {
                b2Assert(p as *ubyte at blockSize <= chunk.blocks as *ubyte || chunk.blocks as *ubyte at b2_chunkSize <= p as *ubyte, #get __file__, #get __line__, 'b2Assert(p as *ubyte at blockSize <= chunk.blocks as *ubyte || chunk.blocks as *ubyte at b2_chunkSize <= p as *ubyte)')
            } else {
                if chunk.blocks as *ubyte <= p as *ubyte && p as *ubyte at blockSize <= chunk.blocks as *ubyte at b2_chunkSize {
                    found = true
                }
            }
        }

        b2Assert(found, #get __file__, #get __line__, 'b2Assert(found)')
        memset(p, 0xfd, blockSize)
        #end

        block *b2_block_allocator\b2Block = p as *b2_block_allocator\b2Block
        block.next = this.m_freeLists[index]
        this.m_freeLists[index] = block
    }

    func Clear() void {
        for(i int = 0; i < this.m_chunkCount; ++i){
            b2Free(this.m_chunks[i].blocks)
        }

        this.m_chunkCount = 0
        memset(this.m_chunks, 0, this.m_chunkSpace * sizeof b2_block_allocator\b2Chunk)
        memset(&this.m_freeLists, 0, sizeof(this.m_freeLists))
    }
}

func b2BlockAllocator() b2BlockAllocator {
    b POD b2BlockAllocator = undef

    b2Assert(b2_blockSizeCount < 255, #get __file__, #get __line__, 'b2Assert(b2_blockSizeCount < 255)')

    b.m_chunkSpace = b2_chunkArrayIncrement
    b.m_chunkCount = 0
    b.m_chunks = b2Alloc(b.m_chunkSpace * sizeof b2_block_allocator\b2Chunk) as *b2_block_allocator\b2Chunk

    memset(b.m_chunks, 0, b.m_chunkSpace * sizeof b2_block_allocator\b2Chunk)
    memset(&b.m_freeLists, 0, sizeof(b.m_freeLists))
    return b
}

namespace b2_block_allocator {
    // These are the supported object sizes. Actual allocations are rounded up the next size.
    b2_blockSizes 14 int = undef // (initialized by b2SizeMap())
    
    func b2_blockSizes_make() 14 int {
        sizes 14 int = undef
        sizes[00] = 16        // 0
        sizes[01] = 32        // 1
        sizes[02] = 64        // 2
        sizes[03] = 96        // 3
        sizes[04] = 128     // 4
        sizes[05] = 160     // 5
        sizes[06] = 192     // 6
        sizes[07] = 224     // 7
        sizes[08] = 256     // 8
        sizes[09] = 320     // 9
        sizes[10] = 384     // 10
        sizes[11] = 448     // 11
        sizes[12] = 512     // 12
        sizes[13] = 640     // 13
        return sizes
    }

    struct b2SizeMap (
        // values 641 ubyte  which is  (b2_maxBlockSize + 1)
        _opaque_values 81 ulong
    )

    func b2SizeMap() b2_block_allocator\b2SizeMap {
        b2_block_allocator\b2_blockSizes = b2_block_allocator\b2_blockSizes_make()

        m POD b2_block_allocator\b2SizeMap = undef
        values *ubyte = cast *ubyte &m._opaque_values
        
        j int = 0
        values[0] = 0

        for(i int = 1; i <= b2_maxBlockSize; ++i){
            b2Assert(j < b2_blockSizeCount, #get __file__, #get __line__, 'b2Assert(j < b2_blockSizeCount)')
            
            if i <= b2_block_allocator\b2_blockSizes[j] {
                values[i] = cast ubyte j
            } else {
                ++j
                values[i] = cast ubyte j
            }
        }

        return m
    }

    b2_sizeMap b2_block_allocator\b2SizeMap = b2_block_allocator\b2SizeMap()

    struct b2Block (next ptr) // (next is *b2Block)
    struct b2Chunk (blockSize int, blocks *b2_block_allocator\b2Block)
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES:
    class b2Contact;
    class b2ContactFilter;
    class b2ContactListener;
    class b2BlockAllocator;
*/

// Delegate of b2World.
struct b2ContactManager (
    m_broadPhase b2BroadPhase,
    m_contactList *b2Contact,
    m_contactCount int,
    m_contactFilter *b2ContactFilter,
    m_contactListener *b2ContactListener,
    m_allocator *b2BlockAllocator
) {
    // Broad-phase callback.
    func AddPair(proxyUserDataA ptr, proxyUserDataB ptr) void {
        proxyA *b2FixtureProxy = proxyUserDataA as *b2FixtureProxy
        proxyB *b2FixtureProxy = proxyUserDataB as *b2FixtureProxy

        fixtureA *b2Fixture = proxyA.fixture
        fixtureB *b2Fixture = proxyB.fixture

        indexA int = proxyA.childIndex
        indexB int = proxyB.childIndex

        bodyA *b2Body = fixtureA.GetBody()
        bodyB *b2Body = fixtureB.GetBody()

        // Are the fixtures on the same body?
        if bodyA == bodyB, return


        // TODO_ERIN use a hash table to remove a potential bottleneck when both
        // bodies have a lot of contacts.
        // Does a contact already exist?
        edge *b2ContactEdge = bodyB.GetContactList()

        while edge {
            if edge.other == bodyA {
                fA *b2Fixture = edge.contact.GetFixtureA()
                fB *b2Fixture = edge.contact.GetFixtureB()
                iA int = edge.contact.GetChildIndexA()
                iB int = edge.contact.GetChildIndexB()

                if fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB {
                    // A contact already exists.
                    return
                }

                if fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA {
                    // A contact already exists.
                    return
                }
            }

            edge = edge.next
        }

        // Does a joint override collision? Is at least one body dynamic?
        if bodyB.ShouldCollide(bodyA) == false {
            return
        }

        // Check user filtering.
        if this.m_contactFilter && this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false {
            return
        }

        // Call the factory.
        c *b2Contact = b2Contact\Create(fixtureA, indexA, fixtureB, indexB, this.m_allocator)
        if c == null {
            return
        }

        // Contact creation may swap fixtures.
        fixtureA = c.GetFixtureA()
        fixtureB = c.GetFixtureB()
        indexA = c.GetChildIndexA()
        indexB = c.GetChildIndexB()
        bodyA = fixtureA.GetBody()
        bodyB = fixtureB.GetBody()

        // Insert into the world.
        c.m_prev = null
        c.m_next = this.m_contactList
        if this.m_contactList != null {
            this.m_contactList.m_prev = c
        }
        this.m_contactList = c

        // Connect to island graph.

        // Connect to body A
        c.m_nodeA.contact = c
        c.m_nodeA.other = bodyB

        c.m_nodeA.prev = null
        c.m_nodeA.next = bodyA.m_contactList
        if bodyA.m_contactList != null {
            bodyA.m_contactList.prev = &c.m_nodeA
        }
        bodyA.m_contactList = &c.m_nodeA

        // Connect to body B
        c.m_nodeB.contact = c
        c.m_nodeB.other = bodyA

        c.m_nodeB.prev = null
        c.m_nodeB.next = bodyB.m_contactList
        if bodyB.m_contactList != null {
            bodyB.m_contactList.prev = &c.m_nodeB
        }
        bodyB.m_contactList = &c.m_nodeB

        ++this.m_contactCount
    }

    func FindNewContacts() void {
        this.m_broadPhase.UpdatePairs(this)
    }

    func Destroy(c *b2Contact) void {
        fixtureA *b2Fixture = c.GetFixtureA()
        fixtureB *b2Fixture = c.GetFixtureB()
        bodyA *b2Body = fixtureA.GetBody()
        bodyB *b2Body = fixtureB.GetBody()

        if this.m_contactListener && c.IsTouching() {
            this.m_contactListener.EndContact(c)
        }

        // Remove from the world.
        if c.m_prev, c.m_prev.m_next = c.m_next

        if c.m_next, c.m_next.m_prev = c.m_prev

        if c == this.m_contactList, this.m_contactList = c.m_next

        // Remove from body 1
        if c.m_nodeA.prev, c.m_nodeA.prev.next = c.m_nodeA.next

        if c.m_nodeA.next, c.m_nodeA.next.prev = c.m_nodeA.prev

        if &c.m_nodeA == bodyA.m_contactList, bodyA.m_contactList = c.m_nodeA.next

        // Remove from body 2
        if c.m_nodeB.prev, c.m_nodeB.prev.next = c.m_nodeB.next

        if c.m_nodeB.next, c.m_nodeB.next.prev = c.m_nodeB.prev

        if &c.m_nodeB == bodyB.m_contactList, bodyB.m_contactList = c.m_nodeB.next

        // Call the factory.
        b2Contact\Destroy(c, this.m_allocator)
        --this.m_contactCount
    }

    // This is the top level collision call for the time step. Here
    // all the narrow phase collision is processed for the world
    // contact list.
    func Collide() void {
        // Update awake contacts.
        c *b2Contact = this.m_contactList

        while c {
            fixtureA *b2Fixture = c.GetFixtureA()
            fixtureB *b2Fixture = c.GetFixtureB()
            indexA int = c.GetChildIndexA()
            indexB int = c.GetChildIndexB()
            bodyA *b2Body = fixtureA.GetBody()
            bodyB *b2Body = fixtureB.GetBody()
            
            // Is this contact flagged for filtering?
            if c.m_flags & b2Contact\e_filterFlag {
                // Should these bodies collide?
                unless bodyB.ShouldCollide(bodyA) {
                    cNuke *b2Contact = c
                    c = cNuke.GetNext()
                    this.Destroy(cNuke)
                    continue
                }

                // Check user filtering.
                if this.m_contactFilter && this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false {
                    cNuke *b2Contact = c
                    c = cNuke.GetNext()
                    this.Destroy(cNuke)
                    continue
                }

                // Clear the filtering flag.
                c.m_flags &= ~b2Contact\e_filterFlag
            }

            activeA bool = bodyA.IsAwake() && bodyA.m_type != b2BodyType::b2_staticBody
            activeB bool = bodyB.IsAwake() && bodyB.m_type != b2BodyType::b2_staticBody

            // At least one body must be awake and it must be dynamic or kinematic.
            if activeA == false && activeB == false {
                c = c.GetNext()
                continue
            }

            proxyIdA int = fixtureA.m_proxies[indexA].proxyId
            proxyIdB int = fixtureB.m_proxies[indexB].proxyId
            overlap bool = this.m_broadPhase.TestOverlap(proxyIdA, proxyIdB)

            // Here we destroy contacts that cease to overlap in the broad-phase.
            if overlap == false {
                cNuke *b2Contact = c
                c = cNuke.GetNext()
                this.Destroy(cNuke)
                continue
            }

            // The contact persists.
            c.Update(this.m_contactListener)
            c = c.GetNext()
        }
    }   
}

func b2ContactManager() b2ContactManager {
    cm POD b2ContactManager = undef
    cm.m_broadPhase = POD b2BroadPhase()
    cm.m_contactList = null
    cm.m_contactCount = 0
    cm.m_contactFilter = &b2_defaultFilter
    cm.m_contactListener = &b2_defaultListener
    cm.m_allocator = null
    return cm
}

b2_defaultFilter b2ContactFilter = b2ContactFilter()
b2_defaultListener b2ContactListener = b2ContactListener()


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES:
    struct b2Vec2;
    struct b2Transform;
    class b2Fixture;
    class b2Body;
    class b2Joint;
    class b2Contact;
    struct b2ContactResult;
    struct b2Manifold;
*/

/// Joints and fixtures are destroyed when their associated
/// body is destroyed. Implement this listener so that you
/// may nullify references to these joints and shapes.
struct b2DestructionListener (vtable b2DestructionListenerVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer as func(ptr) void
        if f, f(this)
    }

    func SayGoodbye(joint *b2Joint) void {
        f func(ptr, *b2Joint) void = this.vtable.f_SayGoodbye_b2Joint as func(ptr, *b2Joint) void
        if f, f(this, joint)
        else b2_common\missing_vtable_entry('b2DestructionListener', 'SayGoodbye(*b2Joint)')
    }

    func SayGoodbye(fixture *b2Fixture) void {
        f func(ptr, *b2Fixture) void = this.vtable.f_SayGoodbye_b2Joint as func(ptr, *b2Fixture) void
        if f, f(this, fixture)
        else b2_common\missing_vtable_entry('b2DestructionListener', 'SayGoodbye(*b2Fixture)')
    }
}

func b2DestructionListener(implementation *$Impl, use_defer bool) *b2DestructionListener {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2DestructionListener')
        return null
    }

    implementation.vtable = b2DestructionListenerVTable(implementation, use_defer)
    return implementation
}

struct b2DestructionListenerVTable (
    // virtual ~b2DestructionListener() {}
    f_defer,

    /// Called when any joint is about to be destroyed due
    /// to the destruction of one of its attached bodies.
    // virtual void SayGoodbye(b2Joint* joint) = 0;
    f_SayGoodbye_b2Joint,

    /// Called when any fixture is about to be destroyed due
    /// to the destruction of its parent body.
    // virtual void SayGoodbye(b2Fixture* fixture) = 0;
    f_SayGoodbye_b2Fixture ptr
)
func b2DestructionListenerVTable(_ *$Impl, use_defer bool) b2DestructionListenerVTable {
    v POD b2DestructionListenerVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_SayGoodbye_b2Joint = func &SayGoodbye(*$Impl, *b2Joint) as ptr
    v.f_SayGoodbye_b2Fixture = func &SayGoodbye(*$Impl, *b2Fixture) as ptr
    return v
}



/// Implement this class to provide collision filtering. In other words, you can implement
/// this class if you want finer control over contact creation.
struct b2ContactFilter (vtable b2ContactFilterVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer as func(ptr) void
        if f, f(this)
    }

    // Return true if contact calculations should be performed between these two shapes.
    // If you implement your own collision filter you may want to build from this implementation.
    func ShouldCollide(fixtureA, fixtureB *b2Fixture) bool {
        if this.vtable.f_ShouldCollide {
            // Prefer virtual implementation if existant
            f func(ptr, *b2Fixture, *b2Fixture) bool = this.vtable.f_ShouldCollide as func(ptr, *b2Fixture, *b2Fixture) bool
            return f(this, fixtureA, fixtureB)
        }

        filterA *b2Filter = fixtureA.GetFilterData()
        filterB *b2Filter = fixtureB.GetFilterData()

        if filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0 {
            return filterA.groupIndex > 0
        }

        collide bool = (filterA.maskBits & filterB.categoryBits) != 0 && (filterA.categoryBits & filterB.maskBits) != 0
        return collide
    }
}
func b2ContactFilter() b2ContactFilter {
    filter POD b2ContactFilter = undef

    // Initialize a blank b2ContactFilter with the default implementation
    b2ContactFilter(&filter, false)
    memset(&filter.vtable, 0, sizeof b2ContactFilterVTable)
    return filter
}
func b2ContactFilter(implementation *$Impl, use_defer bool) *b2ContactFilter {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2ContactFilter')
        return null
    }

    implementation.vtable = b2ContactFilterVTable(implementation, use_defer)
    return implementation
}

struct b2ContactFilterVTable (
    // virtual ~b2ContactFilter() {}
    f_defer,

    /// Return true if contact calculations should be performed between these two shapes.
    /// @warning for performance reasons this is only called when the AABBs begin to overlap.
    // virtual bool ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB);
    f_ShouldCollide ptr
)
func b2ContactFilterVTable(_ *$Impl, use_defer bool) b2ContactFilterVTable {
    v POD b2ContactFilterVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ShouldCollide = func &ShouldCollide(*$Impl, *b2Fixture, *b2Fixture) as ptr
    return v
}



/// Contact impulses for reporting. Impulses are used instead of forces because
/// sub-step forces may approach infinity for rigid body collisions. These
/// match up one-to-one with the contact points in b2Manifold.
struct b2ContactImpulse (
    normalImpulses /*b2_maxManifoldPoints*/ 2 float,
    tangentImpulses /*b2_maxManifoldPoints*/ 2 float,
    count int
)



/// Implement this class to get contact information. You can use these results for
/// things like sounds and game logic. You can also get contact results by
/// traversing the contact lists after the time step. However, you might miss
/// some contacts because continuous physics leads to sub-stepping.
/// Additionally you may receive multiple callbacks for the same contact in a
/// single time step.
/// You should strive to make your callbacks efficient because there may be
/// many callbacks per time step.
/// @warning You cannot create/destroy Box2D entities inside these callbacks.
struct b2ContactListener (vtable b2ContactListenerVTable) {
    verbatim func __defer__ {
        if this.vtable.f_defer {
            f func(ptr) void = this.vtable.f_defer
            f(this as ptr)
        }
    }

    func BeginContact(contact *b2Contact) void {
        f func(ptr, *b2Contact) void = this.vtable.f_BeginContact as func(ptr, *b2Contact) void
        if f, f(this, contact)
    }

    func EndContact(contact *b2Contact) void {
        f func(ptr, *b2Contact) void = this.vtable.f_EndContact as func(ptr, *b2Contact) void
        if f, f(this, contact)
    }

    func PreSolve(contact *b2Contact, oldManifold *b2Manifold) void {
        f func(ptr, *b2Contact, *b2Manifold) void = this.vtable.f_PreSolve as func(ptr, *b2Contact, *b2Manifold) void
        if f, f(this, contact, oldManifold)
    }

    func PostSolve(contact *b2Contact, impulse *b2ContactImpulse) void {
        f func(ptr, *b2Contact, *b2ContactImpulse) void = this.vtable.f_PostSolve as func(ptr, *b2Contact, *b2ContactImpulse) void
        if f, f(this, contact, impulse)
    }
}
func b2ContactListener() b2ContactListener {
    listener POD b2ContactListener
    b2ContactListener(&listener, false)
    memset(&listener.vtable, 0, sizeof b2ContactListenerVTable)
    return listener
}
func b2ContactListener(implementation *$Impl, use_defer bool) *b2ContactListener {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2ContactListener')
        return null
    }

    implementation.vtable = b2ContactListenerVTable(implementation, use_defer)
    return implementation
}

struct b2ContactListenerVTable (
    // virtual ~b2ContactListener() {}
    f_defer,

    /// Called when two fixtures begin to touch.
    // virtual void BeginContact(b2Contact* contact)
    f_BeginContact,

    /// Called when two fixtures cease to touch.
    // virtual void EndContact(b2Contact* contact)
    f_EndContact,

    /// This is called after a contact is updated. This allows you to inspect a
    /// contact before it goes to the solver. If you are careful, you can modify the
    /// contact manifold (e.g. disable contact).
    /// A copy of the old manifold is provided so that you can detect changes.
    /// Note: this is called only for awake bodies.
    /// Note: this is called even when the number of contact points is zero.
    /// Note: this is not called for sensors.
    /// Note: if you set the number of contact points to zero, you will not
    /// get an EndContact callback. However, you may get a BeginContact callback
    /// the next step.
    // virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)
    f_PreSolve,

    /// This lets you inspect a contact after the solver is finished. This is useful
    /// for inspecting impulses.
    /// Note: the contact manifold does not include time of impact impulses, which can be
    /// arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly
    /// in a separate data structure.
    /// Note: this is only called for contacts that are touching, solid, and awake.
    // virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)
    f_PostSolve ptr
)
func b2ContactListenerVTable(_ *$Impl, use_defer bool) b2ContactListenerVTable {
    v POD b2ContactListenerVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_BeginContact = func null &BeginContact(*$Impl, *b2Contact) as ptr
    v.f_EndContact = func null &EndContact(*$Impl, *b2Contact) as ptr
    v.f_PreSolve = func null &PreSolve(*$Impl, *b2Contact, *b2Manifold) as ptr
    v.f_PostSolve = func null &PostSolve(*$Impl, *b2Contact, *b2ContactImpulse) as ptr
    return v
}



/// Callback class for AABB queries.
/// See b2World::Query
struct b2QueryCallback (vtable b2QueryCallbackVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer
        if f, f(this)
    }

    func ReportFixture(fixture *b2Fixture) bool {
        f func(ptr, *b2Fixture) bool = this.vtable.f_ReportFixture as func(ptr, *b2Fixture) bool

        if f {
            return f(this, fixture)
        } else b2_common\missing_vtable_entry('b2QueryCallback', 'ReportError')

        return false
    }
}
func b2QueryCallback(implementation *$Impl, use_defer bool) *b2QueryCallback {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2QueryCallback')
        return null
    }

    implementation.vtable = b2QueryCallbackVTable(implementation, use_defer)
    return implementation
}

struct b2QueryCallbackVTable (
    // virtual ~b2QueryCallback() {}
    f_defer,

    /// Called for each fixture found in the query AABB.
    /// @return false to terminate the query.
    // virtual bool ReportFixture(b2Fixture* fixture) = 0;
    f_ReportFixture ptr
)
func b2QueryCallbackVTable(_ *$Impl, use_defer bool) b2QueryCallbackVTable {
    v POD b2QueryCallbackVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ReportFixture = func &ReportFixture(*$Impl, *b2Fixture) as ptr
    return v
}



/// Callback class for ray casts.
/// See b2World::RayCast
struct b2RayCastCallback (vtable b2RayCastCallbackVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer
        if f, f(this)
    }

    /// Called for each fixture found in the query. You control how the ray cast
    /// proceeds by returning a float:
    /// return -1: ignore this fixture and continue
    /// return 0: terminate the ray cast
    /// return fraction: clip the ray to this point
    /// return 1: don't clip the ray and continue
    /// @param fixture the fixture hit by the ray
    /// @param point the point of initial intersection
    /// @param normal the normal vector at the point of intersection
    /// @param fraction the fraction along the ray at the point of intersection
    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for
    /// closest hit, 1 to continue
    // virtual float ReportFixture(b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float fraction) = 0;
    func ReportFixture(fixture *b2Fixture, point *b2Vec2, normal *b2Vec2, fraction float) float {
        f func(ptr, *b2Fixture, *b2Vec2, *b2Vec2, float) float = this.vtable.f_ReportFixture as func(ptr, *b2Fixture, *b2Vec2, *b2Vec2, float) float

        unless f {
            b2_common\missing_vtable_entry('b2RayCastCallback', 'ReportError')
            return 0.0f
        }

        return f(this, fixture, point, normal, fraction)
    }
}
func b2RayCastCallback(implementation *$Impl, use_defer bool) *b2RayCastCallback {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2RayCastCallback')
        return null
    }

    implementation.vtable = b2RayCastCallback(implementation, use_defer)
    return implementation
}

struct b2RayCastCallbackVTable (
    // virtual ~b2RayCastCallback() {}
    f_defer,

    /// Called for each fixture found in the query. You control how the ray cast
    /// proceeds by returning a float:
    /// return -1: ignore this fixture and continue
    /// return 0: terminate the ray cast
    /// return fraction: clip the ray to this point
    /// return 1: don't clip the ray and continue
    /// @param fixture the fixture hit by the ray
    /// @param point the point of initial intersection
    /// @param normal the normal vector at the point of intersection
    /// @param fraction the fraction along the ray at the point of intersection
    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for
    /// closest hit, 1 to continue
    // virtual float ReportFixture(b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float fraction) = 0;
    f_ReportFixture ptr
)
func b2RayCastCallbackVTable(_ *$Impl, use_defer bool) b2RayCastCallbackVTable {
    v POD b2QueryCallbackVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ReportFixture = func &ReportFixture(*$Impl, *b2Fixture, *b2Vec2, *b2Vec2, float) as ptr
    return v
}

func b2_world_callbacks\badVTableError(struct_name *ubyte) {
    printf('%s() got bad implementation type. Field "vtable" must be the first field!\n', struct_name)
    printf('    To properly implement:  struct MyImpl (struct %s, <user fields>)\n', struct_name)
    printf('    (returning null)\n')
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Since large fixed-arrays take a long time to compile with LLVM,
// Allocating the stack allocator's memory on the heap will greatly
// improve compile times - Isaac, Mar 27 2021
#default b2_stack_allocator_use_heap true


define b2_stackSize = 100 * 1024 // 100k
define b2_maxStackEntries = 32

struct b2StackEntry (data *ubyte, size int, usedMalloc bool)


#if b2_stack_allocator_use_heap
    alias b2_stack_allocator\DataRepresentation = *ubyte
#else
    alias b2_stack_allocator\DataRepresentation = /*b2_stackSize - 102400 ubyte*/ 12800 ulong
#end

// This is a stack allocator used for fast per step allocations.
// You must nest allocate/free pairs. The code will assert
// if you try to interleave multiple allocate/free pairs.
struct b2StackAllocator (
    m_data b2_stack_allocator\DataRepresentation,
    m_index int,
    m_allocation int,
    m_maxAllocation int,
    m_entries /*b2_maxStackEntries*/ 32 b2StackEntry,
    m_entryCount int
) {
    verbatim func __defer__ {
        b2Assert(this.m_index == 0, #get __file__, #get __line__, 'b2Assert(this.m_index == 0)')
        b2Assert(this.m_entryCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_entryCount == 0)')

        #if b2_stack_allocator_use_heap
            b2Free(this.m_data)
        #end
    }

    func Allocate(size int) ptr {
        b2Assert(this.m_entryCount < b2_maxStackEntries, #get __file__, #get __line__, 'b2Assert(this.m_entryCount < b2_maxStackEntries)')

        entry *b2StackEntry = this.m_entries at this.m_entryCount
        entry.size = size

        if this.m_index + size > b2_stackSize {
            entry.data = b2Alloc(size) as *ubyte
            entry.usedMalloc = true
        } else {
            #if b2_stack_allocator_use_heap
                entry.data = this.m_data at this.m_index
            #else
                entry.data = &this.m_data as *ubyte at this.m_index
            #end

            entry.usedMalloc = false
            this.m_index += size
        }

        this.m_allocation += size
        this.m_maxAllocation = b2Max(this.m_maxAllocation, this.m_allocation)
        ++this.m_entryCount

        return entry.data
    }

    func Free(p ptr) void {
        b2Assert(this.m_entryCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_entryCount > 0)')
        entry *b2StackEntry = this.m_entries at (this.m_entryCount - 1)
        b2Assert(p == entry.data, #get __file__, #get __line__, 'b2Assert(p == entry.data)')

        if entry.usedMalloc {
            b2Free(p)
        } else {
            this.m_index -= entry.size
        }

        this.m_allocation -= entry.size
        --this.m_entryCount
    }

    func GetMaxAllocation() int {
        return this.m_maxAllocation
    }
}

func b2StackAllocator(uninitialized *b2StackAllocator) void {
    #if b2_stack_allocator_use_heap
        uninitialized.m_data = b2Alloc(b2_stackSize) as *ubyte
    #end

    uninitialized.m_index = 0
    uninitialized.m_allocation = 0
    uninitialized.m_maxAllocation = 0
    uninitialized.m_entryCount = 0
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// [FILE NOT APPLICABLE]


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Solver debugging is normally disabled because the block solver sometimes has to deal with a poorly conditioned effective mass matrix.
#default B2_DEBUG_SOLVER 0


/*
REQUIRES:
    class b2Contact;
    class b2Body;
    class b2StackAllocator;
    struct b2ContactPositionConstraint;
*/

struct b2VelocityConstraintPoint (
    rA b2Vec2,
    rB b2Vec2,
    normalImpulse float,
    tangentImpulse float,
    normalMass float,
    tangentMass float,
    velocityBias float
)

struct b2ContactVelocityConstraint (
    points /*b2_maxManifoldPoints*/ 2 b2VelocityConstraintPoint,
    normal b2Vec2,
    normalMass b2Mat22,
    K b2Mat22,
    indexA int,
    indexB int,
    invMassA, invMassB float,
    invIA, invIB float,
    friction float,
    restitution float,
    threshold float,
    tangentSpeed float,
    pointCount int,
    contactIndex int
)

struct b2ContactSolverDef (
    step b2TimeStep,
    contacts **b2Contact,
    count int,
    positions *b2Position,
    velocities *b2Velocity,
    allocator *b2StackAllocator
)

struct b2ContactSolver (
    m_step b2TimeStep,
    m_positions *b2Position,
    m_velocities *b2Velocity,
    m_allocator *b2StackAllocator,
    m_positionConstraints *b2ContactPositionConstraint,
    m_velocityConstraints *b2ContactVelocityConstraint,
    m_contacts **b2Contact,
    m_count int
) {
    func __defer__ {
        this.m_allocator.Free(this.m_velocityConstraints)
        this.m_allocator.Free(this.m_positionConstraints)
    }

    func InitializeVelocityConstraints() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            radiusA float = pc.radiusA
            radiusB float = pc.radiusB
            manifold *b2Manifold = this.m_contacts[vc.contactIndex].GetManifold()

            indexA int = vc.indexA
            indexB int = vc.indexB

            mA float = vc.invMassA
            mB float = vc.invMassB
            iA float = vc.invIA
            iB float = vc.invIB
            localCenterA POD b2Vec2 = POD pc.localCenterA
            localCenterB POD b2Vec2 = POD pc.localCenterB

            cA b2Vec2 = POD this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a
            vA b2Vec2 = POD this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            b2Assert(manifold.pointCount > 0, #get __file__, #get __line__, 'b2Assert(manifold.pointCount > 0)')

            xfA, xfB POD b2Transform = undef
            xfA.q.Set(aA)
            xfB.q.Set(aB)
            xfA.p = cA - b2Mul(xfA.q, localCenterA)
            xfB.p = cB - b2Mul(xfB.q, localCenterB)

            worldManifold b2WorldManifold = undef
            worldManifold.Initialize(manifold, &xfA, radiusA, &xfB, radiusB)

            vc.normal = worldManifold.normal

            pointCount int = vc.pointCount
            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j

                vcp.rA = worldManifold.points[j] - cA
                vcp.rB = worldManifold.points[j] - cB

                rnA float = b2Cross(vcp.rA, vc.normal)
                rnB float = b2Cross(vcp.rB, vc.normal)

                kNormal float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                vcp.normalMass = kNormal > 0.0f ? 1.0f / kNormal : 0.0f

                tangent POD b2Vec2 = POD b2Cross(vc.normal, 1.0f)

                rtA float = b2Cross(vcp.rA, tangent)
                rtB float = b2Cross(vcp.rB, tangent)

                kTangent float = mA + mB + iA * rtA * rtA + iB * rtB * rtB

                vcp.tangentMass = kTangent > 0.0f ? 1.0f /  kTangent : 0.0f

                // Setup a velocity bias for restitution.
                vcp.velocityBias = 0.0f
                vRel float = b2Dot(vc.normal, vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA))
                if vRel < 0.0f - vc.threshold {
                    vcp.velocityBias = (0.0f - vc.restitution) * vRel
                }
            }

            // If we have two points, then prepare the block solver.
            if vc.pointCount == 2 && b2_contact_solver\g_blockSolve {
                vcp1 *b2VelocityConstraintPoint = vc.points at 0
                vcp2 *b2VelocityConstraintPoint = vc.points at 1

                rn1A float = b2Cross(vcp1.rA, vc.normal)
                rn1B float = b2Cross(vcp1.rB, vc.normal)
                rn2A float = b2Cross(vcp2.rA, vc.normal)
                rn2B float = b2Cross(vcp2.rB, vc.normal)

                k11 float = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B
                k22 float = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B
                k12 float = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B

                // Ensure a reasonable condition number.
                define k_maxConditionNumber = 1000.0f

                if k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12) {
                    // K is safe to invert.
                    vc.K.ex.Set(k11, k12)
                    vc.K.ey.Set(k12, k22)
                    vc.normalMass = vc.K.GetInverse()
                } else {
                    // The constraints are redundant, just use one.
                    // TODO_ERIN use deepest?
                    vc.pointCount = 1
                }
            }
        }
    }

    func WarmStart() void {
        // Warm start.
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i

            indexA int = vc.indexA
            indexB int = vc.indexB
            mA float = vc.invMassA
            iA float = vc.invIA
            mB float = vc.invMassB
            iB float = vc.invIB
            pointCount int = vc.pointCount

            vA POD b2Vec2 = this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            normal POD b2Vec2 = vc.normal
            tangent POD b2Vec2 = b2Cross(normal, 1.0f)

            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j
                P POD b2Vec2 = vcp.normalImpulse * normal + vcp.tangentImpulse * tangent
                wA -= iA * b2Cross(vcp.rA, P)
                vA.SubtractAssign(mA * P)
                wB += iB * b2Cross(vcp.rB, P)
                vB.AddAssign(mB * P)
            }

            this.m_velocities[indexA].v = vA
            this.m_velocities[indexA].w = wA
            this.m_velocities[indexB].v = vB
            this.m_velocities[indexB].w = wB
        }
    }

    func SolveVelocityConstraints() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i

            indexA int = vc.indexA
            indexB int = vc.indexB
            mA float = vc.invMassA
            iA float = vc.invIA
            mB float = vc.invMassB
            iB float = vc.invIB
            pointCount int = vc.pointCount

            vA POD b2Vec2 = this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            normal POD b2Vec2 = vc.normal
            tangent POD b2Vec2 = b2Cross(normal, 1.0f)
            friction float = vc.friction

            b2Assert(pointCount == 1 || pointCount == 2, #get __file__, #get __line__, 'b2Assert(pointCount == 1 || pointCount == 2)')

            // Solve tangent constraints first because non-penetration is more important
            // than friction.
            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j

                // Relative velocity at contact
                dv POD b2Vec2 = vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA)

                // Compute tangent force
                vt float = b2Dot(dv, tangent) - vc.tangentSpeed
                lambda float = vcp.tangentMass * (0.0f - vt)

                // b2Clamp the accumulated force
                maxFriction float = friction * vcp.normalImpulse
                newImpulse float = b2Clamp(vcp.tangentImpulse + lambda, 0.0f - maxFriction, maxFriction)
                lambda = newImpulse - vcp.tangentImpulse
                vcp.tangentImpulse = newImpulse

                // Apply contact impulse
                P POD b2Vec2 = lambda * tangent

                vA.SubtractAssign(mA * P)
                wA -= iA * b2Cross(vcp.rA, P)

                vB.AddAssign(mB * P)
                wB += iB * b2Cross(vcp.rB, P)
            }

            // Solve normal constraints
            if pointCount == 1 || b2_contact_solver\g_blockSolve == false {
                for(j int = 0; j < pointCount; ++j){
                    vcp *b2VelocityConstraintPoint = vc.points at j

                    // Relative velocity at contact
                    dv POD b2Vec2 = vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA)

                    // Compute normal impulse
                    vn float = b2Dot(dv, normal)
                    lambda float = (0.0f - vcp.normalMass) * (vn - vcp.velocityBias)

                    // b2Clamp the accumulated impulse
                    newImpulse float = b2Max(vcp.normalImpulse + lambda, 0.0f)
                    lambda = newImpulse - vcp.normalImpulse
                    vcp.normalImpulse = newImpulse

                    // Apply contact impulse
                    P POD b2Vec2 = lambda * normal
                    vA.SubtractAssign(mA * P)
                    wA -= iA * b2Cross(vcp.rA, P)

                    vB.AddAssign(mB * P)
                    wB += iB * b2Cross(vcp.rB, P);
                }
            } else {
                // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on Box2D_Lite).
                // Build the mini LCP for this contact patch
                //
                // vn = A * x + b, vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2
                //
                // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )
                // b = vn0 - velocityBias
                //
                // The system is solved using the "Total enumeration method" (s. Murty). The complementary constraint vn_i * x_i
                // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D contact problem the cases
                // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be tested. The first valid
                // solution that satisfies the problem is chosen.
                // 
                // In order to account of the accumulated impulse 'a' (because of the iterative nature of the solver which only requires
                // that the accumulated impulse is clamped and not the incremental impulse) we change the impulse variable (x_i).
                //
                // Substitute:
                // 
                // x = a + d
                // 
                // a := old total impulse
                // x := new total impulse
                // d := incremental impulse 
                //
                // For the current iteration we extend the formula for the incremental impulse
                // to compute the new total impulse:
                //
                // vn = A * d + b
                //    = A * (x - a) + b
                //    = A * x + b - A * a
                //    = A * x + b'
                // b' = b - A * a;

                cp1 *b2VelocityConstraintPoint = vc.points at 0
                cp2 *b2VelocityConstraintPoint = vc.points at 1

                a POD b2Vec2 = POD b2Vec2(cp1.normalImpulse, cp2.normalImpulse)
                b2Assert(a.x >= 0.0f && a.y >= 0.0f, #get __file__, #get __line__, 'b2Assert(a.x >= 0.0f && a.y >= 0.0f)')

                // Relative velocity at contact
                dv1 POD b2Vec2 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)
                dv2 POD b2Vec2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                // Compute normal velocity
                vn1 float = b2Dot(dv1, normal)
                vn2 float = b2Dot(dv2, normal)

                b POD b2Vec2 = undef
                b.x = vn1 - cp1.velocityBias
                b.y = vn2 - cp2.velocityBias

                // Compute b'
                b.SubtractAssign(b2Mul(vc.K, a))

                define _k_errorTol = 1e-3f // (unused)

                until break {
                    //
                    // Case 1: vn = 0
                    //
                    // 0 = A * x + b'
                    //
                    // Solve for x:
                    //
                    // x = - inv(A) * b'
                    //
                    x POD b2Vec2 = b2Mul(vc.normalMass, b).Negated()

                    if x.x >= 0.0f && x.y >= 0.0f {
                        // Get the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv1 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)
                        dv2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                        // Compute normal velocity
                        vn1 = b2Dot(dv1, normal)
                        vn2 = b2Dot(dv2, normal)

                        b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol, #get __file__, #get __line__, 'b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol)')
                        b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol, #get __file__, #get __line__, 'b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol)')
                        #end
                        break
                    }

                    //
                    // Case 2: vn1 = 0 and x2 = 0
                    //
                    //   0 = a11 * x1 + a12 * 0 + b1' 
                    // vn2 = a21 * x1 + a22 * 0 + b2'
                    //
                    x.x = (0.0f - cp1.normalMass) * b.x
                    x.y = 0.0f
                    vn1 = 0.0f
                    vn2 = vc.K.ex.y * x.x + b.y
                    if x.x >= 0.0f && vn2 >= 0.0f {
                        // Get the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv1 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)

                        // Compute normal velocity
                        vn1 = b2Dot(dv1, normal)

                        b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol, #get __file__, #get __line__, 'b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol)')
                        #end
                        break
                    }


                    //
                    // Case 3: vn2 = 0 and x1 = 0
                    //
                    // vn1 = a11 * 0 + a12 * x2 + b1' 
                    //   0 = a21 * 0 + a22 * x2 + b2'
                    //
                    x.x = 0.0f
                    x.y = (0.0f - cp2.normalMass) * b.y
                    vn1 = vc.K.ey.x * x.y + b.x
                    vn2 = 0.0f

                    if x.y >= 0.0f && vn1 >= 0.0f {
                        // Resubstitute for the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2));

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                        // Compute normal velocity
                        vn2 = b2Dot(dv2, normal)

                        b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol, #get __file__, #get __line__, 'b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol)')
                        #end
                        break
                    }

                    //
                    // Case 4: x1 = 0 and x2 = 0
                    // 
                    // vn1 = b1
                    // vn2 = b2;
                    x.x = 0.0f
                    x.y = 0.0f
                    vn1 = b.x
                    vn2 = b.y

                    if vn1 >= 0.0f && vn2 >= 0.0f {
                        // Resubstitute for the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = normal * d.x
                        P2 POD b2Vec2 = normal * d.y
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y
                        break
                    }

                    // No solution, give up. This is hit sometimes, but it doesn't seem to matter.
                    break
                }
            }

            this.m_velocities[indexA].v = vA
            this.m_velocities[indexA].w = wA
            this.m_velocities[indexB].v = vB
            this.m_velocities[indexB].w = wB
        }
    }

    func StoreImpulses() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i
            manifold *b2Manifold = this.m_contacts[vc.contactIndex].GetManifold()

            for(j int = 0; j < vc.pointCount; ++j){
                manifold.points[j].normalImpulse = vc.points[j].normalImpulse
                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse
            }
        }
    }

    // Sequential solver.
    func SolvePositionConstraints() bool {
        minSeparation float = 0.0f

        for(i int = 0; i < this.m_count; ++i){
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            indexA int = pc.indexA
            indexB int = pc.indexB
            localCenterA POD b2Vec2 = pc.localCenterA
            mA float = pc.invMassA
            iA float = pc.invIA
            localCenterB POD b2Vec2 = pc.localCenterB
            mB float = pc.invMassB
            iB float = pc.invIB
            pointCount int = pc.pointCount

            cA POD b2Vec2 = this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a

            // Solve normal constraints
            for(j int = 0; j < pointCount; ++j){
                xfA, xfB POD b2Transform = undef
                xfA.q.Set(aA)
                xfB.q.Set(aB)
                xfA.p = cA - b2Mul(xfA.q, localCenterA)
                xfB.p = cB - b2Mul(xfB.q, localCenterB)

                psm POD b2PositionSolverManifold = undef
                psm.Initialize(pc, &xfA, &xfB, j)
                normal POD b2Vec2 = psm.normal

                point POD b2Vec2 = psm.point
                separation float = psm.separation

                rA POD b2Vec2 = point - cA
                rB POD b2Vec2 = point - cB

                // Track max constraint error.
                minSeparation = b2Min(minSeparation, separation)

                // Prevent large corrections and allow slop.
                C float = b2Clamp(b2_baumgarte * (separation + b2_linearSlop), 0.0f - b2_maxLinearCorrection, 0.0f)

                // Compute the effective mass.
                rnA float = b2Cross(rA, normal)
                rnB float = b2Cross(rB, normal)
                K float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                // Compute normal impulse
                impulse float = K > 0.0f ? - C / K : 0.0f

                P POD b2Vec2 = impulse * normal

                cA.SubtractAssign(mA * P)
                aA -= iA * b2Cross(rA, P)

                cB.AddAssign(mB * P)
                aB += iB * b2Cross(rB, P)
            }

            this.m_positions[indexA].c = cA
            this.m_positions[indexA].a = aA

            this.m_positions[indexB].c = cB
            this.m_positions[indexB].a = aB
        }

        // We can't expect minSpeparation >= -b2_linearSlop because we don't
        // push the separation above -b2_linearSlop.
        return minSeparation >= -3.0f * b2_linearSlop
    }

    func SolveTOIPositionConstraints(toiIndexA, toiIndexB int) bool {
        minSeparation float = 0.0f

        for(i int = 0; i < this.m_count; ++i){
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            indexA int = pc.indexA
            indexB int = pc.indexB
            localCenterA POD b2Vec2 = pc.localCenterA
            localCenterB POD b2Vec2 = pc.localCenterB
            pointCount int = pc.pointCount

            mA float = 0.0f
            iA float = 0.0f
            if indexA == toiIndexA || indexA == toiIndexB {
                mA = pc.invMassA
                iA = pc.invIA
            }

            mB float = 0.0f
            iB float = 0.0f
            if indexB == toiIndexA || indexB == toiIndexB {
                mB = pc.invMassB
                iB = pc.invIB
            }

            cA POD b2Vec2 = this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a

            // Solve normal constraints
            for(j int = 0; j < pointCount; ++j {
                xfA, xfB POD b2Transform = undef
                xfA.q.Set(aA)
                xfB.q.Set(aB)
                xfA.p = cA - b2Mul(xfA.q, localCenterA)
                xfB.p = cB - b2Mul(xfB.q, localCenterB)

                psm POD b2PositionSolverManifold = undef
                psm.Initialize(pc, &xfA, &xfB, j)
                normal POD b2Vec2 = psm.normal

                point POD b2Vec2 = psm.point
                separation float = psm.separation

                rA POD b2Vec2 = point - cA
                rB POD b2Vec2 = point - cB

                // Track max constraint error.
                minSeparation = b2Min(minSeparation, separation)

                // Prevent large corrections and allow slop.
                C float = b2Clamp(b2_toiBaumgarte * (separation + b2_linearSlop), 0.0f - b2_maxLinearCorrection, 0.0f)

                // Compute the effective mass.
                rnA float = b2Cross(rA, normal)
                rnB float = b2Cross(rB, normal)
                K float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                // Compute normal impulse
                impulse float = K > 0.0f ? - C / K : 0.0f

                P POD b2Vec2 = impulse * normal

                cA.SubtractAssign(mA * P)
                aA -= iA * b2Cross(rA, P)

                cB.AddAssign(mB * P)
                aB += iB * b2Cross(rB, P)
            }

            this.m_positions[indexA].c = cA
            this.m_positions[indexA].a = aA

            this.m_positions[indexB].c = cB
            this.m_positions[indexB].a = aB
        }

        // We can't expect minSpeparation >= -b2_linearSlop because we don't
        // push the separation above -b2_linearSlop.
        return minSeparation >= -1.5f * b2_linearSlop
    }
}

func b2ContactSolver(out uninitialized *b2ContactSolver, definition *b2ContactSolverDef) void {
    uninitialized.m_step = definition.step
    uninitialized.m_allocator = definition.allocator
    uninitialized.m_count = definition.count
    uninitialized.m_positionConstraints = uninitialized.m_allocator.Allocate(uninitialized.m_count * sizeof b2ContactPositionConstraint) as *b2ContactPositionConstraint
    uninitialized.m_velocityConstraints = uninitialized.m_allocator.Allocate(uninitialized.m_count * sizeof b2ContactVelocityConstraint) as *b2ContactVelocityConstraint
    uninitialized.m_positions = definition.positions
    uninitialized.m_velocities = definition.velocities
    uninitialized.m_contacts = definition.contacts

    // Initialize position independent portions of the constraints.
    for(i int = 0; i < uninitialized.m_count; ++i){
        contact *b2Contact = uninitialized.m_contacts[i]

        fixtureA *b2Fixture = contact.m_fixtureA
        fixtureB *b2Fixture = contact.m_fixtureB
        shapeA *b2Shape = fixtureA.GetShape()
        shapeB *b2Shape = fixtureB.GetShape()
        radiusA float = shapeA.m_radius
        radiusB float = shapeB.m_radius
        bodyA *b2Body = fixtureA.GetBody()
        bodyB *b2Body = fixtureB.GetBody()
        manifold *b2Manifold = contact.GetManifold()

        pointCount int = manifold.pointCount
        b2Assert(pointCount > 0, #get __file__, #get __line__, 'b2Assert(pointCount > 0)')

        vc *b2ContactVelocityConstraint = uninitialized.m_velocityConstraints at i
        vc.friction = contact.m_friction
        vc.restitution = contact.m_restitution
        vc.threshold = contact.m_restitutionThreshold
        vc.tangentSpeed = contact.m_tangentSpeed
        vc.indexA = bodyA.m_islandIndex
        vc.indexB = bodyB.m_islandIndex
        vc.invMassA = bodyA.m_invMass
        vc.invMassB = bodyB.m_invMass
        vc.invIA = bodyA.m_invI
        vc.invIB = bodyB.m_invI
        vc.contactIndex = i
        vc.pointCount = pointCount
        vc.K.SetZero()
        vc.normalMass.SetZero()

        pc *b2ContactPositionConstraint = uninitialized.m_positionConstraints at i
        pc.indexA = bodyA.m_islandIndex
        pc.indexB = bodyB.m_islandIndex
        pc.invMassA = bodyA.m_invMass
        pc.invMassB = bodyB.m_invMass
        pc.localCenterA = bodyA.m_sweep.localCenter
        pc.localCenterB = bodyB.m_sweep.localCenter
        pc.invIA = bodyA.m_invI
        pc.invIB = bodyB.m_invI
        pc.localNormal = manifold.localNormal
        pc.localPoint = manifold.localPoint
        pc.pointCount = pointCount
        pc.radiusA = radiusA
        pc.radiusB = radiusB
        pc.type = manifold.type

        for(j int = 0; j < pointCount; ++j){
            cp *b2ManifoldPoint = manifold.points at j
            vcp *b2VelocityConstraintPoint = vc.points at j
    
            if uninitialized.m_step.warmStarting {
                vcp.normalImpulse = uninitialized.m_step.dtRatio * cp.normalImpulse
                vcp.tangentImpulse = uninitialized.m_step.dtRatio * cp.tangentImpulse
            } else {
                vcp.normalImpulse = 0.0f
                vcp.tangentImpulse = 0.0f
            }

            vcp.rA.SetZero()
            vcp.rB.SetZero()
            vcp.normalMass = 0.0f
            vcp.tangentMass = 0.0f
            vcp.velocityBias = 0.0f

            pc.localPoints[j] = cp.localPoint
        }
    }
}

// ----------------------------------------------------

b2_contact_solver\g_blockSolve bool = true

struct b2ContactPositionConstraint (
    localPoints /*b2_maxManifoldPoints*/ 2 b2Vec2,
    localNormal b2Vec2,
    localPoint b2Vec2,
    indexA int,
    indexB int,
    invMassA, invMassB float,
    localCenterA, localCenterB b2Vec2,
    invIA, invIB float,
    type b2ManifoldType,
    radiusA, radiusB float,
    pointCount int
)

struct b2PositionSolverManifold (normal, point b2Vec2, separation float) {
    func Initialize(pc *b2ContactPositionConstraint, in xfA, xfB *b2Transform, index int) void {
        b2Assert(pc.pointCount > 0, #get __file__, #get __line__, 'b2Assert(pc.pointCount > 0)')

        switch pc.type {
        case b2ManifoldType::e_circles
            pointA POD b2Vec2 = POD b2Mul(xfA, pc.localPoint)
            pointB POD b2Vec2 = POD b2Mul(xfB, pc.localPoints[0])
            this.normal = pointB - pointA
            this.normal.Normalize()
            this.point = 0.5f * (pointA + pointB)
            this.separation = b2Dot(pointB - pointA, this.normal) - pc.radiusA - pc.radiusB
            
        case b2ManifoldType::e_faceA
            this.normal = POD b2Mul(xfA.q, pc.localNormal)
            planePoint POD b2Vec2 = POD b2Mul(xfA, pc.localPoint)

            clipPoint POD b2Vec2 = POD b2Mul(xfB, pc.localPoints[index])
            this.separation = b2Dot(clipPoint - planePoint, this.normal) - pc.radiusA - pc.radiusB
            this.point = clipPoint
            
        case b2ManifoldType::e_faceB
            this.normal = b2Mul(xfB.q, pc.localNormal)
            planePoint POD b2Vec2 = POD b2Mul(xfB, pc.localPoint)

            clipPoint POD b2Vec2 = POD b2Mul(xfA, pc.localPoints[index])
            this.separation = b2Dot(clipPoint - planePoint, this.normal) - pc.radiusA - pc.radiusB
            this.point = clipPoint

            // Ensure normal points from A to B
            this.normal = this.normal.Negated()
		}
	}
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/*
Position Correction Notes
=========================
I tried the several algorithms for position correction of the 2D revolute joint.
I looked at these systems:
- simple pendulum (1m diameter sphere on massless 5m stick) with initial angular velocity of 100 rad/s.
- suspension bridge with 30 1m long planks of length 1m.
- multi-link chain with 30 1m long links.
Here are the algorithms:
Baumgarte - A fraction of the position error is added to the velocity error. There is no
separate position solver.
Pseudo Velocities - After the velocity solver and position integration,
the position error, Jacobian, and effective mass are recomputed. Then
the velocity constraints are solved with pseudo velocities and a fraction
of the position error is added to the pseudo velocity error. The pseudo
velocities are initialized to zero and there is no warm-starting. After
the position solver, the pseudo velocities are added to the positions.
This is also called the First Order World method or the Position LCP method.
Modified Nonlinear Gauss-Seidel (NGS) - Like Pseudo Velocities except the
position error is re-computed for each constraint and the positions are updated
after the constraint is solved. The radius vectors (aka Jacobians) are
re-computed too (otherwise the algorithm has horrible instability). The pseudo
velocity states are not needed because they are effectively zero at the beginning
of each iteration. Since we have the current position error, we allow the
iterations to terminate early if the error becomes smaller than b2_linearSlop.
Full NGS or just NGS - Like Modified NGS except the effective mass are re-computed
each time a constraint is solved.
Here are the results:
Baumgarte - this is the cheapest algorithm but it has some stability problems,
especially with the bridge. The chain links separate easily close to the root
and they jitter as they struggle to pull together. This is one of the most common
methods in the field. The big drawback is that the position correction artificially
affects the momentum, thus leading to instabilities and false bounce. I used a
bias factor of 0.2. A larger bias factor makes the bridge less stable, a smaller
factor makes joints and contacts more spongy.
Pseudo Velocities - the is more stable than the Baumgarte method. The bridge is
stable. However, joints still separate with large angular velocities. Drag the
simple pendulum in a circle quickly and the joint will separate. The chain separates
easily and does not recover. I used a bias factor of 0.2. A larger value lead to
the bridge collapsing when a heavy cube drops on it.
Modified NGS - this algorithm is better in some ways than Baumgarte and Pseudo
Velocities, but in other ways it is worse. The bridge and chain are much more
stable, but the simple pendulum goes unstable at high angular velocities.
Full NGS - stable in all tests. The joints display good stiffness. The bridge
still sags, but this is better than infinite forces.
Recommendations
Pseudo Velocities are not really worthwhile because the bridge and chain cannot
recover from joint separation. In other cases the benefit over Baumgarte is small.
Modified NGS is not a robust method for the revolute joint due to the violent
instability seen in the simple pendulum. Perhaps it is viable with other constraint
types, especially scalar constraints where the effective mass is a scalar.
This leaves Baumgarte and Full NGS. Baumgarte has small, but manageable instabilities
and is very fast. I don't think we can escape Baumgarte, especially in highly
demanding cases where high constraint fidelity is not needed.
Full NGS is robust and easy on the eyes. I recommend this as an option for
higher fidelity simulation and certainly for suspension bridges and long chains.
Full NGS might be a good choice for ragdolls, especially motorized ragdolls where
joint separation can be problematic. The number of NGS iterations can be reduced
for better performance without harming robustness much.
Each joint in a can be handled differently in the position solver. So I recommend
a system where the user can select the algorithm on a per joint basis. I would
probably default to the slower Full NGS and let the user select the faster
Baumgarte method in performance critical scenarios.
*/

/*
Cache Performance
The Box2D solvers are dominated by cache misses. Data structures are designed
to increase the number of cache hits. Much of misses are due to random access
to body data. The constraint structures are iterated over linearly, which leads
to few cache misses.
The bodies are not accessed during iteration. Instead read only data, such as
the mass values are stored with the constraints. The mutable data are the constraint
impulses and the bodies velocities/positions. The impulses are held inside the
constraint structures. The body velocities/positions are held in compact, temporary
arrays to increase the number of cache hits. Linear and angular velocity are
stored in a single array since multiple arrays lead to multiple misses.
*/

/*
2D Rotation
R = [cos(theta) -sin(theta)]
    [sin(theta) cos(theta) ]
thetaDot = omega
Let q1 = cos(theta), q2 = sin(theta).
R = [q1 -q2]
    [q2  q1]
q1Dot = -thetaDot * q2
q2Dot = thetaDot * q1
q1_new = q1_old - dt * w * q2
q2_new = q2_old + dt * w * q1
then normalize.
This might be faster than computing sin+cos.
However, we can compute sin+cos of the same angle fast.
*/



/*
REQUIRES:
    class b2Contact;
    class b2Joint;
    class b2StackAllocator;
    class b2ContactListener;
    struct b2ContactVelocityConstraint;
    struct b2Profile;
*/

/// This is an internal class.
struct b2Island (
    m_allocator *b2StackAllocator,
    m_listener *b2ContactListener,

    m_bodies **b2Body,
    m_contacts **b2Contact,
    m_joints **b2Joint,

    m_positions *b2Position,
    m_velocities *b2Velocity,

    m_bodyCount int,
    m_jointCount int,
    m_contactCount int,

    m_bodyCapacity int,
    m_contactCapacity int,
    m_jointCapacity int
) {
    func __defer__ {
        // Warning: the order should reverse the constructor order.
        this.m_allocator.Free(this.m_positions)
        this.m_allocator.Free(this.m_velocities)
        this.m_allocator.Free(this.m_joints)
        this.m_allocator.Free(this.m_contacts)
        this.m_allocator.Free(this.m_bodies)
    }

    func Clear() void {
        this.m_bodyCount = 0
        this.m_contactCount = 0
        this.m_jointCount = 0
    }

    func Solve(profile *b2Profile, in step *b2TimeStep, in gravity *b2Vec2, allowSleep bool) void {
        timer POD b2Timer = b2Timer()

        h float = step.dt

        // Integrate velocities and apply damping. Initialize the body state.
        for(i int = 0; i < this.m_bodyCount; ++i){
            b *b2Body = this.m_bodies[i]

            c POD b2Vec2 = b.m_sweep.c
            a float = b.m_sweep.a
            v POD b2Vec2 = b.m_linearVelocity
            w float = b.m_angularVelocity

            // Store positions for continuous collision.
            b.m_sweep.c0 = b.m_sweep.c
            b.m_sweep.a0 = b.m_sweep.a

            if b.m_type == b2_dynamicBody {
                // Integrate velocities.
                v.AddAssign(h * b.m_invMass * (b.m_gravityScale * b.m_mass * *gravity + b.m_force))
                w += h * b.m_invI * b.m_torque

                // Apply damping.
                // ODE: dv/dt + c * v = 0
                // Solution: v(t) = v0 * exp(-c * t)
                // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)
                // v2 = exp(-c * dt) * v1
                // Pade approximation:
                // v2 = v1 * 1 / (1 + c * dt)
                v = v * (1.0f / (1.0f + h * b.m_linearDamping))
                w *= 1.0f / (1.0f + h * b.m_angularDamping)
            }

            this.m_positions[i].c = c
            this.m_positions[i].a = a
            this.m_velocities[i].v = v
            this.m_velocities[i].w = w
        }

        timer.Reset()

        // Solver data
        solverData POD b2SolverData = undef
        solverData.step = *step
        solverData.positions = this.m_positions
        solverData.velocities = this.m_velocities

        // Initialize velocity constraints.
        contactSolverDef POD b2ContactSolverDef = undef
        contactSolverDef.step = *step
        contactSolverDef.contacts = this.m_contacts
        contactSolverDef.count = this.m_contactCount
        contactSolverDef.positions = this.m_positions
        contactSolverDef.velocities = this.m_velocities
        contactSolverDef.allocator = this.m_allocator

        contactSolver b2ContactSolver = undef
        b2ContactSolver(&contactSolver, &contactSolverDef)
        contactSolver.InitializeVelocityConstraints();

        if step.warmStarting {
            contactSolver.WarmStart()
        }
        
        for(i int = 0; i < this.m_jointCount; ++i){
            this.m_joints[i].InitVelocityConstraints(&solverData)
        }

        profile.solveInit = timer.GetMilliseconds()

        // Solve velocity constraints
        timer.Reset()
        for(i int = 0; i < step.velocityIterations; ++i){
            for(j int = 0; j < this.m_jointCount; ++j){
                this.m_joints[j].SolveVelocityConstraints(&solverData)
            }

            contactSolver.SolveVelocityConstraints()
        }

        // Store impulses for warm starting
        contactSolver.StoreImpulses()
        profile.solveVelocity = timer.GetMilliseconds()

        // Integrate positions
        for(i int = 0; i < this.m_bodyCount; ++i){
            c POD b2Vec2 = this.m_positions[i].c
            a float = this.m_positions[i].a
            v POD b2Vec2 = this.m_velocities[i].v
            w float = this.m_velocities[i].w

            // Check for large velocities
            translation POD b2Vec2 = h * v
            if b2Dot(translation, translation) > b2_maxTranslationSquared {
                ratio float = b2_maxTranslation / translation.Length()
                v.MultiplyAssign(ratio)
            }

            rotation float = h * w
            if rotation * rotation > b2_maxRotationSquared {
                ratio float = b2_maxRotation / b2Abs(rotation)
                w *= ratio
            }

            // Integrate
            c.AddAssign(h * v)
            a += h * w

            this.m_positions[i].c = c
            this.m_positions[i].a = a
            this.m_velocities[i].v = v
            this.m_velocities[i].w = w
        }

        // Solve position constraints
        timer.Reset()
        positionSolved bool = false
        for(i int = 0; i < step.positionIterations; ++i){
            contactsOkay bool = contactSolver.SolvePositionConstraints()

            jointsOkay bool = true
            for(j int = 0; j < this.m_jointCount; ++j){
                jointOkay bool = this.m_joints[j].SolvePositionConstraints(&solverData)
                jointsOkay = jointsOkay && jointOkay
            }

            if contactsOkay && jointsOkay {
                // Exit early if the position errors are small.
                positionSolved = true
                break
            }
        }

        // Copy state buffers back to the bodies
        for(i int = 0; i < this.m_bodyCount; ++i){
            body *b2Body = this.m_bodies[i]
            body.m_sweep.c = this.m_positions[i].c
            body.m_sweep.a = this.m_positions[i].a
            body.m_linearVelocity = this.m_velocities[i].v
            body.m_angularVelocity = this.m_velocities[i].w
            body.SynchronizeTransform()
        }

        profile.solvePosition = timer.GetMilliseconds()

        this.Report(contactSolver.m_velocityConstraints)

        if allowSleep {
            minSleepTime float = b2_maxFloat

            const linTolSqr float = b2_linearSleepTolerance * b2_linearSleepTolerance
            const angTolSqr float = b2_angularSleepTolerance * b2_angularSleepTolerance

            for(i int = 0; i < this.m_bodyCount; ++i){
                b *b2Body = this.m_bodies[i]
                if b.GetType() == b2_staticBody, continue

                if ( (b.m_flags & b2Body\e_autoSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr ){
                    b.m_sleepTime = 0.0f
                    minSleepTime = 0.0f
                } else {
                    b.m_sleepTime += h
                    minSleepTime = b2Min(minSleepTime, b.m_sleepTime)
                }
            }

            if minSleepTime >= b2_timeToSleep && positionSolved {
                for(i int = 0; i < this.m_bodyCount; ++i) {
                    b *b2Body = this.m_bodies[i]
                    b.SetAwake(false)
                }
            }
        }
    }

    func SolveTOI(in subStep *b2TimeStep, toiIndexA, toiIndexB int) void {
        b2Assert(toiIndexA < this.m_bodyCount, #get __file__, #get __line__, 'b2Assert(toiIndexA < this.m_bodyCount)')
        b2Assert(toiIndexB < this.m_bodyCount, #get __file__, #get __line__, 'b2Assert(toiIndexB < this.m_bodyCount)')

        // Initialize the body state.
        for(i int = 0; i < this.m_bodyCount; ++i){
            b *b2Body = this.m_bodies[i]
            this.m_positions[i].c = b.m_sweep.c
            this.m_positions[i].a = b.m_sweep.a
            this.m_velocities[i].v = b.m_linearVelocity
            this.m_velocities[i].w = b.m_angularVelocity
        }

        contactSolverDef POD b2ContactSolverDef = undef
        contactSolverDef.contacts = this.m_contacts
        contactSolverDef.count = this.m_contactCount
        contactSolverDef.allocator = this.m_allocator
        contactSolverDef.step = *subStep
        contactSolverDef.positions = this.m_positions
        contactSolverDef.velocities = this.m_velocities

        contactSolver b2ContactSolver = undef
        b2ContactSolver(&contactSolver, &contactSolverDef)

        // Solve position constraints.
        for(i int = 0; i < subStep.positionIterations; ++i){
            contactsOkay bool = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB)
            if contactsOkay, break
        }

        // UNUSED CODE
        /*
        #if false
        // Is the new position really safe?
        for(i int = 0; i < this.m_contactCount; ++i){
            c *b2Contact = this.m_contacts[i]
            fA *b2Fixture = c.GetFixtureA()
            fB *b2Fixture = c.GetFixtureB()

            bA *b2Body = fA.GetBody()
            bB *b2Body = fB.GetBody()

            indexA int = c.GetChildIndexA()
            indexB int = c.GetChildIndexB()

            input b2DistanceInput
            input.proxyA.Set(fA.GetShape(), indexA)
            input.proxyB.Set(fB.GetShape(), indexB)
            input.transformA = bA.GetTransform()
            input.transformB = bB.GetTransform()
            input.useRadii = false

            output b2DistanceOutput
            cache b2SimplexCache
            cache.count = 0
            b2Distance(&output, &cache, &input)

            if output.distance == 0 || cache.count == 3 {
                cache.count += 0
            }
        }
        #end
        */

        // Leap of faith to new safe state.
        this.m_bodies[toiIndexA].m_sweep.c0 = this.m_positions[toiIndexA].c
        this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a
        this.m_bodies[toiIndexB].m_sweep.c0 = this.m_positions[toiIndexB].c
        this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a

        // No warm starting is needed for TOI events because warm
        // starting impulses were applied in the discrete solver.
        contactSolver.InitializeVelocityConstraints()

        // Solve velocity constraints.
        for(i int = 0; i < subStep.velocityIterations; ++i){
            contactSolver.SolveVelocityConstraints()
        }

        // Don't store the TOI contact forces for warm starting
        // because they can be quite large.
        h float = subStep.dt

        // Integrate positions
        for(i int = 0; i < this.m_bodyCount; ++i){
            c b2Vec2 = this.m_positions[i].c
            a float = this.m_positions[i].a
            v b2Vec2 = this.m_velocities[i].v
            w float = this.m_velocities[i].w

            // Check for large velocities
            translation POD b2Vec2 = h * v
            if b2Dot(translation, translation) > b2_maxTranslationSquared {
                ratio float = b2_maxTranslation / translation.Length()
                v.MultiplyAssign(ratio)
            }

            rotation float = h * w
            if rotation * rotation > b2_maxRotationSquared {
                ratio float = b2_maxRotation / b2Abs(rotation)
                w *= ratio
            }

            // Integrate
            c.AddAssign(h * v)
            a += h * w

            this.m_positions[i].c = c
            this.m_positions[i].a = a
            this.m_velocities[i].v = v
            this.m_velocities[i].w = w

            // Sync bodies
            body *b2Body = this.m_bodies[i]
            body.m_sweep.c = c
            body.m_sweep.a = a
            body.m_linearVelocity = v
            body.m_angularVelocity = w
            body.SynchronizeTransform()
        }

        this.Report(contactSolver.m_velocityConstraints)
    }

    func Add(inout body *b2Body) void {
        b2Assert(this.m_bodyCount < this.m_bodyCapacity, #get __file__, #get __line__, 'b2Assert(this.m_bodyCount < this.m_bodyCapacity)')
        body.m_islandIndex = this.m_bodyCount
        this.m_bodies[this.m_bodyCount] = body
        ++this.m_bodyCount
    }

    func Add(contact *b2Contact) void {
        b2Assert(this.m_contactCount < this.m_contactCapacity, #get __file__, #get __line__, 'b2Assert(this.m_contactCount < this.m_contactCapacity)')
        this.m_contacts[this.m_contactCount++] = contact
    }

    func Add(joint *b2Joint) void {
        b2Assert(this.m_jointCount < this.m_jointCapacity, #get __file__, #get __line__, 'b2Assert(this.m_jointCount < this.m_jointCapacity)')
        this.m_joints[this.m_jointCount++] = joint
    }

    func Report(constraints *b2ContactVelocityConstraint) void {
        if this.m_listener == null, return

        for(i int = 0; i < this.m_contactCount; ++i){
            c *b2Contact = this.m_contacts[i]

            vc *b2ContactVelocityConstraint = constraints at i
            
            impulse POD b2ContactImpulse = undef
            impulse.count = vc.pointCount
            
            for(j int = 0; j < vc.pointCount; ++j){
                impulse.normalImpulses[j] = vc.points[j].normalImpulse
                impulse.tangentImpulses[j] = vc.points[j].tangentImpulse
            }

            this.m_listener.PostSolve(c, &impulse)
        }
    }
}

func b2Island(uninitialized *b2Island, bodyCapacity, contactCapacity, jointCapacity int, allocator *b2StackAllocator, listener *b2ContactListener) *b2Island {
    uninitialized.m_bodyCapacity = bodyCapacity
    uninitialized.m_contactCapacity = contactCapacity
    uninitialized.m_jointCapacity = jointCapacity
    uninitialized.m_bodyCount = 0
    uninitialized.m_contactCount = 0
    uninitialized.m_jointCount = 0

    uninitialized.m_allocator = allocator
    uninitialized.m_listener = listener

    uninitialized.m_bodies = uninitialized.m_allocator.Allocate(bodyCapacity * sizeof *b2Body) as **b2Body
    uninitialized.m_contacts = uninitialized.m_allocator.Allocate(contactCapacity * sizeof *b2Contact) as **b2Contact
    uninitialized.m_joints = uninitialized.m_allocator.Allocate(jointCapacity * sizeof *b2Joint) as **b2Joint

    uninitialized.m_velocities = uninitialized.m_allocator.Allocate(uninitialized.m_bodyCapacity * sizeof b2Velocity) as *b2Velocity
    uninitialized.m_positions = uninitialized.m_allocator.Allocate(uninitialized.m_bodyCapacity * sizeof b2Position) as *b2Position
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/*
REQUIRES:
    class b2Body;
    class b2Draw;
    class b2Joint;
    struct b2SolverData;
    class b2BlockAllocator;
*/

enum b2JointType (
    e_unknownJoint,
    e_revoluteJoint,
    e_prismaticJoint,
    e_distanceJoint,
    e_pulleyJoint,
    e_mouseJoint,
    e_gearJoint,
    e_wheelJoint,
    e_weldJoint,
    e_frictionJoint,
    e_ropeJoint,
    e_motorJoint
)

struct b2Jacobian (
    linear b2Vec2,
    angularA float,
    angularB float
)

/// A joint edge is used to connect bodies and joints together
/// in a joint graph where each body is a node and each joint
/// is an edge. A joint edge belongs to a doubly linked list
/// maintained in each attached body. Each joint has two joint
/// nodes, one for each attached body.
struct b2JointEdge (
    other *b2Body,     ///< provides quick access to the other body attached.
    joint *b2Joint,    ///< the joint
    prev *b2JointEdge, ///< the previous joint edge in the body's joint list
    next *b2JointEdge  ///< the next joint edge in the body's joint list
)

/// Joint definitions are used to construct joints.
struct b2JointDef (
    /// The joint type is set automatically for concrete joint types.
    type b2JointType,

    /// Use this to attach application specific data to your joints.
    userData b2JointUserData,

    /// The first attached body.
    bodyA *b2Body,

    /// The second attached body.
    bodyB *b2Body,

    /// Set this flag to true if the attached bodies should collide.
    collideConnected bool
)

func b2JointDef() b2JointDef {
    jd POD b2JointDef = undef
    jd.type = b2JointType::e_unknownJoint
    jd.bodyA = null
    jd.bodyB = null
    jd.collideConnected = false
    return jd
}

/// Utility to compute linear stiffness values from frequency and damping ratio
func b2LinearStiffness(out stiffness, damping *float, in frequencyHertz, dampingRatio float, in bodyA, bodyB *b2Body) void {
    massA float = bodyA.GetMass()
    massB float = bodyB.GetMass()
    mass float = undef

    if massA > 0.0f && massB > 0.0f {
        mass = massA * massB / (massA + massB)
    } else if massA > 0.0f {
        mass = massA
    } else {
        mass = massB
    }

    omega float = 2.0f * b2_pi * frequencyHertz
    *stiffness = mass * omega * omega
    *damping = 2.0f * mass * dampingRatio * omega
}

/// Utility to compute rotational stiffness values frequency and damping ratio
func b2AngularStiffness(out stiffness, damping *float, in frequencyHertz, dampingRatio float, in bodyA, bodyB *b2Body) void {
    IA float = bodyA.GetInertia()
    IB float = bodyB.GetInertia()
    I float = undef
    
    if IA > 0.0f && IB > 0.0f {
        I = IA * IB / (IA + IB)
    } else if IA > 0.0f {
        I = IA
    } else {
        I = IB
    }

    omega float = 2.0f * b2_pi * frequencyHertz
    *stiffness = I * omega * omega
    *damping = 2.0f * I * dampingRatio * omega
}

/// The base joint class. Joints are used to constraint two bodies together in
/// various fashions. Some joints also feature limits and motors.
struct b2Joint (
    vtable b2JointVTable,

    m_type b2JointType,
    m_prev *b2Joint,
    m_next *b2Joint,
    m_edgeA b2JointEdge,
    m_edgeB b2JointEdge,
    m_bodyA *b2Body,
    m_bodyB *b2Body,

    m_index int,

    m_islandFlag bool,
    m_collideConnected bool,

    m_userData b2JointUserData
) {
    /// Get the type of the concrete joint.
    func GetType() b2JointType {
        return this.m_type
    }

    /// Get the first body attached to this joint.
    func GetBodyA() *b2Body {
        return this.m_bodyA
    }

    /// Get the second body attached to this joint.
    func GetBodyB() *b2Body {
        return this.m_bodyB
    }

    /// Get the anchor point on bodyA in world coordinates.
    // virtual b2Vec2 GetAnchorA() const = 0;
    func GetAnchorA() b2Vec2 {
        f func(ptr) b2Vec2 = this.vtable.f_GetAnchorA as func(ptr) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetAnchorA')
            return b2Vec2()
        }
        
        return f(this)
    }

    /// Get the anchor point on bodyB in world coordinates.
    // virtual b2Vec2 GetAnchorB() const = 0;
    func GetAnchorB() b2Vec2 {
        f func(ptr) b2Vec2 = this.vtable.f_GetAnchorB as func(ptr) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetAnchorB')
            return b2Vec2()
        }
        
        return f(this)
    }

    /// Get the reaction force on bodyB at the joint anchor in Newtons.
    // virtual b2Vec2 GetReactionForce(float inv_dt) const = 0;
    func GetReactionForce(inv_dt float) b2Vec2 {
        f func(ptr, float) b2Vec2 = this.vtable.f_GetReactionForce as func(ptr, float) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetReactionForce')
            return b2Vec2()
        }
        
        return f(this, inv_dt)
    }

    /// Get the reaction torque on bodyB in N*m.
    // virtual float GetReactionTorque(float inv_dt) const = 0;
    func GetReactionTorque(inv_dt float) float {
        f func(ptr, float) float = this.vtable.f_GetReactionTorque as func(ptr, float) float
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetReactionTorque')
            return 0.0f
        }
        
        return f(this, inv_dt)
    }

    /// Get the next joint the world joint list.
    func GetNext() *b2Joint {
        return this.m_next
    }

    /// Get the user data pointer.
    func GetUserData() *b2JointUserData {
        return &this.m_userData
    }

    /// Short-cut function to determine if either body is enabled.
    func IsEnabled() bool {
        return this.m_bodyA.IsEnabled() && this.m_bodyB.IsEnabled()
    }

    /// Get collide connected.
    /// Note: modifying the collide connect flag won't work correctly because
    /// the flag is only checked when fixture AABBs begin to overlap.
    func GetCollideConnected() bool {
        return this.m_collideConnected
    }

    /// Dump this joint to the log file.
    // virtual void Dump() { b2Dump('// Dump is not supported for this joint type.\n'); }
    func Dump() void {
        f func(ptr) void = this.vtable.f_Dump as func(ptr) void

        unless f {
            b2Dump('// Dump is not supported for this joint type.\n')
            return
        }

        f(this)
    }

    /// Shift the origin for any points stored in world coordinates.
    // virtual void ShiftOrigin(const b2Vec2& newOrigin) { B2_NOT_USED(newOrigin);  }
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        f func(ptr, *b2Vec2) void = this.vtable.f_ShiftOrigin as func(ptr, *b2Vec2) void
        if f, f(this, newOrigin)
    }

    /// Debug draw this joint
    // virtual void Draw(b2Draw* draw) const;
    func Draw(draw *b2Draw) void {
        f func(ptr, *b2Draw) void = this.vtable.f_Draw as func(ptr, *b2Draw) void
        if f, f(this, draw); return

        // Otherwise, default implementation

        xf1 *b2Transform = this.m_bodyA.GetTransform()
        xf2 *b2Transform = this.m_bodyB.GetTransform()
        x1 POD b2Vec2 = xf1.p
        x2 POD b2Vec2 = xf2.p
        p1 POD b2Vec2 = this.GetAnchorA()
        p2 POD b2Vec2 = this.GetAnchorB()

        color POD b2Color = b2Color(0.5f, 0.8f, 0.8f)

        switch this.m_type {
        case b2JointType::e_distanceJoint
            draw.DrawSegment(&p1, &p2, &color)

        case b2JointType::e_pulleyJoint
            pulley *b2PulleyJoint = this as *b2PulleyJoint
            s1 POD b2Vec2 = pulley.GetGroundAnchorA()
            s2 POD b2Vec2 = pulley.GetGroundAnchorB()
            draw.DrawSegment(&s1, &p1, &color)
            draw.DrawSegment(&s2, &p2, &color)
            draw.DrawSegment(&s1, &s2, &color)

        case b2JointType::e_mouseJoint
            c POD b2Color = undef
            c.Set(0.0f, 1.0f, 0.0f)
            draw.DrawPoint(&p1, 4.0f, &c)
            draw.DrawPoint(&p2, 4.0f, &c)

            c.Set(0.8f, 0.8f, 0.8f)
            draw.DrawSegment(&p1, &p2, &c)

        default
            draw.DrawSegment(&x1, &p1, &color)
            draw.DrawSegment(&p1, &p2, &color)
            draw.DrawSegment(&x2, &p2, &color)
        }
    }

    // protected: virtual void InitVelocityConstraints(const b2SolverData& data) = 0;
    func InitVelocityConstraints(data *b2SolverData) void {
        f func(ptr, *b2SolverData) void = this.vtable.f_InitVelocityConstraints as func(ptr, *b2SolverData) void
        if f, f(this, data)
        else b2_common\missing_vtable_entry('b2Joint', 'InitVelocityConstraints')
    }

    // protected: virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;
    func SolveVelocityConstraints(data *b2SolverData) void {
        f func(ptr, *b2SolverData) void = this.vtable.f_SolveVelocityConstraints as func(ptr, *b2SolverData) void
        if f, f(this, data)
        else b2_common\missing_vtable_entry('b2Joint', 'SolveVelocityConstraints')
    }
    
    // protected: virtual void SolvePositionConstraints(const b2SolverData& data) = 0;
    func SolvePositionConstraints(data *b2SolverData) bool {
        f func(ptr, *b2SolverData) bool = this.vtable.f_SolvePositionConstraints as func(ptr, *b2SolverData) bool

        if f {
            return f(this, data)
        } else b2_common\missing_vtable_entry('b2Joint', 'SolvePositionConstraints')

        return false
    }
}

struct b2JointVTable (
    f_defer,       // (optional)

    // protected: virtual void InitVelocityConstraints(const b2SolverData& data) = 0;
    f_InitVelocityConstraints,

    // protected: virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;
    f_SolveVelocityConstraints,

    // This returns true if the position errors are within tolerance.
    // protected: virtual bool SolvePositionConstraints(const b2SolverData& data) = 0;
    f_SolvePositionConstraints,

    f_GetAnchorA,
    f_GetAnchorB,
    f_GetReactionForce,
    f_GetReactionTorque,
    f_Dump,        // (optional)
    f_ShiftOrigin, // (optional)
    f_Draw ptr     // (optional)
)
func b2JointVTable(_ *$Impl, use_defer bool) b2JointVTable {
    v POD b2JointVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_InitVelocityConstraints = func &InitVelocityConstraints(*$Impl, *b2SolverData) as ptr
    v.f_SolveVelocityConstraints = func &SolveVelocityConstraints(*$Impl, *b2SolverData) as ptr
    v.f_SolvePositionConstraints = func &SolvePositionConstraints(*$Impl, *b2SolverData) as ptr 
    v.f_SolvePositionConstraints = func &SolvePositionConstraints(*$Impl, *b2SolverData) as ptr
    v.f_GetAnchorA = func &GetAnchorA(*$Impl) as ptr
    v.f_GetAnchorB = func &GetAnchorB(*$Impl) as ptr
    v.f_GetReactionForce = func &GetReactionForce(*$Impl, float) as ptr
    v.f_GetReactionTorque = func &GetReactionTorque(*$Impl, float) as ptr
    v.f_Dump = func null &Dump(*$Impl) as ptr
    v.f_ShiftOrigin = func null &ShiftOrigin(*$Impl, *b2Vec2) as ptr
    v.f_Draw = func null &Draw(*$Impl, *b2Draw) as ptr
    return v
}

func b2Joint(out uninitialized *$b2JointLike, in definition *b2JointDef) *b2Joint {
    b2Assert(definition.bodyA != definition.bodyB, #get __file__, #get __line__, 'b2Assert(definition.bodyA != definition.bodyB)')

    uninitialized.vtable = b2JointVTable(uninitialized, true)

    uninitialized.m_type = definition.type
    uninitialized.m_prev = null
    uninitialized.m_next = null
    uninitialized.m_bodyA = definition.bodyA
    uninitialized.m_bodyB = definition.bodyB
    uninitialized.m_index = 0
    uninitialized.m_collideConnected = definition.collideConnected
    uninitialized.m_islandFlag = false
    uninitialized.m_userData = definition.userData

    uninitialized.m_edgeA.joint = null
    uninitialized.m_edgeA.other = null
    uninitialized.m_edgeA.prev = null
    uninitialized.m_edgeA.next = null

    uninitialized.m_edgeB.joint = null
    uninitialized.m_edgeB.other = null
    uninitialized.m_edgeB.prev = null
    uninitialized.m_edgeB.next = null

    return uninitialized as *b2Joint
}

func b2Joint\Create(in definition *b2JointDef, allocator *b2BlockAllocator) *b2Joint {
    joint *b2Joint = null

    switch definition.type {
    case b2JointType::e_distanceJoint
        joint = b2Joint\CreateRaw\b2DistanceJoint(allocator.Allocate() ~> *b2DistanceJoint, definition as *b2DistanceJointDef) as *b2Joint

    case b2JointType::e_mouseJoint
        joint = b2Joint\CreateRaw\b2MouseJoint(allocator.Allocate() ~> *b2MouseJoint, definition as *b2MouseJointDef) as *b2Joint

    case b2JointType::e_prismaticJoint
        joint = b2Joint\CreateRaw\b2PrismaticJoint(allocator.Allocate() ~> *b2PrismaticJoint, definition as *b2PrismaticJointDef) as *b2Joint

    case b2JointType::e_revoluteJoint
        joint = b2Joint\CreateRaw\b2RevoluteJoint(allocator.Allocate() ~> *b2RevoluteJoint, definition as *b2RevoluteJointDef) as *b2Joint

    case b2JointType::e_pulleyJoint
        joint = b2Joint\CreateRaw\b2PulleyJoint(allocator.Allocate() ~> *b2PulleyJoint, definition as *b2PulleyJointDef) as *b2Joint

    case b2JointType::e_gearJoint
        joint = b2Joint\CreateRaw\b2GearJoint(allocator.Allocate() ~> *b2GearJoint, definition as *b2GearJointDef) as *b2Joint

    case b2JointType::e_wheelJoint
        joint = b2Joint\CreateRaw\b2WheelJoint(allocator.Allocate() ~> *b2WheelJoint, definition as *b2WheelJointDef) as *b2Joint

    case b2JointType::e_weldJoint
        joint = b2Joint\CreateRaw\b2WeldJoint(allocator.Allocate() ~> *b2WeldJoint, definition as *b2WeldJointDef) as *b2Joint
        
    case b2JointType::e_frictionJoint
        joint = b2Joint\CreateRaw\b2FrictionJoint(allocator.Allocate() ~> *b2FrictionJoint, definition as *b2FrictionJointDef) as *b2Joint

    case b2JointType::e_motorJoint
        joint = b2Joint\CreateRaw\b2MotorJoint(allocator.Allocate() ~> *b2MotorJoint, definition as *b2MotorJointDef) as *b2Joint

    default
        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
    }

    return joint
}

func b2Joint\Destroy(joint *b2Joint, allocator *b2BlockAllocator) void {
    joint.__defer__()

    switch joint.m_type {
    case b2JointType::e_distanceJoint,  allocator.Free(joint, sizeof b2DistanceJoint)
    case b2JointType::e_mouseJoint,     allocator.Free(joint, sizeof b2MouseJoint)
    case b2JointType::e_prismaticJoint, allocator.Free(joint, sizeof b2PrismaticJoint)
    case b2JointType::e_revoluteJoint,  allocator.Free(joint, sizeof b2RevoluteJoint)
    case b2JointType::e_pulleyJoint,    allocator.Free(joint, sizeof b2PulleyJoint)
    case b2JointType::e_gearJoint,      allocator.Free(joint, sizeof b2GearJoint)
    case b2JointType::e_wheelJoint,     allocator.Free(joint, sizeof b2WheelJoint)
    case b2JointType::e_weldJoint,      allocator.Free(joint, sizeof b2WeldJoint)
    case b2JointType::e_frictionJoint,  allocator.Free(joint, sizeof b2FrictionJoint)
    case b2JointType::e_motorJoint,     allocator.Free(joint, sizeof b2MotorJoint)
    default b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
	}
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Pulley:
// length1 = norm(p1 - s1)
// length2 = norm(p2 - s2)
// C0 = (length1 + ratio * length2)_initial
// C = C0 - (length1 + ratio * length2)
// u1 = (p1 - s1) / norm(p1 - s1)
// u2 = (p2 - s2) / norm(p2 - s2)
// Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))
// J = -[u1 cross(r1, u1) ratio * u2  ratio * cross(r2, u2)]
// K = J * invM * JT
//   = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 * cross(r2, u2)^2)

define b2_minPulleyLength = 2.0f

/// Pulley joint definition. This requires two ground anchors,
/// two dynamic body anchor points, and a pulley ratio.
struct b2PulleyJointDef (
    struct b2JointDef,

    /// The first ground anchor in world coordinates. This point never moves.
    groundAnchorA b2Vec2,

    /// The second ground anchor in world coordinates. This point never moves.
    groundAnchorB b2Vec2,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The a reference length for the segment attached to bodyA.
    lengthA float,

    /// The a reference length for the segment attached to bodyB.
    lengthB float,

    /// The pulley ratio, used to simulate a block-and-tackle.
    ratio float
) {
    /// Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.
    func Initialize(in bodyA, bodyB *b2Body, in groundAnchorA, groundAnchorB, anchorA, anchorB *b2Vec2, ratio float) void {
        this.bodyA = bodyA
        this.bodyB = bodyB
        this.groundAnchorA = *groundAnchorA
        this.groundAnchorB = *groundAnchorB
        this.localAnchorA = bodyA.GetLocalPoint(anchorA)
        this.localAnchorB = bodyB.GetLocalPoint(anchorB)
        dA POD b2Vec2 = POD *anchorA - *groundAnchorA
        this.lengthA = dA.Length()
        dB POD b2Vec2 = POD *anchorB - *groundAnchorB
        this.lengthB = dB.Length()
        this.ratio = ratio
        b2Assert(ratio > b2_epsilon, #get __file__, #get __line__, 'b2Assert(ratio > b2_epsilon)')
    }
}

func b2PulleyJointDef() b2PulleyJointDef {
    pjd POD b2PulleyJointDef = undef
    *cast *b2JointDef &pjd = b2JointDef()
    pjd.type = b2JointType::e_pulleyJoint
    pjd.groundAnchorA.Set(-1.0f, 1.0f)
    pjd.groundAnchorB.Set(1.0f, 1.0f)
    pjd.localAnchorA.Set(-1.0f, 0.0f)
    pjd.localAnchorB.Set(1.0f, 0.0f)
    pjd.lengthA = 0.0f
    pjd.lengthB = 0.0f
    pjd.ratio = 1.0f
    pjd.collideConnected = true
    return pjd
}

/// The pulley joint is connected to two bodies and two fixed ground points.
/// The pulley supports a ratio such that:
/// length1 + ratio * length2 <= constant
/// Yes, the force transmitted is scaled by the ratio.
/// Warning: the pulley joint can get a bit squirrelly by itself. They often
/// work better when combined with prismatic joints. You should also cover the
/// the anchor points with static shapes to prevent one side from going to
/// zero length.
struct b2PulleyJoint (
    struct b2Joint,

    m_groundAnchorA b2Vec2,
    m_groundAnchorB b2Vec2,
    m_lengthA float,
    m_lengthB float,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_constant float,
    m_ratio float,
    m_impulse float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_uA b2Vec2,
    m_uB b2Vec2,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_mass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        P POD b2Vec2 = POD this.m_impulse * this.m_uB
        return P * inv_dt
    }

    // (override)
    func GetReactionTorque(_inv_dt float) float {
        return 0.0f
    }

    /// Get the first ground anchor.
    func GetGroundAnchorA() b2Vec2 = this.m_groundAnchorA

    /// Get the second ground anchor.
    func GetGroundAnchorB() b2Vec2 = this.m_groundAnchorB

    /// Get the current length of the segment attached to bodyA.
    func GetLengthA() float = this.m_lengthA

    /// Get the current length of the segment attached to bodyB.
    func GetLengthB() float = this.m_lengthB

    /// Get the pulley ratio.
    func GetRatio() float = this.m_ratio

    /// Get the current length of the segment attached to bodyA.
    func GetCurrentLengthA() float {
        p POD b2Vec2 = POD this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
        s POD b2Vec2 = POD this.m_groundAnchorA
        d POD b2Vec2 = POD p - s
        return d.Length()
    }

    /// Get the current length of the segment attached to bodyB.
    func GetCurrentLengthB() float {
        p POD b2Vec2 = POD this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
        s POD b2Vec2 = POD this.m_groundAnchorB
        d POD b2Vec2 = POD p - s
        return d.Length()
    }

    /// Dump joint to dmLog
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2PulleyJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.groundAnchorA.Set(%hf, %hf);\n', this.m_groundAnchorA.x, this.m_groundAnchorA.y)
        b2Dump('  jd.groundAnchorB.Set(%hf, %hf);\n', this.m_groundAnchorB.x, this.m_groundAnchorB.y)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.lengthA = %hf;\n', this.m_lengthA)
        b2Dump('  jd.lengthB = %hf;\n', this.m_lengthB)
        b2Dump('  jd.ratio = %hf;\n', this.m_ratio)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    /// Implement b2Joint::ShiftOrigin
    // (override)
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        this.m_groundAnchorA.SubtractAssign(*newOrigin)
        this.m_groundAnchorB.SubtractAssign(*newOrigin)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = POD data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = POD data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // Get the pulley axes.
        this.m_uA = cA + this.m_rA - this.m_groundAnchorA
        this.m_uB = cB + this.m_rB - this.m_groundAnchorB

        lengthA float = this.m_uA.Length()
        lengthB float = this.m_uB.Length()

        if lengthA > 10.0f * b2_linearSlop {
            this.m_uA.MultiplyAssign(1.0f / lengthA)
        } else {
            this.m_uA.SetZero()
        }

        if lengthB > 10.0f * b2_linearSlop {
            this.m_uB.MultiplyAssign(1.0f / lengthB)
        } else {
            this.m_uB.SetZero()
        }

        // Compute effective mass.
        ruA float = b2Cross(this.m_rA, this.m_uA)
        ruB float = b2Cross(this.m_rB, this.m_uB)

        mA float = this.m_invMassA + this.m_invIA * ruA * ruA
        mB float = this.m_invMassB + this.m_invIB * ruB * ruB

        this.m_mass = mA + this.m_ratio * this.m_ratio * mB

        if this.m_mass > 0.0f {
            this.m_mass = 1.0f / this.m_mass
        }

        if data.step.warmStarting {
            // Scale impulses to support variable time steps.
            this.m_impulse *= data.step.dtRatio

            // Warm starting.
            PA POD b2Vec2 = POD this.m_uA * (0.0f - this.m_impulse)
            PB POD b2Vec2 = POD this.m_uB * (-1.0f * this.m_ratio * this.m_impulse)

            vA.AddAssign(PA * this.m_invMassA)
            wA += this.m_invIA * b2Cross(this.m_rA, PA)
            vB.AddAssign(PB * this.m_invMassB)
            wB += this.m_invIB * b2Cross(this.m_rB, PB)
        } else {
            this.m_impulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = POD data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = POD data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        vpA POD b2Vec2 = vA + b2Cross(wA, this.m_rA)
        vpB POD b2Vec2 = vB + b2Cross(wB, this.m_rB)

        Cdot float = -1.0f * b2Dot(this.m_uA, vpA) - this.m_ratio * b2Dot(this.m_uB, vpB)
        impulse float = -1.0f * this.m_mass * Cdot
        this.m_impulse += impulse

        PA POD b2Vec2 = POD this.m_uA * (0.0f - impulse)
        PB POD b2Vec2 = POD this.m_uB * (-1.0f * this.m_ratio * impulse)
        vA.AddAssign(PA * this.m_invMassA)
        wA += this.m_invIA * b2Cross(this.m_rA, PA)
        vB.AddAssign(PB * this.m_invMassB)
        wB += this.m_invIB * b2Cross(this.m_rB, PB)

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // Get the pulley axes.
        uA POD b2Vec2 = POD cA + rA - this.m_groundAnchorA
        uB POD b2Vec2 = POD cB + rB - this.m_groundAnchorB

        lengthA float = uA.Length()
        lengthB float = uB.Length()

        if lengthA > 10.0f * b2_linearSlop {
            uA = uA * (1.0f / lengthA)
        } else {
            uA.SetZero()
        }

        if lengthB > 10.0f * b2_linearSlop {
            uB = uB * (1.0f / lengthB)
        } else {
            uB.SetZero()
        }

        // Compute effective mass.
        ruA float = b2Cross(rA, uA)
        ruB float = b2Cross(rB, uB)

        mA float = this.m_invMassA + this.m_invIA * ruA * ruA
        mB float = this.m_invMassB + this.m_invIB * ruB * ruB

        mass float = mA + this.m_ratio * this.m_ratio * mB

        if mass > 0.0f {
            mass = 1.0f / mass
        }

        C float = this.m_constant - lengthA - this.m_ratio * lengthB
        linearError float = b2Abs(C)

        impulse float = -1.0f * mass * C

        PA POD b2Vec2 = POD uA * (0.0f - impulse)
        PB POD b2Vec2 = POD uB * (-1.0f * this.m_ratio * impulse)

        cA.AddAssign(PA * this.m_invMassA)
        aA += this.m_invIA * b2Cross(rA, PA)
        cB.AddAssign(PB * this.m_invMassB)
        aB += this.m_invIB * b2Cross(rB, PB)

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return linearError < b2_linearSlop
    }
}

func b2Joint\CreateRaw\b2PulleyJoint(out uninitialized *b2PulleyJoint, in definition *b2PulleyJointDef) *b2PulleyJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_groundAnchorA = definition.groundAnchorA
    uninitialized.m_groundAnchorB = definition.groundAnchorB
    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB

    uninitialized.m_lengthA = definition.lengthA
    uninitialized.m_lengthB = definition.lengthB

    b2Assert(definition.ratio != 0.0f, #get __file__, #get __line__, 'b2Assert(definition.ratio != 0.0f)')
    uninitialized.m_ratio = definition.ratio

    uninitialized.m_constant = definition.lengthA + uninitialized.m_ratio * definition.lengthB
    uninitialized.m_impulse = 0.0f
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#default b2_time_of_impact_dump_curve_as_seen_by_root_finder false


/// Input parameters for b2TimeOfImpact
struct b2TOIInput (
    proxyA, proxyB b2DistanceProxy,
    sweepA, sweepB b2Sweep,
    tMax float // defines sweep interval [0, tMax]
)

/// Output parameters for b2TimeOfImpact.
enum b2TOIOutput\State (e_unknown, e_failed, e_overlapped, e_touching, e_separated)

struct b2TOIOutput (
    state b2TOIOutput\State,
    t float
)

/// Compute the upper bound on time before two shapes penetrate. Time is represented as
/// a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
/// non-tunneling collisions. If you change the time interval, you should call this function
/// again.
/// Note: use b2Distance to compute the contact point and normal at the time of impact.

// CCD via the local separating axis method. This seeks progression
// by computing the largest time at which separation is maintained.
func b2TimeOfImpact(out output *b2TOIOutput, in input *b2TOIInput) void {
    timer POD b2Timer = b2Timer()

    ++b2_time_of_impact\b2_toiCalls

    output.state = b2TOIOutput\State::e_unknown
    output.t = input.tMax

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    sweepA POD b2Sweep = input.sweepA
    sweepB POD b2Sweep = input.sweepB

    // Large rotations can make the root finder fail, so we normalize the
    // sweep angles.
    sweepA.Normalize()
    sweepB.Normalize()

    tMax float = input.tMax

    totalRadius float = proxyA.m_radius + proxyB.m_radius
    target float = b2Max(b2_linearSlop, totalRadius - 3.0f * b2_linearSlop)
    tolerance float = 0.25f * b2_linearSlop
    b2Assert(target > tolerance, #get __file__, #get __line__, 'b2Assert(target > tolerance)')

    t1 float = 0.0f
    const k_maxIterations int = 20
    iter int = 0

    // Prepare input for distance query.
    cache POD b2SimplexCache
    cache.count = 0

    distanceInput POD b2DistanceInput = undef
    distanceInput.proxyA = input.proxyA
    distanceInput.proxyB = input.proxyB
    distanceInput.useRadii = false

    // The outer loop progressively attempts to compute new separating axes.
    // This loop terminates when an axis is repeated (no progress is made).
    until break {
        xfA, xfB POD b2Transform = undef
        sweepA.GetTransform(&xfA, t1)
        sweepB.GetTransform(&xfB, t1)

        // Get the distance between shapes. We can also use the results
        // to get a separating axis.
        distanceInput.transformA = xfA
        distanceInput.transformB = xfB

        distanceOutput POD b2DistanceOutput = undef
        b2Distance(&distanceOutput, &cache, &distanceInput)

        // If the shapes are overlapped, we give up on continuous collision.
        if distanceOutput.distance <= 0.0f {
            // Failure!
            output.state = b2TOIOutput\State::e_overlapped
            output.t = 0.0f
            break
        }

        if distanceOutput.distance < target + tolerance {
            // Victory!
            output.state = b2TOIOutput\State::e_touching
            output.t = t1
            break
        }

        // Initialize the separating axis.
        fcn POD b2SeparationFunction = undef
        fcn.Initialize(&cache, proxyA, &sweepA, proxyB, &sweepB, t1)

        #if b2_time_of_impact_dump_curve_as_seen_by_root_finder
        // Dump the curve seen by the root finder
        if true {
            const N int = 100
            dx float = 1.0f / cast float N

            xs /*N + 1*/ 101 float = undef
            fs /*N + 1*/ 101 float = undef

            x float = 0.0f

            for(i int = 0; i <= N; ++i){
                sweepA.GetTransform(&xfA, x)
                sweepB.GetTransform(&xfB, x)
                f float = fcn.Evaluate(xfA, xfB) - target

                printf('%g %g\n', x as double, f as double)

                xs[i] = x
                fs[i] = f

                x += dx
            }
        }
        #end

        // Compute the TOI on the separating axis. We do this by successively
        // resolving the deepest point. This loop is bounded by the number of vertices.
        done bool = false
        t2 float = tMax
        pushBackIter int = 0
        until break {
            // Find the deepest point at t2. Store the witness point indices.
            indexA, indexB int = undef
            s2 float = fcn.FindMinSeparation(&indexA, &indexB, t2)

            // Is the final configuration separated?
            if s2 > target + tolerance {
                // Victory!
                output.state = b2TOIOutput\State::e_separated
                output.t = tMax
                done = true
                break
            }

            // Has the separation reached tolerance?
            if s2 > target - tolerance {
                // Advance the sweeps
                t1 = t2
                break
            }

            // Compute the initial separation of the witness points.
            s1 float = fcn.Evaluate(indexA, indexB, t1)

            // Check for initial overlap. This might happen if the root finder
            // runs out of iterations.
            if s1 < target - tolerance {
                output.state = b2TOIOutput\State::e_failed
                output.t = t1
                done = true
                break
            }

            // Check for touching
            if s1 <= target + tolerance {
                // Victory! t1 should hold the TOI (could be 0.0).
                output.state = b2TOIOutput\State::e_touching
                output.t = t1
                done = true
                break
            }

            // Compute 1D root of: f(x) - target = 0
            rootIterCount int = 0
            a1 float = t1
            a2 float = t2

            until break {
                // Use a mix of the secant rule and bisection.
                t float = undef
                if rootIterCount & 1 {
                    // Secant rule to improve convergence.
                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1)
                } else {
                    // Bisection to guarantee progress.
                    t = 0.5f * (a1 + a2)
                }

                ++rootIterCount
                ++b2_time_of_impact\b2_toiRootIters

                s float = fcn.Evaluate(indexA, indexB, t)

                if b2Abs(s - target) < tolerance {
                    // t2 holds a tentative value for t1
                    t2 = t
                    break
                }

                // Ensure we continue to bracket the root.
                if s > target {
                    a1 = t
                    s1 = s
                } else {
                    a2 = t
                    s2 = s
                }
                
                if rootIterCount == 50 {
                    break
                }
            }

            b2_time_of_impact\b2_toiMaxRootIters = b2Max(b2_time_of_impact\b2_toiMaxRootIters, rootIterCount)

            ++pushBackIter

            if pushBackIter == b2_maxPolygonVertices, break
        }

        ++iter
        ++b2_time_of_impact\b2_toiIters

        if done, break

        if iter == k_maxIterations {
            // Root finder got stuck. Semi-victory.
            output.state = b2TOIOutput\State::e_failed
            output.t = t1
            break
        }
    }

    b2_time_of_impact\b2_toiMaxIters = b2Max(b2_time_of_impact\b2_toiMaxIters, iter)

    time float = timer.GetMilliseconds()
    b2_time_of_impact\b2_toiMaxTime = b2Max(b2_time_of_impact\b2_toiMaxTime, time)
    b2_time_of_impact\b2_toiTime += time
}

// -----------------------------------------------------

enum b2SeparationFunction\Type (e_points, e_faceA, e_faceB)

struct b2SeparationFunction (
    m_proxyA, m_proxyB *b2DistanceProxy,
    m_sweepA, m_sweepB b2Sweep,
    m_type b2SeparationFunction\Type,
    m_localPoint b2Vec2,
    m_axis b2Vec2
) {
    func Initialize(
            in cache *b2SimplexCache,
            in proxyA *b2DistanceProxy,
            in sweepA *b2Sweep,
            in proxyB *b2DistanceProxy,
            in sweepB *b2Sweep,
            t1 float
    ) float {    
        this.m_proxyA = proxyA
        this.m_proxyB = proxyB
        count int = cache.count
        b2Assert(0 < count && count < 3, #get __file__, #get __line__, 'b2Assert(0 < count && count < 3)')

        this.m_sweepA = *sweepA
        this.m_sweepB = *sweepB

        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t1)
        this.m_sweepB.GetTransform(&xfB, t1)

        if count == 1 {
            this.m_type = b2SeparationFunction\Type::e_points
            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[0])
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(cache.indexB[0])
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)
            this.m_axis = pointB - pointA
            s float = this.m_axis.Normalize()
            return s
        } else if cache.indexA[0] == cache.indexA[1] {
            // Two points on B and one on A.

            this.m_type = b2SeparationFunction\Type::e_faceB
            localPointB1 POD b2Vec2 = *proxyB.GetVertex(cache.indexB[0])
            localPointB2 POD b2Vec2 = *proxyB.GetVertex(cache.indexB[1])

            this.m_axis = b2Cross(localPointB2 - localPointB1, 1.0f)
            this.m_axis.Normalize()
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)

            this.m_localPoint = (localPointB1 + localPointB2) * 0.5f
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            localPointA POD b2Vec2 = *proxyA.GetVertex(cache.indexA[0])
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            s float = b2Dot(pointA - pointB, normal)

            if s < 0.0f {
                this.m_axis = this.m_axis.Negated()
                s = 0.0f - s
            }

            return s
        } else {
            // Two points on A and one or two points on B.
            this.m_type = b2SeparationFunction\Type::e_faceA
            localPointA1 POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[0])
            localPointA2 POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[1])
            
            this.m_axis = b2Cross(localPointA2 - localPointA1, 1.0f)
            this.m_axis.Normalize()
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)

            this.m_localPoint = (localPointA1 + localPointA2) * 0.5f
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(cache.indexB[0])
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            s float = b2Dot(pointB - pointA, normal)
            if s < 0.0f {
                this.m_axis = this.m_axis.Negated()
                s = 0.0f - s
            }

            return s
        }

        return 0.0f // (unreachable)
    }

    func FindMinSeparation(indexA, indexB *int, t float) float {
        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t)
        this.m_sweepB.GetTransform(&xfB, t)

        switch this.m_type {
        case b2SeparationFunction\Type::e_points
            axisA POD b2Vec2 = b2MulT(xfA.q, this.m_axis)
            axisB POD b2Vec2 = b2MulT(xfB.q, this.m_axis.Negated())

            *indexA = this.m_proxyA.GetSupport(axisA)
            *indexB = this.m_proxyB.GetSupport(axisB)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(*indexA)
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(*indexB)
            
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, this.m_axis)
            return separation
        
        case b2SeparationFunction\Type::e_faceA
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            axisB POD b2Vec2 = b2MulT(xfB.q, normal.Negated())
            
            *indexA = -1
            *indexB = this.m_proxyB.GetSupport(axisB)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(*indexB)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, normal)
            return separation

        case b2SeparationFunction\Type::e_faceB
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            axisA POD b2Vec2 = b2MulT(xfA.q, normal.Negated())

            *indexB = -1
            *indexA = this.m_proxyA.GetSupport(axisA)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(*indexA)
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            separation float = b2Dot(pointA - pointB, normal)
            return separation
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        *indexA = -1
        *indexB = -1
        return 0.0f
    }

    func Evaluate(indexA, indexB int, t float) float {
        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t)
        this.m_sweepB.GetTransform(&xfB, t)

        switch this.m_type {
        case b2SeparationFunction\Type::e_points
            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(indexA)
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(indexB)

            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)
            separation float = b2Dot(pointB - pointA, this.m_axis)

            return separation

        case b2SeparationFunction\Type::e_faceA
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(indexB)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, normal)
            return separation

        case b2SeparationFunction\Type::e_faceB
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(indexA)
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            separation float = b2Dot(pointA - pointB, normal)
            return separation
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        return 0.0f
    }
}

b2_time_of_impact\b2_toiTime float
b2_time_of_impact\b2_toiMaxTime float
b2_time_of_impact\b2_toiCalls int
b2_time_of_impact\b2_toiIters int
b2_time_of_impact\b2_toiMaxIters int
b2_time_of_impact\b2_toiRootIters int
b2_time_of_impact\b2_toiMaxRootIters int


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// 1-D constrained system
// m (v2 - v1) = lambda
// v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.
// x2 = x1 + h * v2

// 1-D mass-damper-spring system
// m (v2 - v1) + h * d * v2 + h * k * 

// C = norm(p2 - p1) - L
// u = (p2 - p1) / norm(p2 - p1)
// Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))
// J = [-u -cross(r1, u) u cross(r2, u)]
// K = J * invM * JT
//   = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2

struct b2DistanceJointDef (
    struct b2JointDef,
    
    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The rest length of this joint. Clamped to a stable minimum value.
    length float,

    /// Minimum length. Clamped to a stable minimum value.
    minLength float,

    /// Maximum length. Must be greater than or equal to the minimum length.
    maxLength float,

    /// The linear stiffness in N/m.
    stiffness float,

    /// The linear damping in N*s/m.
    damping float
) {
    /// Initialize the bodies, anchors, and rest length using world space anchors.
    /// The minimum and maximum lengths are set to the rest length.
    func Initialize(in bA, bB *b2Body, in anchor1, anchor2 *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor1)
        this.localAnchorB = bB.GetLocalPoint(anchor2)
        d POD b2Vec2 = *anchor2 - *anchor1
        this.length = b2Max(d.Length(), b2_linearSlop)
        this.minLength = this.length
        this.maxLength = this.length
    }
}

func b2DistanceJointDef() b2DistanceJointDef {
    djd POD b2DistanceJointDef = undef
    *cast *b2JointDef &djd = b2JointDef()
    djd.type = b2JointType::e_distanceJoint
    djd.localAnchorA.Set(0.0f, 0.0f)
    djd.localAnchorB.Set(0.0f, 0.0f)
    djd.length = 1.0f
    djd.minLength = 0.0f
    djd.maxLength = FLT_MAX
    djd.stiffness = 0.0f
    djd.damping = 0.0f
    return djd
}

/// A distance joint constrains two points on two bodies to remain at a fixed
/// distance from each other. You can view this as a massless, rigid rod.
struct b2DistanceJoint (
    struct b2Joint,
    
    m_stiffness float,
    m_damping float,
    m_bias float,
    m_length float,
    m_minLength float,
    m_maxLength float,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_gamma float,
    m_impulse float,
    m_lowerImpulse float,
    m_upperImpulse float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_u b2Vec2,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_currentLength float,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_softMass float,
    m_mass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    /// Get the reaction force given the inverse time step.
    /// Unit is N.
    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        F POD b2Vec2 = inv_dt * (this.m_impulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_u
        return F
    }

    /// Get the reaction torque given the inverse time step.
    /// Unit is N*m. This is always zero for a distance joint.
    // (override)
    func GetReactionTorque(_inv_dt float) float {
        return 0.0f
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 {
        return &this.m_localAnchorA
    }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 {
        return &this.m_localAnchorB
    }

    /// Get the rest length
    func GetLength() float {
        return this.m_length
    }

    /// Set the rest length
    /// @returns clamped rest length
    func SetLength(length float) float {
        this.m_impulse = 0.0f
        this.m_length = b2Max(b2_linearSlop, length)
        return this.m_length
    }

    /// Get the minimum length
    func GetMinLength() float {
        return this.m_minLength
    }

    /// Set the minimum length
    /// @returns the clamped minimum length
    func SetMinLength(minLength float) float {
        this.m_lowerImpulse = 0.0f
        this.m_minLength = b2Clamp(minLength, b2_linearSlop, this.m_maxLength)
        return this.m_minLength
    }

    /// Get the maximum length
    func GetMaxLength() float {
        return this.m_maxLength
    }

    /// Set the maximum length
    /// @returns the clamped maximum length
    func SetMaxLength(maxLength float) float {
        this.m_upperImpulse = 0.0f
        this.m_maxLength = b2Max(maxLength, this.m_minLength)
        return this.m_maxLength
    }

    /// Get the current length
    func GetCurrentLength() float {
        pA POD b2Vec2 = this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
        pB POD b2Vec2 = this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
        d POD b2Vec2 = pB - pA
        length float = d.Length()
        return length
    }

    /// Set/get the linear stiffness in N/m
    func SetStiffness(stiffness float) void {
        this.m_stiffness = stiffness
    }
    
    func GetStiffness() float {
        return this.m_stiffness
    }

    /// Set/get linear damping in N*s/m
    func SetDamping(damping float) {
        this.m_damping = damping
    }

    func GetDamping() float {
        return this.m_damping
    }

    /// Dump joint to dmLog
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2DistanceJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.length = %hf;\n', this.m_length)
        b2Dump('  jd.minLength = %hf;\n', this.m_minLength)
        b2Dump('  jd.maxLength = %hf;\n', this.m_maxLength)
        b2Dump('  jd.stiffness = %hf;\n', this.m_stiffness)
        b2Dump('  jd.damping = %hf;\n', this.m_damping)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    ///
    // (override)
    func Draw(draw *b2Draw) void {
        xfA *b2Transform = this.m_bodyA.GetTransform()
        xfB *b2Transform = this.m_bodyB.GetTransform()
        pA POD b2Vec2 = b2Mul(xfA, this.m_localAnchorA)
        pB POD b2Vec2 = b2Mul(xfB, this.m_localAnchorB)

        axis POD b2Vec2 = pB - pA
        // (unused) length float = axis.Normalize()
        
        c1 POD b2Color = POD b2Color(0.7f, 0.7f, 0.7f)
        c2 POD b2Color = POD b2Color(0.3f, 0.9f, 0.3f)
        c3 POD b2Color = POD b2Color(0.9f, 0.3f, 0.3f)
        c4 POD b2Color = POD b2Color(0.4f, 0.4f, 0.4f)

        draw.DrawSegment(&pA, &pB, &c4)
        
        pRest POD b2Vec2 = pA + this.m_length * axis
        draw.DrawPoint(&pRest, 8.0f, &c1)

        if this.m_minLength != this.m_maxLength
        {
            if this.m_minLength > b2_linearSlop {
                pMin POD b2Vec2 = pA + this.m_minLength * axis
                draw.DrawPoint(&pMin, 4.0f, &c2)
            }

            if this.m_maxLength < FLT_MAX {
                pMax POD b2Vec2 = pA + this.m_maxLength * axis
                draw.DrawPoint(&pMax, 4.0f, &c3)
            }
        }
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = b2Rot(aA)
        qB POD b2Rot = b2Rot(aB)

        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
        this.m_u = cB + this.m_rB - cA - this.m_rA

        // Handle singularity.
        this.m_currentLength = this.m_u.Length()
        if this.m_currentLength > b2_linearSlop {
            this.m_u.MultiplyAssign(1.0f / this.m_currentLength)
        } else {
            this.m_u.Set(0.0f, 0.0f)
            this.m_mass = 0.0f
            this.m_impulse = 0.0f
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        crAu float = b2Cross(this.m_rA, this.m_u)
        crBu float = b2Cross(this.m_rB, this.m_u)
        invMass float = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu
        this.m_mass = invMass != 0.0f ? 1.0f / invMass : 0.0f

        if this.m_stiffness > 0.0f && this.m_minLength < this.m_maxLength {
            // soft
            C float = this.m_currentLength - this.m_length

            d float = this.m_damping
            k float = this.m_stiffness

            // magic formulas
            h float = data.step.dt

            // gamma = 1 / (h * (d + h * k))
            // the extra factor of h in the denominator is since the lambda is an impulse, not a force
            this.m_gamma = h * (d + h * k)
            this.m_gamma = this.m_gamma != 0.0f ? 1.0f / this.m_gamma : 0.0f
            this.m_bias = C * h * k * this.m_gamma

            invMass += this.m_gamma
            this.m_softMass = invMass != 0.0f ? 1.0f / invMass : 0.0f
        } else {
            // rigid
            this.m_gamma = 0.0f
            this.m_bias = 0.0f
            this.m_softMass = this.m_mass
        }

        if data.step.warmStarting {
            // Scale the impulse to support a variable time step.
            this.m_impulse *= data.step.dtRatio
            this.m_lowerImpulse *= data.step.dtRatio
            this.m_upperImpulse *= data.step.dtRatio

            P POD b2Vec2 = (this.m_impulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_u
            vA.SubtractAssign(this.m_invMassA * P)
            wA -= this.m_invIA * b2Cross(this.m_rA, P)
            vB.AddAssign(this.m_invMassB * P)
            wB += this.m_invIB * b2Cross(this.m_rB, P)
        } else {
            this.m_impulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        if this.m_minLength < this.m_maxLength {
            if this.m_stiffness > 0.0f {
                // Cdot = dot(u, v + cross(w, r))
                vpA POD b2Vec2 = vA + b2Cross(wA, this.m_rA)
                vpB POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
                Cdot float = b2Dot(this.m_u, vpB - vpA)

                impulse float = (0.0f - this.m_softMass) * (Cdot + this.m_bias + this.m_gamma * this.m_impulse)
                this.m_impulse += impulse

                P POD b2Vec2 = impulse * this.m_u
                vA.SubtractAssign(this.m_invMassA * P)
                wA -= this.m_invIA * b2Cross(this.m_rA, P)
                vB.AddAssign(this.m_invMassB * P)
                wB += this.m_invIB * b2Cross(this.m_rB, P)
            }

            // lower
            if true {
                C float = this.m_currentLength - this.m_minLength
                bias float = b2Max(0.0f, C) * data.step.inv_dt

                vpA POD b2Vec2 = vA + b2Cross(wA, this.m_rA)
                vpB POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
                Cdot float = b2Dot(this.m_u, vpB - vpA)

                impulse float = (0.0f - this.m_mass) * (Cdot + bias)
                oldImpulse float = this.m_lowerImpulse
                this.m_lowerImpulse = b2Max(0.0f, this.m_lowerImpulse + impulse)
                impulse = this.m_lowerImpulse - oldImpulse
                P POD b2Vec2 = impulse * this.m_u

                vA.SubtractAssign(this.m_invMassA * P)
                wA -= this.m_invIA * b2Cross(this.m_rA, P)
                vB.AddAssign(this.m_invMassB * P)
                wB += this.m_invIB * b2Cross(this.m_rB, P)
            }

            // upper
            if true {
                C float = this.m_maxLength - this.m_currentLength
                bias float = b2Max(0.0f, C) * data.step.inv_dt

                vpA POD b2Vec2 = vA + b2Cross(wA, this.m_rA)
                vpB POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
                Cdot float = b2Dot(this.m_u, vpA - vpB)

                impulse float = (0.0f - this.m_mass) * (Cdot + bias)
                oldImpulse float = this.m_upperImpulse
                this.m_upperImpulse = b2Max(0.0f, this.m_upperImpulse + impulse)
                impulse = this.m_upperImpulse - oldImpulse
                P POD b2Vec2 = (0.0f - impulse) * this.m_u

                vA.SubtractAssign(this.m_invMassA * P)
                wA -= this.m_invIA * b2Cross(this.m_rA, P)
                vB.AddAssign(this.m_invMassB * P)
                wB += this.m_invIB * b2Cross(this.m_rB, P)
            }
        } else {
            // Equal limits

            // Cdot = dot(u, v + cross(w, r))
            vpA POD b2Vec2 = vA + b2Cross(wA, this.m_rA)
            vpB POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
            Cdot float = b2Dot(this.m_u, vpB - vpA)

            impulse float = (0.0f - this.m_mass) * Cdot
            this.m_impulse += impulse

            P POD b2Vec2 = impulse * this.m_u
            vA.SubtractAssign(this.m_invMassA * P)
            wA -= this.m_invIA * b2Cross(this.m_rA, P)
            vB.AddAssign(this.m_invMassB * P)
            wB += this.m_invIB * b2Cross(this.m_rB, P)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(data *b2SolverData) bool {
        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = b2Rot(aA)
        qB POD b2Rot = b2Rot(aB)

        rA POD b2Vec2 = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
        u POD b2Vec2 = cB + rB - cA - rA

        length float = u.Normalize()
        C float = undef

        if this.m_minLength == this.m_maxLength {
            C = length - this.m_minLength
        } else if length < this.m_minLength {
            C = length - this.m_minLength
        } else if this.m_maxLength < length {
            C = length - this.m_maxLength
        } else {
            return true
        }

        impulse float = (0.0f - this.m_mass) * C
        P POD b2Vec2 = impulse * u

        cA.SubtractAssign(this.m_invMassA * P)
        aA -= this.m_invIA * b2Cross(rA, P)
        cB.AddAssign(this.m_invMassB * P)
        aB += this.m_invIB * b2Cross(rB, P)

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return b2Abs(C) < b2_linearSlop
    }
}

func b2Joint\CreateRaw\b2DistanceJoint(out uninitialized *b2DistanceJoint, in definition *b2DistanceJointDef) *b2DistanceJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_length = b2Max(definition.length, b2_linearSlop)
    uninitialized.m_minLength = b2Max(definition.minLength, b2_linearSlop)
    uninitialized.m_maxLength = b2Max(definition.maxLength, uninitialized.m_minLength)
    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    uninitialized.m_gamma = 0.0f
    uninitialized.m_bias = 0.0f
    uninitialized.m_impulse = 0.0f
    uninitialized.m_lowerImpulse = 0.0f
    uninitialized.m_upperImpulse = 0.0f
    uninitialized.m_currentLength = 0.0f

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Point-to-point constraint
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Angle constraint
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

struct b2FrictionJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The maximum friction force in N.
    maxForce float,

    /// The maximum friction torque in N-m.
    maxTorque float
) {
    /// Initialize the bodies, anchors, axis, and reference angle using the world
    /// anchor and world axis.
    func Initialize(bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
    }
}

func b2FrictionJointDef() b2FrictionJointDef {
    fjd POD b2FrictionJointDef = undef
    *cast *b2JointDef &fjd = b2JointDef()
    fjd.type = b2JointType::e_frictionJoint
    fjd.localAnchorA.SetZero()
    fjd.localAnchorB.SetZero()
    fjd.maxForce = 0.0f
    fjd.maxTorque = 0.0f
    return fjd
}

struct b2FrictionJoint (
    struct b2Joint,

    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,

    // Solver shared
    m_linearImpulse b2Vec2,
    m_angularImpulse float,
    m_maxForce float,
    m_maxTorque float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_linearMass b2Mat22,
    m_angularMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        return inv_dt * this.m_linearImpulse
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_angularImpulse
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 {
        return &this.m_localAnchorA
    }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 {
        return &this.m_localAnchorB
    }

    /// Set the maximum friction force in N.
    func SetMaxForce(force float) void {
        b2Assert(b2IsValid(force) && force >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(force) && force >= 0.0f)')
        this.m_maxForce = force
    }

    /// Get the maximum friction force in N.
    func GetMaxForce() float {
        return this.m_maxForce
    }

    /// Set the maximum friction torque in N*m.
    func SetMaxTorque(torque float) void {
        b2Assert(b2IsValid(torque) && torque >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(torque) && torque >= 0.0f)')
        this.m_maxTorque = torque
    }

    /// Get the maximum friction torque in N*m.
    func GetMaxTorque() float {
        return this.m_maxTorque
    }

    /// Dump joint to dmLog
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2FrictionJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.maxForce = %hf;\n', this.m_maxForce)
        b2Dump('  jd.maxTorque = %hf;\n', this.m_maxTorque)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        // Compute the effective mass matrix.
        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // J = [-I -r1_skew I r2_skew]
        //     [ 0       -1 0       1]
        // r_skew = [-ry; rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        K POD b2Mat22 = undef
        K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y * this.m_rB.y
        K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y
        K.ey.x = K.ex.y
        K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x * this.m_rB.x

        this.m_linearMass = K.GetInverse()

        this.m_angularMass = iA + iB
        if this.m_angularMass > 0.0f {
            this.m_angularMass = 1.0f / this.m_angularMass
        }

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_linearImpulse.MultiplyAssign(data.step.dtRatio)
            this.m_angularImpulse *= data.step.dtRatio

            P POD b2Vec2 = POD b2Vec2(this.m_linearImpulse.x, this.m_linearImpulse.y)
            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + this.m_angularImpulse)
            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + this.m_angularImpulse)
        } else {
            this.m_linearImpulse.SetZero()
            this.m_angularImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        h float = data.step.dt

        // Solve angular friction
        if true {
            Cdot float = wB - wA
            impulse float = (0.0f - this.m_angularMass) * Cdot

            oldImpulse float = this.m_angularImpulse
            maxImpulse float = h * this.m_maxTorque
            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, 0.0f - maxImpulse, maxImpulse)
            impulse = this.m_angularImpulse - oldImpulse

            wA -= iA * impulse
            wB += iB * impulse
        }

        // Solve linear friction
        if true {
            Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)

            impulse POD b2Vec2 = b2Mul(this.m_linearMass, Cdot).Negated()
            oldImpulse POD b2Vec2 = this.m_linearImpulse
            this.m_linearImpulse.AddAssign(impulse)

            maxImpulse float = h * this.m_maxForce

            if this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse {
                this.m_linearImpulse.Normalize()
                this.m_linearImpulse = this.m_linearImpulse * maxImpulse
            }

            impulse = this.m_linearImpulse - oldImpulse

            vA.SubtractAssign(mA * impulse)
            wA -= iA * b2Cross(this.m_rA, impulse)

            vB.AddAssign(mB * impulse)
            wB += iB * b2Cross(this.m_rB, impulse)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(_data *b2SolverData) bool {
        /* do nothing */
        return true
    }
}

func b2Joint\CreateRaw\b2FrictionJoint(out uninitialized *b2FrictionJoint, in definition *b2FrictionJointDef) *b2FrictionJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB

    uninitialized.m_linearImpulse.SetZero()
    uninitialized.m_angularImpulse = 0.0f

    uninitialized.m_maxForce = definition.maxForce
    uninitialized.m_maxTorque = definition.maxTorque

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Gear Joint:
// C0 = (coordinate1 + ratio * coordinate2)_initial
// C = (coordinate1 + ratio * coordinate2) - C0 = 0
// J = [J1 ratio * J2]
// K = J * invM * JT
//   = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T
//
// Revolute:
// coordinate = rotation
// Cdot = angularVelocity
// J = [0 0 1]
// K = J * invM * JT = invI
//
// Prismatic:
// coordinate = dot(p - pg, ug)
// Cdot = dot(v + cross(w, r), ug)
// J = [ug cross(r, ug)]
// K = J * invM * JT = invMass + invI * cross(r, ug)^2

struct b2GearJointDef (
    struct b2JointDef,

    /// The first revolute/prismatic joint attached to the gear joint.
    joint1 *b2Joint,

    /// The second revolute/prismatic joint attached to the gear joint.
    joint2 *b2Joint,

    /// The gear ratio.
    /// @see b2GearJoint for explanation.
    ratio float
)

func b2GearJointDef() b2GearJointDef {
    gjd POD b2GearJointDef = undef
    *cast *b2JointDef &gjd = b2JointDef()
    gjd.type = b2JointType::e_gearJoint
    gjd.joint1 = null
    gjd.joint2 = null
    gjd.ratio = 1.0f
    return gjd
}

/// A gear joint is used to connect two joints together. Either joint
/// can be a revolute or prismatic joint. You specify a gear ratio
/// to bind the motions together:
/// coordinate1 + ratio * coordinate2 = constant
/// The ratio can be negative or positive. If one joint is a revolute joint
/// and the other joint is a prismatic joint, then the ratio will have units
/// of length or units of 1/length.
/// @warning You have to manually destroy the gear joint if joint1 or joint2
/// is destroyed.
struct b2GearJoint (
    struct b2Joint,

    m_joint1 *b2Joint,
    m_joint2 *b2Joint,

    m_typeA b2JointType,
    m_typeB b2JointType,

    // Body A is connected to body C
    // Body B is connected to body D
    m_bodyC *b2Body,
    m_bodyD *b2Body,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_localAnchorC b2Vec2,
    m_localAnchorD b2Vec2,

    m_localAxisC b2Vec2,
    m_localAxisD b2Vec2,

    m_referenceAngleA float,
    m_referenceAngleB float,

    m_constant float,
    m_ratio float,

    m_impulse float,

    // Solver temp
    m_indexA, m_indexB, m_indexC, m_indexD int,
    m_lcA, m_lcB, m_lcC, m_lcD b2Vec2,
    m_mA, m_mB, m_mC, m_mD float,
    m_iA, m_iB, m_iC, m_iD float,
    m_JvAC, m_JvBD b2Vec2,
    m_JwA, m_JwB, m_JwC, m_JwD float,
    m_mass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        P POD b2Vec2 = this.m_impulse * this.m_JvAC
        return inv_dt * P
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        L float = this.m_impulse * this.m_JwA
        return inv_dt * L
    }

    /// Get the first joint.
    func GetJoint1() *b2Joint {
        return this.m_joint1
    }

    /// Get the second joint.
    func GetJoint2() *b2Joint {
        return this.m_joint2
    }

    /// Set/Get the gear ratio.
    func SetRatio(ratio float) void {
        b2Assert(b2IsValid(ratio), #get __file__, #get __line__, 'b2Assert(b2IsValid(ratio))')
        this.m_ratio = ratio
    }

    func GetRatio() float {
        return this.m_ratio
    }

    /// Dump joint to dmLog
    // (override)
    func Dump() {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        index1 int = this.m_joint1.m_index
        index2 int = this.m_joint2.m_index

        b2Dump('  b2GearJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.joint1 = joints[%d];\n', index1)
        b2Dump('  jd.joint2 = joints[%d];\n', index2)
        b2Dump('  jd.ratio = %hf;\n', this.m_ratio)
        b2Dump('  joints[%d] = m_world.CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_indexC = this.m_bodyC.m_islandIndex
        this.m_indexD = this.m_bodyD.m_islandIndex
        this.m_lcA = this.m_bodyA.m_sweep.localCenter
        this.m_lcB = this.m_bodyB.m_sweep.localCenter
        this.m_lcC = this.m_bodyC.m_sweep.localCenter
        this.m_lcD = this.m_bodyD.m_sweep.localCenter
        this.m_mA = this.m_bodyA.m_invMass
        this.m_mB = this.m_bodyB.m_invMass
        this.m_mC = this.m_bodyC.m_invMass
        this.m_mD = this.m_bodyD.m_invMass
        this.m_iA = this.m_bodyA.m_invI
        this.m_iB = this.m_bodyB.m_invI
        this.m_iC = this.m_bodyC.m_invI
        this.m_iD = this.m_bodyD.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        aC float = data.positions[this.m_indexC].a
        vC POD b2Vec2 = data.velocities[this.m_indexC].v
        wC float = data.velocities[this.m_indexC].w

        aD float = data.positions[this.m_indexD].a
        vD POD b2Vec2 = data.velocities[this.m_indexD].v
        wD float = data.velocities[this.m_indexD].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)
        qC POD b2Rot = POD b2Rot(aC)
        qD POD b2Rot = POD b2Rot(aD)

        this.m_mass = 0.0f

        if this.m_typeA == b2JointType::e_revoluteJoint {
            this.m_JvAC.SetZero()
            this.m_JwA = 1.0f
            this.m_JwC = 1.0f
            this.m_mass += this.m_iA + this.m_iC
        } else {
            u POD b2Vec2 = b2Mul(qC, this.m_localAxisC)
            rC POD b2Vec2 = b2Mul(qC, this.m_localAnchorC - this.m_lcC)
            rA POD b2Vec2 = b2Mul(qA, this.m_localAnchorA - this.m_lcA)
            this.m_JvAC = u
            this.m_JwC = b2Cross(rC, u)
            this.m_JwA = b2Cross(rA, u)
            this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA
        }

        if this.m_typeB == b2JointType::e_revoluteJoint {
            this.m_JvBD.SetZero()
            this.m_JwB = this.m_ratio
            this.m_JwD = this.m_ratio
            this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD)
        } else {
            u POD b2Vec2 = b2Mul(qD, this.m_localAxisD)
            rD POD b2Vec2 = b2Mul(qD, this.m_localAnchorD - this.m_lcD)
            rB POD b2Vec2 = b2Mul(qB, this.m_localAnchorB - this.m_lcB)
            this.m_JvBD = this.m_ratio * u
            this.m_JwD = this.m_ratio * b2Cross(rD, u)
            this.m_JwB = this.m_ratio * b2Cross(rB, u)
            this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB
        }

        // Compute effective mass.
        this.m_mass = this.m_mass > 0.0f ? 1.0f / this.m_mass : 0.0f

        if data.step.warmStarting {
            vA.AddAssign((this.m_mA * this.m_impulse) * this.m_JvAC)
            wA += this.m_iA * this.m_impulse * this.m_JwA
            vB.AddAssign((this.m_mB * this.m_impulse) * this.m_JvBD)
            wB += this.m_iB * this.m_impulse * this.m_JwB
            vC.SubtractAssign((this.m_mC * this.m_impulse) * this.m_JvAC)
            wC -= this.m_iC * this.m_impulse * this.m_JwC
            vD.SubtractAssign((this.m_mD * this.m_impulse) * this.m_JvBD)
            wD -= this.m_iD * this.m_impulse * this.m_JwD
        } else {
            this.m_impulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
        data.velocities[this.m_indexC].v = vC
        data.velocities[this.m_indexC].w = wC
        data.velocities[this.m_indexD].v = vD
        data.velocities[this.m_indexD].w = wD
    }

    // (override)
    func SolveVelocityConstraints(data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w
        vC POD b2Vec2 = data.velocities[this.m_indexC].v
        wC float = data.velocities[this.m_indexC].w
        vD POD b2Vec2 = data.velocities[this.m_indexD].v
        wD float = data.velocities[this.m_indexD].w

        Cdot float = b2Dot(this.m_JvAC, vA - vC) + b2Dot(this.m_JvBD, vB - vD)
        Cdot += (this.m_JwA * wA - this.m_JwC * wC) + (this.m_JwB * wB - this.m_JwD * wD)

        impulse float = (0.0f - this.m_mass) * Cdot
        this.m_impulse += impulse

        vA.AddAssign((this.m_mA * impulse) * this.m_JvAC)
        wA += this.m_iA * impulse * this.m_JwA
        vB.AddAssign((this.m_mB * impulse) * this.m_JvBD)
        wB += this.m_iB * impulse * this.m_JwB
        vC.SubtractAssign((this.m_mC * impulse) * this.m_JvAC)
        wC -= this.m_iC * impulse * this.m_JwC
        vD.SubtractAssign((this.m_mD * impulse) * this.m_JvBD)
        wD -= this.m_iD * impulse * this.m_JwD

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
        data.velocities[this.m_indexC].v = vC
        data.velocities[this.m_indexC].w = wC
        data.velocities[this.m_indexD].v = vD
        data.velocities[this.m_indexD].w = wD
    }

    // (override)
    func SolvePositionConstraints(data *b2SolverData) bool {
        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        cC POD b2Vec2 = data.positions[this.m_indexC].c
        aC float = data.positions[this.m_indexC].a
        cD POD b2Vec2 = data.positions[this.m_indexD].c
        aD float = data.positions[this.m_indexD].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)
        qC POD b2Rot = POD b2Rot(aC)
        qD POD b2Rot = POD b2Rot(aD)

        linearError float = 0.0f

        coordinateA, coordinateB float = undef

        JvAC, JvBD POD b2Vec2 = undef;
        JwA, JwB, JwC, JwD float = undef
        mass float = 0.0f

        if this.m_typeA == b2JointType::e_revoluteJoint {
            JvAC.SetZero()
            JwA = 1.0f
            JwC = 1.0f
            mass += this.m_iA + this.m_iC

            coordinateA = aA - aC - this.m_referenceAngleA
        } else {
            u POD b2Vec2 = b2Mul(qC, this.m_localAxisC)
            rC POD b2Vec2 = b2Mul(qC, this.m_localAnchorC - this.m_lcC)
            rA POD b2Vec2 = b2Mul(qA, this.m_localAnchorA - this.m_lcA)
            JvAC = u
            JwC = b2Cross(rC, u)
            JwA = b2Cross(rA, u)
            mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA

            pC POD b2Vec2 = this.m_localAnchorC - this.m_lcC
            pA POD b2Vec2 = b2MulT(qC, rA + (cA - cC))
            coordinateA = b2Dot(pA - pC, this.m_localAxisC)
        }

        if this.m_typeB == b2JointType::e_revoluteJoint {
            JvBD.SetZero()
            JwB = this.m_ratio
            JwD = this.m_ratio
            mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD)

            coordinateB = aB - aD - this.m_referenceAngleB
        } else {
            u POD b2Vec2 = b2Mul(qD, this.m_localAxisD)
            rD POD b2Vec2 = b2Mul(qD, this.m_localAnchorD - this.m_lcD)
            rB POD b2Vec2 = b2Mul(qB, this.m_localAnchorB - this.m_lcB)
            JvBD = this.m_ratio * u
            JwD = this.m_ratio * b2Cross(rD, u)
            JwB = this.m_ratio * b2Cross(rB, u)
            mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * JwD * JwD + this.m_iB * JwB * JwB

            pD POD b2Vec2 = this.m_localAnchorD - this.m_lcD
            pB POD b2Vec2 = b2MulT(qD, rB + (cB - cD))
            coordinateB = b2Dot(pB - pD, this.m_localAxisD)
        }

        C float = (coordinateA + this.m_ratio * coordinateB) - this.m_constant

        impulse float = 0.0f
        if mass > 0.0f {
            impulse = (0.0f - C) / mass
        }

        cA.AddAssign(this.m_mA * impulse * JvAC)
        aA += this.m_iA * impulse * JwA
        cB.AddAssign(this.m_mB * impulse * JvBD)
        aB += this.m_iB * impulse * JwB
        cC.SubtractAssign(this.m_mC * impulse * JvAC)
        aC -= this.m_iC * impulse * JwC
        cD.SubtractAssign(this.m_mD * impulse * JvBD)
        aD -= this.m_iD * impulse * JwD

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB
        data.positions[this.m_indexC].c = cC
        data.positions[this.m_indexC].a = aC
        data.positions[this.m_indexD].c = cD
        data.positions[this.m_indexD].a = aD

        // TODO_ERIN not implemented
        return linearError < b2_linearSlop
    }
}

func b2Joint\CreateRaw\b2GearJoint(out uninitialized *b2GearJoint, in data *b2GearJointDef) *b2GearJoint {
    b2Joint(uninitialized, data as *b2JointDef)

    uninitialized.m_joint1 = data.joint1
    uninitialized.m_joint2 = data.joint2

    uninitialized.m_typeA = uninitialized.m_joint1.GetType()
    uninitialized.m_typeB = uninitialized.m_joint2.GetType()

    b2Assert(uninitialized.m_typeA == b2JointType::e_revoluteJoint || uninitialized.m_typeA == b2JointType::e_prismaticJoint, #get __file__, #get __line__, 'b2Assert(uninitialized.m_typeA == b2JointType::e_revoluteJoint || uninitialized.m_typeA == b2JointType::e_prismaticJoint)')
    b2Assert(uninitialized.m_typeB == b2JointType::e_revoluteJoint || uninitialized.m_typeB == b2JointType::e_prismaticJoint, #get __file__, #get __line__, 'b2Assert(uninitialized.m_typeB == b2JointType::e_revoluteJoint || uninitialized.m_typeB == b2JointType::e_prismaticJoint)')

    coordinateA, coordinateB float = undef

    // TODO_ERIN there might be some problem with the joint edges in b2Joint.

    uninitialized.m_bodyC = uninitialized.m_joint1.GetBodyA()
    uninitialized.m_bodyA = uninitialized.m_joint1.GetBodyB()

    // Body B on joint1 must be dynamic
    b2Assert(uninitialized.m_bodyA.m_type == b2_dynamicBody, #get __file__, #get __line__, 'b2Assert(uninitialized.m_bodyA.m_type == b2_dynamicBody)')

    // Get geometry of joint1
    xfA POD b2Transform = uninitialized.m_bodyA.m_xf
    aA float = uninitialized.m_bodyA.m_sweep.a
    xfC POD b2Transform = uninitialized.m_bodyC.m_xf
    aC float = uninitialized.m_bodyC.m_sweep.a

    if uninitialized.m_typeA == b2JointType::e_revoluteJoint {
        revolute *b2RevoluteJoint = data.joint1 as *b2RevoluteJoint
        uninitialized.m_localAnchorC = revolute.m_localAnchorA
        uninitialized.m_localAnchorA = revolute.m_localAnchorB
        uninitialized.m_referenceAngleA = revolute.m_referenceAngle
        uninitialized.m_localAxisC.SetZero()

        coordinateA = aA - aC - uninitialized.m_referenceAngleA
    } else {
        prismatic *b2PrismaticJoint = data.joint1 as *b2PrismaticJoint
        uninitialized.m_localAnchorC = prismatic.m_localAnchorA
        uninitialized.m_localAnchorA = prismatic.m_localAnchorB
        uninitialized.m_referenceAngleA = prismatic.m_referenceAngle
        uninitialized.m_localAxisC = prismatic.m_localXAxisA

        pC POD b2Vec2 = uninitialized.m_localAnchorC
        pA POD b2Vec2 = b2MulT(xfC.q, b2Mul(xfA.q, uninitialized.m_localAnchorA) + (xfA.p - xfC.p))
        coordinateA = b2Dot(pA - pC, uninitialized.m_localAxisC)
    }

    uninitialized.m_bodyD = uninitialized.m_joint2.GetBodyA()
    uninitialized.m_bodyB = uninitialized.m_joint2.GetBodyB()

    // Body B on joint2 must be dynamic
    b2Assert(uninitialized.m_bodyB.m_type == b2_dynamicBody, #get __file__, #get __line__, 'b2Assert(uninitialized.m_bodyB.m_type == b2_dynamicBody)')

    // Get geometry of joint2
    xfB POD b2Transform = uninitialized.m_bodyB.m_xf
    aB float = uninitialized.m_bodyB.m_sweep.a
    xfD POD b2Transform = uninitialized.m_bodyD.m_xf
    aD float = uninitialized.m_bodyD.m_sweep.a

    if uninitialized.m_typeB == b2JointType::e_revoluteJoint {
        revolute *b2RevoluteJoint = data.joint2 as *b2RevoluteJoint
        uninitialized.m_localAnchorD = revolute.m_localAnchorA
        uninitialized.m_localAnchorB = revolute.m_localAnchorB
        uninitialized.m_referenceAngleB = revolute.m_referenceAngle
        uninitialized.m_localAxisD.SetZero()

        coordinateB = aB - aD - uninitialized.m_referenceAngleB
    } else {
        prismatic *b2PrismaticJoint = data.joint2 as *b2PrismaticJoint
        uninitialized.m_localAnchorD = prismatic.m_localAnchorA
        uninitialized.m_localAnchorB = prismatic.m_localAnchorB
        uninitialized.m_referenceAngleB = prismatic.m_referenceAngle
        uninitialized.m_localAxisD = prismatic.m_localXAxisA

        pD POD b2Vec2 = uninitialized.m_localAnchorD
        pB POD b2Vec2 = b2MulT(xfD.q, b2Mul(xfB.q, uninitialized.m_localAnchorB) + (xfB.p - xfD.p))
        coordinateB = b2Dot(pB - pD, uninitialized.m_localAxisD)
    }

    uninitialized.m_ratio = data.ratio
    uninitialized.m_constant = coordinateA + coordinateB * uninitialized.m_ratio
    uninitialized.m_impulse = 0.0f
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Point-to-point constraint
// C = p2 - p1
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Motor constraint
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

/// Revolute joint definition. This requires defining an anchor point where the
/// bodies are joined. The definition uses local anchor points so that the
/// initial configuration can violate the constraint slightly. You also need to
/// specify the initial relative angle for joint limits. This helps when saving
/// and loading a game.
/// The local anchor points are measured from the body's origin
/// rather than the center of mass because:
/// 1. you might not know where the center of mass will be.
/// 2. if you add/remove shapes from a body and recompute the mass,
///    the joints will be broken.
struct b2RevoluteJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The bodyB angle minus bodyA angle in the reference state (radians).
    referenceAngle float,

    /// A flag to enable joint limits.
    enableLimit bool,

    /// The lower angle for the joint limit (radians).
    lowerAngle float,

    /// The upper angle for the joint limit (radians).
    upperAngle float,

    /// A flag to enable the joint motor.
    enableMotor bool,

    /// The desired motor speed. Usually in radians per second.
    motorSpeed float,

    /// The maximum motor torque used to achieve the desired motor speed.
    /// Usually in N-m.
    maxMotorTorque float
) {
    /// Initialize the bodies, anchors, and reference angle using a world
    /// anchor point.
    func Initialize(in bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
        this.referenceAngle = bB.GetAngle() - bA.GetAngle()
    }
}

func b2RevoluteJointDef() b2RevoluteJointDef {
    rjd POD b2RevoluteJointDef = undef
    *cast *b2JointDef &rjd = b2JointDef()
    rjd.type = b2JointType::e_revoluteJoint
    rjd.localAnchorA.Set(0.0f, 0.0f)
    rjd.localAnchorB.Set(0.0f, 0.0f)
    rjd.referenceAngle = 0.0f
    rjd.lowerAngle = 0.0f
    rjd.upperAngle = 0.0f
    rjd.maxMotorTorque = 0.0f
    rjd.motorSpeed = 0.0f
    rjd.enableLimit = false
    rjd.enableMotor = false
    return rjd
}

/// A revolute joint constrains two bodies to share a common point while they
/// are free to rotate about the point. The relative rotation about the shared
/// point is the joint angle. You can limit the relative rotation with
/// a joint limit that specifies a lower and upper angle. You can use a motor
/// to drive the relative rotation about the shared point. A maximum motor torque
/// is provided so that infinite forces are not generated.
struct b2RevoluteJoint (
    struct b2Joint,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_impulse b2Vec2,
    m_motorImpulse float,
    m_lowerImpulse float,
    m_upperImpulse float,
    m_enableMotor bool,
    m_maxMotorTorque float,
    m_motorSpeed float,
    m_enableLimit bool,
    m_referenceAngle float,
    m_lowerAngle float,
    m_upperAngle float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_K b2Mat22,
    m_angle float,
    m_axialMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 { return &this.m_localAnchorB; }

    /// Get the reference angle.
    func GetReferenceAngle() float { return this.m_referenceAngle; }

    /// Get the current joint angle in radians.
    func GetJointAngle() float {
        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle
    }

    /// Get the current joint angle speed in radians per second.
    func GetJointSpeed() float {
        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity
    }

    /// Is the joint limit enabled?
    func IsLimitEnabled() bool {
        return this.m_enableLimit
    }

    /// Enable/disable the joint limit.
    func EnableLimit(flag bool) void {
        if flag != this.m_enableLimit {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableLimit = flag
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }
    }

    /// Get the lower joint limit in radians.
    func GetLowerLimit() float { return this.m_lowerAngle; }

    /// Get the upper joint limit in radians.
    func GetUpperLimit() float { return this.m_upperAngle; }

    /// Set the joint limits in radians.
    func SetLimits(lower, upper float) void  {
        b2Assert(lower <= upper, #get __file__, #get __line__, 'b2Assert(lower <= upper)')
        
        if lower != this.m_lowerAngle || upper != this.m_upperAngle {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
            this.m_lowerAngle = lower
            this.m_upperAngle = upper
        }
    }

    /// Is the joint motor enabled?
    func IsMotorEnabled() bool { return this.m_enableMotor; }

    /// Enable/disable the joint motor.
    func EnableMotor(flag bool) void {
        if flag != this.m_enableMotor {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableMotor = flag
        }
    }

    /// Set the motor speed in radians per second.
    func SetMotorSpeed(speed float) void {
        if speed != this.m_motorSpeed {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_motorSpeed = speed
        }
    }

    /// Get the motor speed in radians per second.
    func GetMotorSpeed() float { return this.m_motorSpeed; }

    /// Set the maximum motor torque, usually in N-m.
    func SetMaxMotorTorque(torque float) void {
        if torque != this.m_maxMotorTorque {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_maxMotorTorque = torque
        }
    }

    func GetMaxMotorTorque() float { return this.m_maxMotorTorque; }

    /// Get the reaction force given the inverse time step.
    /// Unit is N.
    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)
        return inv_dt * P
    }

    /// Get the reaction torque due to the joint limit given the inverse time step.
    /// Unit is N*m.
    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * (this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse)
    }

    /// Get the current motor torque given the inverse time step.
    /// Unit is N*m.
    func GetMotorTorque(inv_dt float) float {
        return inv_dt * this.m_motorImpulse
    }

    /// Dump to b2Log.
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2RevoluteJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.referenceAngle = %hf;\n', this.m_referenceAngle)
        b2Dump('  jd.enableLimit = bool(%d);\n', this.m_enableLimit)
        b2Dump('  jd.lowerAngle = %hf;\n', this.m_lowerAngle)
        b2Dump('  jd.upperAngle = %hf;\n', this.m_upperAngle)
        b2Dump('  jd.enableMotor = bool(%d);\n', this.m_enableMotor)
        b2Dump('  jd.motorSpeed = %hf;\n', this.m_motorSpeed)
        b2Dump('  jd.maxMotorTorque = %hf;\n', this.m_maxMotorTorque)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    ///
    // (override)
    func Draw(draw *b2Draw) void {
        xfA *b2Transform = this.m_bodyA.GetTransform()
        xfB *b2Transform = this.m_bodyB.GetTransform()
        pA POD b2Vec2 = POD b2Mul(xfA, this.m_localAnchorA)
        pB POD b2Vec2 = POD b2Mul(xfB, this.m_localAnchorB)

        c1 POD b2Color = POD b2Color(0.7f, 0.7f, 0.7f)
        c2 POD b2Color = POD b2Color(0.3f, 0.9f, 0.3f)
        c3 POD b2Color = POD b2Color(0.9f, 0.3f, 0.3f)
        c4 POD b2Color = POD b2Color(0.3f, 0.3f, 0.9f)
        c5 POD b2Color = POD b2Color(0.4f, 0.4f, 0.4f)

        draw.DrawPoint(&pA, 5.0f, &c4)
        draw.DrawPoint(&pB, 5.0f, &c5)

        aA float = this.m_bodyA.GetAngle()
        aB float = this.m_bodyB.GetAngle()
        angle float = aB - aA - this.m_referenceAngle

        define L = 0.5f

        r POD b2Vec2 = L * b2Vec2(cosf(angle), sinf(angle))
        draw.DrawSegment(pB, pB + r, &c1)
        draw.DrawCircle(&pB, L, &c1)

        if this.m_enableLimit {
            rlo POD b2Vec2 = L * b2Vec2(cosf(this.m_lowerAngle), sinf(this.m_lowerAngle))
            rhi POD b2Vec2 = L * b2Vec2(cosf(this.m_upperAngle), sinf(this.m_upperAngle))

            draw.DrawSegment(pB, pB + rlo, &c2)
            draw.DrawSegment(pB, pB + rhi, &c3)
        }

        color POD b2Color = POD b2Color(0.5f, 0.8f, 0.8f)
        draw.DrawSegment(&xfA.p, &pA, &color)
        draw.DrawSegment(&pA, &pB, &color)
        draw.DrawSegment(&xfB.p, &pB, &color)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // J = [-I -r1_skew I r2_skew]
        // r_skew = [-ry rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        this.m_K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB
        this.m_K.ey.x = (0.0f - this.m_rA.y) * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB
        this.m_K.ex.y = this.m_K.ey.x
        this.m_K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB

        this.m_axialMass = iA + iB
        fixedRotation bool = undef

        if this.m_axialMass > 0.0f {
            this.m_axialMass = 1.0f / this.m_axialMass
            fixedRotation = false
        } else {
            fixedRotation = true
        }

        this.m_angle = aB - aA - this.m_referenceAngle

        if this.m_enableLimit == false || fixedRotation {
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        if this.m_enableMotor == false || fixedRotation {
            this.m_motorImpulse = 0.0f
        }

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_impulse.MultiplyAssign(data.step.dtRatio)
            this.m_motorImpulse *= data.step.dtRatio
            this.m_lowerImpulse *= data.step.dtRatio
            this.m_upperImpulse *= data.step.dtRatio

            axialImpulse float = this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse
            P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)

            vA.SubtractAssign(mA * P)
            wA -= iA * (b2Cross(this.m_rA, P) + axialImpulse)

            vB.AddAssign(mB * P)
            wB += iB * (b2Cross(this.m_rB, P) + axialImpulse)
        } else {
            this.m_impulse.SetZero()
            this.m_motorImpulse = 0.0f
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        fixedRotation bool = (iA + iB == 0.0f)

        // Solve motor constraint.
        if this.m_enableMotor && fixedRotation == false {
            Cdot float = wB - wA - this.m_motorSpeed
            impulse float = (0.0f - this.m_axialMass) * Cdot
            oldImpulse float = this.m_motorImpulse
            maxImpulse float = data.step.dt * this.m_maxMotorTorque
            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, (0.0f - maxImpulse), maxImpulse)
            impulse = this.m_motorImpulse - oldImpulse

            wA -= iA * impulse
            wB += iB * impulse
        }

        if this.m_enableLimit && fixedRotation == false {
            // Lower limit
            if true {
                C float = this.m_angle - this.m_lowerAngle
                Cdot float = wB - wA
                impulse float = (0.0f - this.m_axialMass) * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_lowerImpulse
                this.m_lowerImpulse = b2Max(this.m_lowerImpulse + impulse, 0.0f)
                impulse = this.m_lowerImpulse - oldImpulse

                wA -= iA * impulse
                wB += iB * impulse
            }

            // Upper limit
            // Note: signs are flipped to keep C positive when the constraint is satisfied.
            // This also keeps the impulse positive when the limit is active.
            if true {
                C float = this.m_upperAngle - this.m_angle
                Cdot float = wA - wB
                impulse float = -this.m_axialMass * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_upperImpulse
                this.m_upperImpulse = b2Max(this.m_upperImpulse + impulse, 0.0f)
                impulse = this.m_upperImpulse - oldImpulse

                wA += iA * impulse
                wB -= iB * impulse
            }
        }

        // Solve point-to-point constraint
        if true {
            Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)
            impulse POD b2Vec2 = this.m_K.Solve(Cdot.Negated())

            this.m_impulse.x += impulse.x
            this.m_impulse.y += impulse.y

            vA.SubtractAssign(mA * impulse)
            wA -= iA * b2Cross(this.m_rA, impulse)

            vB.AddAssign(mB * impulse)
            wB += iB * b2Cross(this.m_rB, impulse)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        angularError float = 0.0f
        positionError float = 0.0f

        fixedRotation bool = (this.m_invIA + this.m_invIB == 0.0f)

        // Solve angular limit constraint
        if this.m_enableLimit && fixedRotation == false {
            angle float = aB - aA - this.m_referenceAngle
            C float = 0.0f

            if b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0f * b2_angularSlop {
                // Prevent large angular corrections
                C = b2Clamp(angle - this.m_lowerAngle, (0.0f - b2_maxAngularCorrection), b2_maxAngularCorrection)
            } else if angle <= this.m_lowerAngle {
                // Prevent large angular corrections and allow some slop.
                C = b2Clamp(angle - this.m_lowerAngle + b2_angularSlop, (0.0f - b2_maxAngularCorrection), 0.0f)
            } else if angle >= this.m_upperAngle {
                // Prevent large angular corrections and allow some slop.
                C = b2Clamp(angle - this.m_upperAngle - b2_angularSlop, 0.0f, b2_maxAngularCorrection)
            }

            limitImpulse float = (0.0f - this.m_axialMass) * C
            aA -= this.m_invIA * limitImpulse
            aB += this.m_invIB * limitImpulse
            angularError = b2Abs(C)
        }

        // Solve point-to-point constraint.
        if true {
            qA.Set(aA)
            qB.Set(aB)
            rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
            rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

            C POD b2Vec2 = cB + rB - cA - rA
            positionError = C.Length()

            mA float = this.m_invMassA
            mB float = this.m_invMassB
            iA float = this.m_invIA
            iB float = this.m_invIB

            K b2Mat22 = undef
            K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y
            K.ex.y = (0.0f - iA) * rA.x * rA.y - iB * rB.x * rB.y
            K.ey.x = K.ex.y
            K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x

            impulse POD b2Vec2 = K.Solve(C).Negated()

            cA.SubtractAssign(mA * impulse)
            aA -= iA * b2Cross(rA, impulse)

            cB.AddAssign(mB * impulse)
            aB += iB * b2Cross(rB, impulse)
        }

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return positionError <= b2_linearSlop && angularError <= b2_angularSlop
    }
}

func b2Joint\CreateRaw\b2RevoluteJoint(out uninitialized *b2RevoluteJoint, in definition *b2RevoluteJointDef) *b2RevoluteJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_referenceAngle = definition.referenceAngle

    uninitialized.m_impulse.SetZero()
    uninitialized.m_axialMass = 0.0f
    uninitialized.m_motorImpulse = 0.0f
    uninitialized.m_lowerImpulse = 0.0f
    uninitialized.m_upperImpulse = 0.0f

    uninitialized.m_lowerAngle = definition.lowerAngle
    uninitialized.m_upperAngle = definition.upperAngle
    uninitialized.m_maxMotorTorque = definition.maxMotorTorque
    uninitialized.m_motorSpeed = definition.motorSpeed
    uninitialized.m_enableLimit = definition.enableLimit
    uninitialized.m_enableMotor = definition.enableMotor

    uninitialized.m_angle = 0.0f

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Linear constraint (point-to-line)
// d = p2 - p1 = x2 + r2 - x1 - r1
// C = dot(perp, d)
// Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 - cross(w1, r1))
//      = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) + dot(cross(r2, perp), v2)
// J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]
//
// Angular constraint
// C = a2 - a1 + a_initial
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
//
// K = J * invM * JT
//
// J = [-a -s1 a s2]
//     [0  -1  0  1]
// a = perp
// s1 = cross(d + r1, a) = cross(p2 - x1, a)
// s2 = cross(r2, a) = cross(p2 - x2, a)

// Motor/Limit linear constraint
// C = dot(ax1, d)
// Cdot = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) + dot(cross(r2, ax1), v2)
// J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]

// Predictive limit is applied even when the limit is not active.
// Prevents a constraint speed that can lead to a constraint error in one time step.
// Want C2 = C1 + h * Cdot >= 0
// Or:
// Cdot + C1/h >= 0
// I do not apply a negative constraint error because that is handled in position correction.
// So:
// Cdot + max(C1, 0)/h >= 0

// Block Solver
// We develop a block solver that includes the angular and linear constraints. This makes the limit stiffer.
//
// The Jacobian has 2 rows:
// J = [-uT -s1 uT s2] // linear
//     [0   -1   0  1] // angular
//
// u = perp
// s1 = cross(d + r1, u), s2 = cross(r2, u)
// a1 = cross(d + r1, v), a2 = cross(r2, v)

struct b2PrismaticJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The local translation unit axis in bodyA.
    localAxisA b2Vec2,

    /// The constrained angle between the bodies: bodyB_angle - bodyA_angle.
    referenceAngle float,

    /// Enable/disable the joint limit.
    enableLimit bool,

    /// The lower translation limit, usually in meters.
    lowerTranslation float,

    /// The upper translation limit, usually in meters.
    upperTranslation float,

    /// Enable/disable the joint motor.
    enableMotor bool,

    /// The maximum motor torque, usually in N-m.
    maxMotorForce float,

    /// The desired motor speed in radians per second.
    motorSpeed float
) {
    /// Initialize the bodies, anchors, axis, and reference angle using the world
    /// anchor and unit world axis.
    func Initialize(in bA, bB *b2Body, in anchor, axis *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
        this.localAxisA = bA.GetLocalVector(axis)
        this.referenceAngle = bB.GetAngle() - bA.GetAngle()
    }
}

func b2PrismaticJointDef() b2PrismaticJointDef {
    pjd POD b2PrismaticJointDef = undef
    *cast *b2JointDef &pjd = b2JointDef()
    pjd.type = b2JointType::e_prismaticJoint
    pjd.localAnchorA.SetZero()
    pjd.localAnchorB.SetZero()
    pjd.localAxisA.Set(1.0f, 0.0f)
    pjd.referenceAngle = 0.0f
    pjd.enableLimit = false
    pjd.lowerTranslation = 0.0f
    pjd.upperTranslation = 0.0f
    pjd.enableMotor = false
    pjd.maxMotorForce = 0.0f
    pjd.motorSpeed = 0.0f
    return pjd
}

/// A prismatic joint. This joint provides one degree of freedom: translation
/// along an axis fixed in bodyA. Relative rotation is prevented. You can
/// use a joint limit to restrict the range of motion and a joint motor to
/// drive the motion or to model joint friction.
struct b2PrismaticJoint (
    struct b2Joint,

    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_localXAxisA b2Vec2,
    m_localYAxisA b2Vec2,
    m_referenceAngle float,
    m_impulse b2Vec2,
    m_motorImpulse float,
    m_lowerImpulse float,
    m_upperImpulse float,
    m_lowerTranslation float,
    m_upperTranslation float,
    m_maxMotorForce float,
    m_motorSpeed float,
    m_enableLimit bool,
    m_enableMotor bool,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_axis, m_perp b2Vec2,
    m_s1, m_s2 float,
    m_a1, m_a2 float,
    m_K b2Mat22,
    m_translation float,
    m_axialMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        return inv_dt * (this.m_impulse.x * this.m_perp + (this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_axis)
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_impulse.y
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 { return &this.m_localAnchorB; }

    /// The local joint axis relative to bodyA.
    func GetLocalAxisA() *b2Vec2 { return &this.m_localXAxisA; }

    /// Get the reference angle.
    func GetReferenceAngle() float { return this.m_referenceAngle; }

    /// Get the current joint translation, usually in meters.
    func GetJointTranslation() float {
        pA POD b2Vec2 = this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
        pB POD b2Vec2 = this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
        d POD b2Vec2 = pB - pA
        axis POD b2Vec2 = this.m_bodyA.GetWorldVector(&this.m_localXAxisA)

        translation float = b2Dot(d, axis)
        return translation
    }

    /// Get the current joint translation speed, usually in meters per second.
    func GetJointSpeed() float {
        bA *b2Body = this.m_bodyA
        bB *b2Body = this.m_bodyB

        rA POD b2Vec2 = b2Mul(bA.m_xf.q, this.m_localAnchorA - bA.m_sweep.localCenter)
        rB POD b2Vec2 = b2Mul(bB.m_xf.q, this.m_localAnchorB - bB.m_sweep.localCenter)
        p1 POD b2Vec2 = bA.m_sweep.c + rA
        p2 POD b2Vec2 = bB.m_sweep.c + rB
        d POD b2Vec2 = p2 - p1
        axis POD b2Vec2 = b2Mul(bA.m_xf.q, this.m_localXAxisA)

        vA POD b2Vec2 = bA.m_linearVelocity
        vB POD b2Vec2 = bB.m_linearVelocity
        wA float = bA.m_angularVelocity
        wB float = bB.m_angularVelocity

        speed float = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA))
        return speed
    }

    /// Is the joint limit enabled?
    func IsLimitEnabled() bool {
        return this.m_enableLimit
    }

    /// Enable/disable the joint limit.
    func EnableLimit(flag bool) void {
        if flag != this.m_enableLimit {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableLimit = flag
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }
    }

    /// Get the lower joint limit, usually in meters.
    func GetLowerLimit() float {
        return this.m_lowerTranslation
    }

    /// Get the upper joint limit, usually in meters.
    func GetUpperLimit() float {
        return this.m_upperTranslation
    }

    /// Set the joint limits, usually in meters.
    func SetLimits(lower, upper float) void {
        b2Assert(lower <= upper, #get __file__, #get __line__, 'b2Assert(lower <= upper)')
        if lower != this.m_lowerTranslation || upper != this.m_upperTranslation {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_lowerTranslation = lower
            this.m_upperTranslation = upper
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }
    }

    /// Is the joint motor enabled?
    func IsMotorEnabled() bool {
        return this.m_enableMotor
    }

    /// Enable/disable the joint motor.
    func EnableMotor(flag bool) void {
        if flag != this.m_enableMotor {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableMotor = flag
        }
    }

    /// Set the motor speed, usually in meters per second.
    func SetMotorSpeed(speed float) void {
        if speed != this.m_motorSpeed {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_motorSpeed = speed
        }
    }

    /// Get the motor speed, usually in meters per second.
    func GetMotorSpeed() float { return this.m_motorSpeed; }

    /// Set the maximum motor force, usually in N.
    func SetMaxMotorForce(force float) void {
        if force != this.m_maxMotorForce {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_maxMotorForce = force
        }
    }

    func GetMaxMotorForce() float { return this.m_maxMotorForce; }

    /// Get the current motor force given the inverse time step, usually in N.
    func GetMotorForce(inv_dt float) float {
        return inv_dt * this.m_motorImpulse
    }

    /// Dump to b2Log
    // (override)
    func Dump() void {
        // FLT_DECIMAL_DIG == 9

        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2PrismaticJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.localAxisA.Set(%hf, %hf);\n', this.m_localXAxisA.x, this.m_localXAxisA.y)
        b2Dump('  jd.referenceAngle = %hf;\n', this.m_referenceAngle)
        b2Dump('  jd.enableLimit = bool(%d);\n', this.m_enableLimit)
        b2Dump('  jd.lowerTranslation = %hf;\n', this.m_lowerTranslation)
        b2Dump('  jd.upperTranslation = %hf;\n', this.m_upperTranslation)
        b2Dump('  jd.enableMotor = bool(%d);\n', this.m_enableMotor)
        b2Dump('  jd.motorSpeed = %hf;\n', this.m_motorSpeed)
        b2Dump('  jd.maxMotorForce = %hf;\n', this.m_maxMotorForce)
        b2Dump('  joints[%d] = m_world.CreateJoint(&jd);\n', this.m_index)
    }

    ///
    // (override)
    func Draw(draw *b2Draw) void {
        xfA *b2Transform = this.m_bodyA.GetTransform()
        xfB *b2Transform = this.m_bodyB.GetTransform()
        pA POD b2Vec2 = b2Mul(xfA, this.m_localAnchorA)
        pB POD b2Vec2 = b2Mul(xfB, this.m_localAnchorB)

        axis POD b2Vec2 = b2Mul(xfA.q, this.m_localXAxisA)

        c1 POD b2Color = POD b2Color(0.7f, 0.7f, 0.7f)
        c2 POD b2Color = POD b2Color(0.3f, 0.9f, 0.3f)
        c3 POD b2Color = POD b2Color(0.9f, 0.3f, 0.3f)
        c4 POD b2Color = POD b2Color(0.3f, 0.3f, 0.9f)
        c5 POD b2Color = POD b2Color(0.4f, 0.4f, 0.4f)

        draw.DrawSegment(&pA, &pB, &c5)

        if this.m_enableLimit {
            lower b2Vec2 = pA + this.m_lowerTranslation * axis
            upper b2Vec2 = pA + this.m_upperTranslation * axis
            perp b2Vec2 = b2Mul(xfA.q, this.m_localYAxisA)
            draw.DrawSegment(lower, upper, &c1)
            draw.DrawSegment(lower - 0.5f * perp, lower + 0.5f * perp, &c2)
            draw.DrawSegment(upper - 0.5f * perp, upper + 0.5f * perp, &c3)
        } else {
            draw.DrawSegment(pA - 1.0f * axis, pA + 1.0f * axis, &c1)
        }

        draw.DrawPoint(&pA, 5.0f, &c1)
        draw.DrawPoint(&pB, 5.0f, &c4)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        // Compute the effective masses.
        rA POD b2Vec2 = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
        d POD b2Vec2 = (cB - cA) + rB - rA

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        // Compute motor Jacobian and effective mass.
        if true {
            this.m_axis = b2Mul(qA, this.m_localXAxisA)
            this.m_a1 = b2Cross(d + rA, this.m_axis)
            this.m_a2 = b2Cross(rB, this.m_axis)

            this.m_axialMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2
            if this.m_axialMass > 0.0f {
                this.m_axialMass = 1.0f / this.m_axialMass
            }
        }

        // Prismatic constraint.
        if true {
            this.m_perp = b2Mul(qA, this.m_localYAxisA)

            this.m_s1 = b2Cross(d + rA, this.m_perp)
            this.m_s2 = b2Cross(rB, this.m_perp)

            k11 float = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2
            k12 float = iA * this.m_s1 + iB * this.m_s2
            k22 float = iA + iB
            if k22 == 0.0f {
                // For bodies with fixed rotation.
                k22 = 1.0f
            }

            this.m_K.ex.Set(k11, k12)
            this.m_K.ey.Set(k12, k22)
        }

        if this.m_enableLimit {
            this.m_translation = b2Dot(this.m_axis, d)
        } else {
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        if this.m_enableMotor == false {
            this.m_motorImpulse = 0.0f
        }

        if data.step.warmStarting {
            // Account for variable time step.
            this.m_impulse.MultiplyAssign(data.step.dtRatio)
            this.m_motorImpulse *= data.step.dtRatio
            this.m_lowerImpulse *= data.step.dtRatio
            this.m_upperImpulse *= data.step.dtRatio

            axialImpulse float = this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse
            P POD b2Vec2 = this.m_impulse.x * this.m_perp + axialImpulse * this.m_axis
            LA float = this.m_impulse.x * this.m_s1 + this.m_impulse.y + axialImpulse * this.m_a1
            LB float = this.m_impulse.x * this.m_s2 + this.m_impulse.y + axialImpulse * this.m_a2

            vA.SubtractAssign(mA * P)
            wA -= iA * LA

            vB.AddAssign(mB * P)
            wB += iB * LB
        } else {
            this.m_impulse.SetZero()
            this.m_motorImpulse = 0.0f
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        // Solve linear motor constraint
        if this.m_enableMotor {
            Cdot float = b2Dot(this.m_axis, vB - vA) + this.m_a2 * wB - this.m_a1 * wA
            impulse float = this.m_axialMass * (this.m_motorSpeed - Cdot)
            oldImpulse float = this.m_motorImpulse
            maxImpulse float = data.step.dt * this.m_maxMotorForce
            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, (0.0f - maxImpulse), maxImpulse)
            impulse = this.m_motorImpulse - oldImpulse

            P POD b2Vec2 = impulse * this.m_axis
            LA float = impulse * this.m_a1
            LB float = impulse * this.m_a2

            vA.SubtractAssign(mA * P)
            wA -= iA * LA
            vB.AddAssign(mB * P)
            wB += iB * LB
        }

        if this.m_enableLimit {
            // Lower limit
            if true {
                C float = this.m_translation - this.m_lowerTranslation
                Cdot float = b2Dot(this.m_axis, vB - vA) + this.m_a2 * wB - this.m_a1 * wA
                impulse float = (0.0f - this.m_axialMass) * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_lowerImpulse
                this.m_lowerImpulse = b2Max(this.m_lowerImpulse + impulse, 0.0f)
                impulse = this.m_lowerImpulse - oldImpulse

                P POD b2Vec2 = impulse * this.m_axis
                LA POD float = impulse * this.m_a1
                LB POD float = impulse * this.m_a2

                vA.SubtractAssign(mA * P)
                wA -= iA * LA
                vB.AddAssign(mB * P)
                wB += iB * LB
            }

            // Upper limit
            // Note: signs are flipped to keep C positive when the constraint is satisfied.
            // This also keeps the impulse positive when the limit is active.
            if true {
                C float = this.m_upperTranslation - this.m_translation
                Cdot float = b2Dot(this.m_axis, vA - vB) + this.m_a1 * wA - this.m_a2 * wB
                impulse float = (0.0f - this.m_axialMass) * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_upperImpulse
                this.m_upperImpulse = b2Max(this.m_upperImpulse + impulse, 0.0f)
                impulse = this.m_upperImpulse - oldImpulse

                P POD b2Vec2 = impulse * this.m_axis
                LA float = impulse * this.m_a1
                LB float = impulse * this.m_a2

                vA.AddAssign(mA * P)
                wA += iA * LA
                vB.SubtractAssign(mB * P)
                wB -= iB * LB
            }
        }

        // Solve the prismatic constraint in block form.
        if true {
            Cdot POD b2Vec2 = undef
            Cdot.x = b2Dot(this.m_perp, vB - vA) + this.m_s2 * wB - this.m_s1 * wA
            Cdot.y = wB - wA

            df POD b2Vec2 = this.m_K.Solve(Cdot.Negated())
            this.m_impulse = this.m_impulse + df

            P POD b2Vec2 = df.x * this.m_perp
            LA float = df.x * this.m_s1 + df.y
            LB float = df.x * this.m_s2 + df.y

            vA.SubtractAssign(mA * P)
            wA -= iA * LA

            vB.AddAssign(mB * P)
            wB += iB * LB
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // A velocity based solver computes reaction forces(impulses) using the velocity constraint solver.Under this context,
    // the position solver is not there to resolve forces.It is only there to cope with integration error.
    //
    // Therefore, the pseudo impulses in the position solver do not have any physical meaning.Thus it is okay if they suck.
    //
    // We could take the active state from the velocity solver.However, the joint might push past the limit when the velocity
    // solver indicates the limit is inactive.
    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        // Compute fresh Jacobians
        rA POD b2Vec2 = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
        d POD b2Vec2 = cB + rB - cA - rA

        axis POD b2Vec2 = b2Mul(qA, this.m_localXAxisA)
        a1 float = b2Cross(d + rA, axis)
        a2 float = b2Cross(rB, axis)
        perp POD b2Vec2 = b2Mul(qA, this.m_localYAxisA)

        s1 float = b2Cross(d + rA, perp)
        s2 float = b2Cross(rB, perp)

        impulse POD b2Vec3 = undef
        C1 POD b2Vec2 = undef
        C1.x = b2Dot(perp, d)
        C1.y = aB - aA - this.m_referenceAngle

        linearError float = b2Abs(C1.x)
        angularError float = b2Abs(C1.y)

        active bool = false
        C2 float = 0.0f

        if this.m_enableLimit {
            translation float = b2Dot(axis, d)

            if b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0f * b2_linearSlop {
                C2 = translation
                linearError = b2Max(linearError, b2Abs(translation))
                active = true
            } else if translation <= this.m_lowerTranslation {
                C2 = b2Min(translation - this.m_lowerTranslation, 0.0f)
                linearError = b2Max(linearError, this.m_lowerTranslation - translation)
                active = true
            } else if translation >= this.m_upperTranslation {
                C2 = b2Max(translation - this.m_upperTranslation, 0.0f)
                linearError = b2Max(linearError, translation - this.m_upperTranslation)
                active = true
            }
        }

        if active {
            k11 float = mA + mB + iA * s1 * s1 + iB * s2 * s2
            k12 float = iA * s1 + iB * s2
            k13 float = iA * s1 * a1 + iB * s2 * a2
            k22 float = iA + iB

            if k22 == 0.0f {
                // For fixed rotation
                k22 = 1.0f
            }

            k23 float = iA * a1 + iB * a2
            k33 float = mA + mB + iA * a1 * a1 + iB * a2 * a2

            K POD b2Mat33 = undef
            K.ex.Set(k11, k12, k13)
            K.ey.Set(k12, k22, k23)
            K.ez.Set(k13, k23, k33)

            C POD b2Vec3 = undef
            C.x = C1.x
            C.y = C1.y
            C.z = C2

            impulse = K.Solve33(C.Negated())
        } else {
            k11 float = mA + mB + iA * s1 * s1 + iB * s2 * s2
            k12 float = iA * s1 + iB * s2
            k22 float = iA + iB
            if k22 == 0.0f {
                k22 = 1.0f
            }

            K POD b2Mat22 = undef
            K.ex.Set(k11, k12)
            K.ey.Set(k12, k22)

            impulse1 POD b2Vec2 = K.Solve(C1.Negated())
            impulse.x = impulse1.x
            impulse.y = impulse1.y
            impulse.z = 0.0f
        }

        P POD b2Vec2 = impulse.x * perp + impulse.z * axis
        LA float = impulse.x * s1 + impulse.y + impulse.z * a1
        LB float = impulse.x * s2 + impulse.y + impulse.z * a2

        cA.SubtractAssign(mA * P)
        aA -= iA * LA
        cB.AddAssign(mB * P)
        aB += iB * LB

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return linearError <= b2_linearSlop && angularError <= b2_angularSlop
    }
}

func b2Joint\CreateRaw\b2PrismaticJoint(out uninitialized *b2PrismaticJoint, in definition *b2PrismaticJointDef) *b2PrismaticJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_localXAxisA = definition.localAxisA
    uninitialized.m_localXAxisA.Normalize()
    uninitialized.m_localYAxisA = b2Cross(1.0f, uninitialized.m_localXAxisA)
    uninitialized.m_referenceAngle = definition.referenceAngle

    uninitialized.m_impulse.SetZero()
    uninitialized.m_axialMass = 0.0f
    uninitialized.m_motorImpulse = 0.0f
    uninitialized.m_lowerImpulse = 0.0f
    uninitialized.m_upperImpulse = 0.0f

    uninitialized.m_lowerTranslation = definition.lowerTranslation
    uninitialized.m_upperTranslation = definition.upperTranslation

    b2Assert(uninitialized.m_lowerTranslation <= uninitialized.m_upperTranslation, #get __file__, #get __line__, 'b2Assert(uninitialized.m_lowerTranslation <= uninitialized.m_upperTranslation)')

    uninitialized.m_maxMotorForce = definition.maxMotorForce
    uninitialized.m_motorSpeed = definition.motorSpeed
    uninitialized.m_enableLimit = definition.enableLimit
    uninitialized.m_enableMotor = definition.enableMotor

    uninitialized.m_translation = 0.0f
    uninitialized.m_axis.SetZero()
    uninitialized.m_perp.SetZero()

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Point-to-point constraint
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)
//
// r1 = offset - c1
// r2 = -c2

// Angle constraint
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

/// Motor joint definition.
struct b2MotorJointDef (
    struct b2JointDef,

    /// Position of bodyB minus the position of bodyA, in bodyA's frame, in meters.
    linearOffset b2Vec2,

    /// The bodyB angle minus bodyA angle in radians.
    angularOffset float,

    /// The maximum motor force in N.
    maxForce float,

    /// The maximum motor torque in N-m.
    maxTorque float,

    /// Position correction factor in the range [0,1].
    correctionFactor float
) {
    /// Initialize the bodies and offsets using the current transforms.
    func Initialize(bA, bB *b2Body) void {
        this.bodyA = bA
        this.bodyB = bB
        this.linearOffset = bA.GetLocalPoint(bB.GetPosition())
        angleA float = bA.GetAngle()
        angleB float = bB.GetAngle()
        this.angularOffset = angleB - angleA
    }
}

func b2MotorJointDef() b2MotorJointDef {
    mjd POD b2MotorJointDef = undef
    *cast *b2JointDef &mjd = b2JointDef()
    mjd.type = b2JointType::e_motorJoint
    mjd.linearOffset.SetZero()
    mjd.angularOffset = 0.0f
    mjd.maxForce = 1.0f
    mjd.maxTorque = 1.0f
    mjd.correctionFactor = 0.3f
    return mjd
}

/// A motor joint is used to control the relative motion
/// between two bodies. A typical usage is to control the movement
/// of a dynamic body with respect to the ground.
struct b2MotorJoint (
    struct b2Joint,

    // Solver shared
    m_linearOffset b2Vec2,
    m_angularOffset float,
    m_linearImpulse b2Vec2,
    m_angularImpulse float,
    m_maxForce float,
    m_maxTorque float,
    m_correctionFactor float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_linearError b2Vec2,
    m_angularError float,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_linearMass b2Mat22,
    m_angularMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return *this.m_bodyA.GetPosition()
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return *this.m_bodyB.GetPosition()
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        return this.m_linearImpulse * inv_dt
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_angularImpulse
    }

    /// Set/get the target linear offset, in frame A, in meters.
    func SetLinearOffset(in linearOffset *b2Vec2) void {
        if linearOffset.x != this.m_linearOffset.x || linearOffset.y != this.m_linearOffset.y {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_linearOffset = *linearOffset
        }
    }
    
    func GetLinearOffset() *b2Vec2 {
        return &this.m_linearOffset
    }

    /// Set/get the target angular offset, in radians.
    func SetAngularOffset(angularOffset float) void {
        if angularOffset != this.m_angularOffset {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_angularOffset = angularOffset
        }
    }

    func GetAngularOffset() float {
        return this.m_angularOffset
    }

    /// Set the maximum friction force in N.
    func SetMaxForce(force float) void {
        b2Assert(b2IsValid(force) && force >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(force) && force >= 0.0f)')
        this.m_maxForce = force
    }

    /// Get the maximum friction force in N.
    func GetMaxForce() float {
        return this.m_maxForce
    }

    /// Set the maximum friction torque in N*m.
    func SetMaxTorque(torque float) void {
        b2Assert(b2IsValid(torque) && torque >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(torque) && torque >= 0.0f)')
        this.m_maxTorque = torque
    }

    /// Get the maximum friction torque in N*m.
    func GetMaxTorque() float {
        return this.m_maxTorque
    }

    /// Set the position correction factor in the range [0,1].
    func SetCorrectionFactor(factor float) void {
        b2Assert(b2IsValid(factor) && 0.0f <= factor && factor <= 1.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(factor) && 0.0f <= factor && factor <= 1.0f)')
        this.m_correctionFactor = factor
    }

    /// Get the position correction factor in the range [0,1].
    func GetCorrectionFactor() float {
        return this.m_correctionFactor
    }

    /// Dump to b2Log
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2MotorJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.linearOffset.Set(%hf, %hf);\n', this.m_linearOffset.x, this.m_linearOffset.y)
        b2Dump('  jd.angularOffset = %hf;\n', this.m_angularOffset)
        b2Dump('  jd.maxForce = %hf;\n', this.m_maxForce)
        b2Dump('  jd.maxTorque = %hf;\n', this.m_maxTorque)
        b2Dump('  jd.correctionFactor = %hf;\n', this.m_correctionFactor)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        cA POD b2Vec2 = data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        // Compute the effective mass matrix.
        this.m_rA = b2Mul(qA, this.m_linearOffset - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localCenterB.Negated())

        // J = [-I -r1_skew I r2_skew]
        // r_skew = [-ry rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        // Upper 2 by 2 of K for point to point
        K POD b2Mat22 = undef
        K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y * this.m_rB.y
        K.ex.y = -1.0f * iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y
        K.ey.x = K.ex.y
        K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x * this.m_rB.x

        this.m_linearMass = K.GetInverse()
        this.m_angularMass = iA + iB

        if this.m_angularMass > 0.0f {
            this.m_angularMass = 1.0f / this.m_angularMass
        }

        this.m_linearError = cB + this.m_rB - cA - this.m_rA
        this.m_angularError = aB - aA - this.m_angularOffset

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_linearImpulse.MultiplyAssign(data.step.dtRatio)
            this.m_angularImpulse *= data.step.dtRatio

            P POD b2Vec2 = POD b2Vec2(this.m_linearImpulse.x, this.m_linearImpulse.y)
            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + this.m_angularImpulse)
            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + this.m_angularImpulse)
        } else {
            this.m_linearImpulse.SetZero()
            this.m_angularImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        h float = data.step.dt
        inv_h float = data.step.inv_dt

        // Solve angular friction
        if true {
            Cdot float = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError
            impulse float = -1.0f * this.m_angularMass * Cdot

            oldImpulse float = this.m_angularImpulse
            maxImpulse float = h * this.m_maxTorque
            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -1.0f * maxImpulse, maxImpulse)
            impulse = this.m_angularImpulse - oldImpulse

            wA -= iA * impulse
            wB += iB * impulse
        }

        // Solve linear friction
        if true {
            Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA) + inv_h * this.m_correctionFactor * this.m_linearError

            impulse POD b2Vec2 = POD b2Mul(this.m_linearMass, Cdot).Negated()
            oldImpulse POD b2Vec2 = POD this.m_linearImpulse
            this.m_linearImpulse.AddAssign(impulse)

            maxImpulse float = h * this.m_maxForce

            if this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse {
                this.m_linearImpulse.Normalize()
                this.m_linearImpulse = this.m_linearImpulse * maxImpulse
            }

            impulse = this.m_linearImpulse - oldImpulse

            vA.SubtractAssign(impulse * mA)
            wA -= iA * b2Cross(this.m_rA, impulse)

            vB.AddAssign(impulse * mB)
            wB += iB * b2Cross(this.m_rB, impulse)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in _data *b2SolverData) bool {
        return true
    }
}


func b2Joint\CreateRaw\b2MotorJoint(out uninitialized *b2MotorJoint, in definition *b2MotorJointDef) *b2MotorJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_linearOffset = definition.linearOffset
    uninitialized.m_angularOffset = definition.angularOffset

    uninitialized.m_linearImpulse.SetZero()
    uninitialized.m_angularImpulse = 0.0f

    uninitialized.m_maxForce = definition.maxForce
    uninitialized.m_maxTorque = definition.maxTorque
    uninitialized.m_correctionFactor = definition.correctionFactor

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// p = attached point, m = mouse point
// C = p - m
// Cdot = v
//      = v + cross(w, r)
// J = [I r_skew]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

struct b2MouseJointDef (
    struct b2JointDef,

    /// The initial world target point. This is assumed
    /// to coincide with the body anchor initially.
    target b2Vec2,

    /// The maximum constraint force that can be exerted
    /// to move the candidate body. Usually you will express
    /// as some multiple of the weight (multiplier * mass * gravity).
    maxForce float,

    /// The linear stiffness in N/m
    stiffness float,

    /// The linear damping in N*s/m
    damping float
)

func b2MouseJointDef() b2MouseJointDef {
    mjd POD b2MouseJointDef = undef
    *cast *b2JointDef &mjd = b2JointDef()
    mjd.type = b2JointType::e_mouseJoint
    mjd.target.Set(0.0f, 0.0f)
    mjd.maxForce = 0.0f
    mjd.stiffness = 0.0f
    mjd.damping = 0.0f
    return mjd
}

/// A mouse joint is used to make a point on a body track a
/// specified world point. This a soft constraint with a maximum
/// force. This allows the constraint to stretch and without
/// applying huge forces.
/// NOTE: this joint is not documented in the manual because it was
/// developed to be used in the testbed. If you want to learn how to
/// use the mouse joint, look at the testbed.
struct b2MouseJoint (
    struct b2Joint,

    m_localAnchorB b2Vec2,
    m_targetA b2Vec2,
    m_stiffness float,
    m_damping float,
    m_beta float,

    // Solver shared
    m_impulse b2Vec2,
    m_maxForce float,
    m_gamma float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rB b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassB float,
    m_invIB float,
    m_mass b2Mat22,
    m_C b2Vec2
) {
    /// Implements b2Joint.
    // (override)
    func GetAnchorA() b2Vec2 { return this.m_targetA; }

    /// Implements b2Joint.
    // (override)
    func GetAnchorB() b2Vec2 { return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB); }

    /// Implements b2Joint.
    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 { return inv_dt * this.m_impulse; }

    /// Implements b2Joint.
    // (override)
    func GetReactionTorque(inv_dt float) float { return inv_dt * 0.0f; }

    /// Use this to update the target point.
    func SetTarget(in target POD b2Vec2) { this.SetTarget(&target); }
    func SetTarget(in target *b2Vec2) void {
        if *target != this.m_targetA {
            this.m_bodyB.SetAwake(true)
            this.m_targetA = *target
        }
    }

    func GetTarget() *b2Vec2 { return &this.m_targetA; }

    /// Set/get the maximum force in Newtons.
    func SetMaxForce(force float) void { this.m_maxForce = force; }

    func GetMaxForce() float { return this.m_maxForce; }

    /// Set/get the linear stiffness in N/m
    func SetStiffness(stiffness float) void { this.m_stiffness = stiffness; }
    func GetStiffness() float { return this.m_stiffness; }

    /// Set/get linear damping in N*s/m
    func SetDamping(damping float) void { this.m_damping = damping; }
    func GetDamping() float { return this.m_damping; }

    /// The mouse joint does not support dumping.
    // (override)
    func Dump() void { b2Log('Mouse joint dumping is not supported.\n'); }

    /// Implement b2Joint::ShiftOrigin
    // (override)
    func ShiftOrigin(in newOrigin *b2Vec2) void { this.m_targetA.SubtractAssign(*newOrigin); }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIB = this.m_bodyB.m_invI

        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qB POD b2Rot = POD b2Rot(aB)

        _mass float = this.m_bodyB.GetMass() // (unused)

        d float = this.m_damping
        k float = this.m_stiffness

        // magic formulas
        // gamma has units of inverse mass.
        // beta has units of inverse time.
        h float = data.step.dt
        this.m_gamma = h * (d + h * k)
        if this.m_gamma != 0.0f {
            this.m_gamma = 1.0f / this.m_gamma
        }
        this.m_beta = h * k * this.m_gamma

        // Compute the effective mass matrix.
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]
        //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]
        //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]
        K POD b2Mat22 = undef
        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma
        K.ex.y = (0.0f - this.m_invIB) * this.m_rB.x * this.m_rB.y
        K.ey.x = K.ex.y
        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma

        this.m_mass = K.GetInverse()

        this.m_C = cB + this.m_rB - this.m_targetA
        this.m_C.MultiplyAssign(this.m_beta)

        // Cheat with some damping
        wB *= 0.98f

        if data.step.warmStarting {
            this.m_impulse.MultiplyAssign(data.step.dtRatio)
            vB.AddAssign(this.m_invMassB * this.m_impulse)
            wB += this.m_invIB * b2Cross(this.m_rB, this.m_impulse)
        } else {
            this.m_impulse.SetZero()
        }

        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        // Cdot = v + cross(w, r)
        Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
        impulse POD b2Vec2 = b2Mul(this.m_mass, (Cdot + this.m_C + this.m_gamma * this.m_impulse).Negated())

        oldImpulse POD b2Vec2 = this.m_impulse
        this.m_impulse.AddAssign(impulse)

        maxImpulse float = data.step.dt * this.m_maxForce

        if this.m_impulse.LengthSquared() > maxImpulse * maxImpulse {
            this.m_impulse = this.m_impulse * (maxImpulse / this.m_impulse.Length())
        }
        impulse = this.m_impulse - oldImpulse

        vB.AddAssign(this.m_invMassB * impulse)
        wB += this.m_invIB * b2Cross(this.m_rB, impulse)

        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in _data *b2SolverData) bool {
        // (unused)
        return true
    }
}

func b2Joint\CreateRaw\b2MouseJoint(out uninitialized *b2MouseJoint, in definition *b2MouseJointDef) *b2MouseJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_targetA = definition.target
    uninitialized.m_localAnchorB = b2MulT(uninitialized.m_bodyB.GetTransform(), uninitialized.m_targetA)
    uninitialized.m_maxForce = definition.maxForce
    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    uninitialized.m_impulse.SetZero()
    uninitialized.m_beta = 0.0f
    uninitialized.m_gamma = 0.0f
    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Point-to-point constraint
// C = p2 - p1
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Angle constraint
// C = angle2 - angle1 - referenceAngle
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

/// Weld joint definition. You need to specify local anchor points
/// where they are attached and the relative body angle. The position
/// of the anchor points is important for computing the reaction torque.
struct b2WeldJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The bodyB angle minus bodyA angle in the reference state (radians).
    referenceAngle float,

    /// The rotational stiffness in N*m
    /// Disable softness with a value of 0
    stiffness float,

    /// The rotational damping in N*m*s
    damping float
) {
    /// Initialize the bodies, anchors, reference angle, stiffness, and damping.
    /// @param bodyA the first body connected by this joint
    /// @param bodyB the second body connected by this joint
    /// @param anchor the point of connection in world coordinates
    func Initialize(bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
        this.referenceAngle = bB.GetAngle() - bA.GetAngle()
    }
}

func b2WeldJointDef() b2WeldJointDef {
    wjd POD b2WeldJointDef = undef
    *cast *b2JointDef &wjd = b2JointDef()
    wjd.type = b2JointType::e_weldJoint
    wjd.localAnchorA.Set(0.0f, 0.0f)
    wjd.localAnchorB.Set(0.0f, 0.0f)
    wjd.referenceAngle = 0.0f
    wjd.stiffness = 0.0f
    wjd.damping = 0.0f
    return wjd
}

/// A weld joint essentially glues two bodies together. A weld joint may
/// distort somewhat because the island constraint solver is approximate.
struct b2WeldJoint (
    struct b2Joint,

    m_stiffness float,
    m_damping float,
    m_bias float,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_referenceAngle float,
    m_gamma float,
    m_impulse b2Vec3,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_mass b2Mat33
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)
        return P * inv_dt
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_impulse.z
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 { return &this.m_localAnchorB; }

    /// Get the reference angle.
    func GetReferenceAngle() float { return this.m_referenceAngle; }

    /// Set/get stiffness in N*m
    func SetStiffness(hz float) void { this.m_stiffness = hz; }
    func GetStiffness() float { return this.m_stiffness; }

    /// Set/get damping in N*m*s
    func SetDamping(damping float) void { this.m_damping = damping; }
    func GetDamping() float { return this.m_damping; }

    /// Dump to b2Log
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2WeldJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.referenceAngle = %hf;\n', this.m_referenceAngle)
        b2Dump('  jd.stiffness = %hf;\n', this.m_stiffness)
        b2Dump('  jd.damping = %hf;\n', this.m_damping)
        b2Dump('  joints[%d] = m_world.CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // J = [-I -r1_skew I r2_skew]
        //     [ 0       -1 0       1]
        // r_skew = [-ry rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        K POD b2Mat33 = undef
        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB
        K.ey.x = -1.0f * this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB
        K.ez.x = -1.0f * this.m_rA.y * iA - this.m_rB.y * iB
        K.ex.y = K.ey.x
        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB
        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB
        K.ex.z = K.ez.x
        K.ey.z = K.ez.y
        K.ez.z = iA + iB

        if this.m_stiffness > 0.0f {
            K.GetInverse22(&this.m_mass)

            invM float = iA + iB
            C float = aB - aA - this.m_referenceAngle

            // Damping coefficient
            d float = this.m_damping

            // Spring stiffness
            k float = this.m_stiffness

            // magic formulas
            h float = data.step.dt
            this.m_gamma = h * (d + h * k)
            this.m_gamma = this.m_gamma != 0.0f ? 1.0f / this.m_gamma : 0.0f
            this.m_bias = C * h * k * this.m_gamma

            invM += this.m_gamma
            this.m_mass.ez.z = invM != 0.0f ? 1.0f / invM : 0.0f
        } else if K.ez.z == 0.0f {
            K.GetInverse22(&this.m_mass)
            this.m_gamma = 0.0f
            this.m_bias = 0.0f
        } else {
            K.GetSymInverse33(&this.m_mass)
            this.m_gamma = 0.0f
            this.m_bias = 0.0f
        }

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_impulse.MultiplyAssign(data.step.dtRatio)

            P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)

            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + this.m_impulse.z)

            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + this.m_impulse.z)
        } else {
            this.m_impulse.SetZero()
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        if this.m_stiffness > 0.0f {
            Cdot2 float = wB - wA

            impulse2 float = -1.0f * this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z)
            this.m_impulse.z += impulse2

            wA -= iA * impulse2
            wB += iB * impulse2

            Cdot1 POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)

            impulse1 POD b2Vec2 = b2Mul22(this.m_mass, Cdot1).Negated()
            this.m_impulse.x += impulse1.x
            this.m_impulse.y += impulse1.y

            P POD b2Vec2 = impulse1

            vA.SubtractAssign(P * mA)
            wA -= iA * b2Cross(this.m_rA, P)

            vB.AddAssign(P * mB)
            wB += iB * b2Cross(this.m_rB, P)
        } else {
            Cdot1 POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)
            Cdot2 float = wB - wA
            Cdot POD b2Vec3 = POD b2Vec3(Cdot1.x, Cdot1.y, Cdot2)

            impulse POD b2Vec3 = POD b2Mul(this.m_mass, Cdot).Negated()
            this.m_impulse.AddAssign(impulse)

            P POD b2Vec2 = POD b2Vec2(impulse.x, impulse.y)

            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + impulse.z)

            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + impulse.z)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        positionError, angularError float = undef

        K POD b2Mat33 = undef
        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB
        K.ey.x = -1.0f * rA.y * rA.x * iA - rB.y * rB.x * iB
        K.ez.x = -1.0f * rA.y * iA - rB.y * iB
        K.ex.y = K.ey.x
        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB
        K.ez.y = rA.x * iA + rB.x * iB
        K.ex.z = K.ez.x
        K.ey.z = K.ez.y
        K.ez.z = iA + iB

        if this.m_stiffness > 0.0f {
            C1 POD b2Vec2 = POD cB + rB - cA - rA

            positionError = C1.Length()
            angularError = 0.0f

            P POD b2Vec2 = POD K.Solve22(C1).Negated()

            cA.SubtractAssign(P * mA)
            aA -= iA * b2Cross(rA, P)

            cB.AddAssign(P * mB)
            aB += iB * b2Cross(rB, P)
        } else {
            C1 POD b2Vec2 = POD cB + rB - cA - rA
            C2 float = aB - aA - this.m_referenceAngle

            positionError = C1.Length()
            angularError = b2Abs(C2)

            C POD b2Vec3 = POD b2Vec3(C1.x, C1.y, C2)
        
            impulse POD b2Vec3 = undef

            if K.ez.z > 0.0f {
                impulse = K.Solve33(C).Negated()
            } else {
                impulse2 POD b2Vec2 = K.Solve22(C1).Negated()
                impulse.Set(impulse2.x, impulse2.y, 0.0f)
            }

            P POD b2Vec2 = POD b2Vec2(impulse.x, impulse.y)

            cA.SubtractAssign(P * mA)
            aA -= iA * (b2Cross(rA, P) + impulse.z)

            cB.AddAssign(P * mB)
            aB += iB * (b2Cross(rB, P) + impulse.z)
        }

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return positionError <= b2_linearSlop && angularError <= b2_angularSlop
    }
}


func b2Joint\CreateRaw\b2WeldJoint(out uninitialized *b2WeldJoint, in definition *b2WeldJointDef) *b2WeldJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_referenceAngle = definition.referenceAngle
    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    uninitialized.m_impulse.SetZero()

    return uninitialized
}


// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Linear constraint (point-to-line)
// d = pB - pA = xB + rB - xA - rA
// C = dot(ay, d)
// Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA, rA))
//      = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB, ay), vB)
// J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]

// Spring linear constraint
// C = dot(ax, d)
// Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) + dot(cross(rB, ax), vB)
// J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]

// Motor rotational constraint
// Cdot = wB - wA
// J = [0 0 -1 0 0 1]


struct b2WheelJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The local translation axis in bodyA.
    localAxisA b2Vec2,

    /// Enable/disable the joint limit.
    enableLimit bool,

    /// The lower translation limit, usually in meters.
    lowerTranslation float,

    /// The upper translation limit, usually in meters.
    upperTranslation float,

    /// Enable/disable the joint motor.
    enableMotor bool,

    /// The maximum motor torque, usually in N-m.
    maxMotorTorque float,

    /// The desired motor speed in radians per second.
    motorSpeed float,

    /// Suspension stiffness. Typically in units N/m.
    stiffness float,

    /// Suspension damping. Typically in units of N*s/m.
    damping float
) {
    /// Initialize the bodies, anchors, axis, and reference angle using the world
    /// anchor and world axis.
    func Initialize(bodyA, bodyB *b2Body, in anchor, axis *b2Vec2) void {
        this.bodyA = bodyA
        this.bodyB = bodyB
        this.localAnchorA = bodyA.GetLocalPoint(anchor)
        this.localAnchorB = bodyB.GetLocalPoint(anchor)
        this.localAxisA = bodyA.GetLocalVector(axis)
    }
}

func b2WheelJointDef() b2WheelJointDef {
    wjd POD b2WheelJointDef = undef
    *cast *b2JointDef &wjd = b2JointDef()
    wjd.type = b2JointType::e_wheelJoint
    wjd.localAnchorA.SetZero()
    wjd.localAnchorB.SetZero()
    wjd.localAxisA.Set(1.0f, 0.0f)
    wjd.enableLimit = false
    wjd.lowerTranslation = 0.0f
    wjd.upperTranslation = 0.0f
    wjd.enableMotor = false
    wjd.maxMotorTorque = 0.0f
    wjd.motorSpeed = 0.0f
    wjd.stiffness = 0.0f
    wjd.damping = 0.0f
    return wjd
}

/// A wheel joint. This joint provides two degrees of freedom: translation
/// along an axis fixed in bodyA and rotation in the plane. In other words, it is a point to
/// line constraint with a rotational motor and a linear spring/damper. The spring/damper is
/// initialized upon creation. This joint is designed for vehicle suspensions.
struct b2WheelJoint (
    struct b2Joint,

    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_localXAxisA b2Vec2,
    m_localYAxisA b2Vec2,

    m_impulse float,
    m_motorImpulse float,
    m_springImpulse float,

    m_lowerImpulse float,
    m_upperImpulse float,
    m_translation float,
    m_lowerTranslation float,
    m_upperTranslation float,

    m_maxMotorTorque float,
    m_motorSpeed float,

    m_enableLimit bool,
    m_enableMotor bool,

    m_stiffness float,
    m_damping float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,

    m_ax, m_ay b2Vec2,
    m_sAx, m_sBx float,
    m_sAy, m_sBy float,

    m_mass float,
    m_motorMass float,
    m_axialMass float,
    m_springMass float,

    m_bias float,
    m_gamma float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        return inv_dt * (this.m_ay * this.m_impulse + this.m_ax * (this.m_springImpulse + this.m_lowerImpulse - this.m_upperImpulse))
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_motorImpulse
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2  { return &this.m_localAnchorB; }

    /// The local joint axis relative to bodyA.
    func GetLocalAxisA() *b2Vec2 { return &this.m_localXAxisA; }

    /// Get the current joint translation, usually in meters.
    func GetJointTranslation() float {
        bA *b2Body = this.m_bodyA
        bB *b2Body = this.m_bodyB

        pA POD b2Vec2 = POD bA.GetWorldPoint(&this.m_localAnchorA)
        pB POD b2Vec2 = POD bB.GetWorldPoint(&this.m_localAnchorB)
        d POD b2Vec2 = POD pB - pA
        axis POD b2Vec2 = POD bA.GetWorldVector(&this.m_localXAxisA)

        translation float = b2Dot(d, axis)
        return translation
    }

    /// Get the current joint linear speed, usually in meters per second.
    func GetJointLinearSpeed() float {
        bA *b2Body = this.m_bodyA
        bB *b2Body = this.m_bodyB

        rA POD b2Vec2 = POD b2Mul(bA.m_xf.q, this.m_localAnchorA - bA.m_sweep.localCenter)
        rB POD b2Vec2 = POD b2Mul(bB.m_xf.q, this.m_localAnchorB - bB.m_sweep.localCenter)
        p1 POD b2Vec2 = POD bA.m_sweep.c + rA
        p2 POD b2Vec2 = POD bB.m_sweep.c + rB
        d POD b2Vec2 = POD p2 - p1
        axis POD b2Vec2 = POD b2Mul(bA.m_xf.q, this.m_localXAxisA)

        vA POD b2Vec2 = bA.m_linearVelocity
        vB POD b2Vec2 = bB.m_linearVelocity
        wA float = bA.m_angularVelocity
        wB float = bB.m_angularVelocity

        speed float = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA))
        return speed
    }

    /// Get the current joint angle in radians.
    func GetJointAngle() float {
        bA *b2Body = this.m_bodyA
        bB *b2Body = this.m_bodyB
        return bB.m_sweep.a - bA.m_sweep.a
    }

    /// Get the current joint angular speed in radians per second.
    func GetJointAngularSpeed() float {
        wA float = this.m_bodyA.m_angularVelocity
        wB float = this.m_bodyB.m_angularVelocity
        return wB - wA
    }

    /// Is the joint limit enabled?
    func IsLimitEnabled() bool {
        return this.m_enableLimit
    }

    /// Enable/disable the joint translation limit.
    func EnableLimit(flag bool) void {
        if flag != this.m_enableLimit {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableLimit = flag
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }
    }

    /// Get the lower joint translation limit, usually in meters.
    func GetLowerLimit() float {
        return this.m_lowerTranslation
    }

    /// Get the upper joint translation limit, usually in meters.
    func GetUpperLimit() float {
        return this.m_upperTranslation
    }

    /// Set the joint translation limits, usually in meters.
    func SetLimits(lower, upper float) void {
        b2Assert(lower <= upper, #get __file__, #get __line__, 'b2Assert(lower <= upper)')

        if lower != this.m_lowerTranslation || upper != this.m_upperTranslation {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_lowerTranslation = lower
            this.m_upperTranslation = upper
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }
    }

    /// Is the joint motor enabled?
    func IsMotorEnabled() bool {
        return this.m_enableMotor
    }

    /// Enable/disable the joint motor.
    func EnableMotor(flag bool) void {
        if flag != this.m_enableMotor {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_enableMotor = flag
        }
    }

    /// Set the motor speed, usually in radians per second.
    func SetMotorSpeed(speed float) void {
        if speed != this.m_motorSpeed {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_motorSpeed = speed
        }
    }

    /// Get the motor speed, usually in radians per second.
    func GetMotorSpeed() float { return this.m_motorSpeed; }

    /// Set/Get the maximum motor force, usually in N-m.
    func SetMaxMotorTorque(torque float) void {
        if torque != this.m_maxMotorTorque {
            this.m_bodyA.SetAwake(true)
            this.m_bodyB.SetAwake(true)
            this.m_maxMotorTorque = torque
        }
    }

    func GetMaxMotorTorque() float { return this.m_maxMotorTorque; }

    /// Get the current motor torque given the inverse time step, usually in N-m.
    func GetMotorTorque(inv_dt float) float {
        return inv_dt * this.m_motorImpulse
    }

    /// Access spring stiffness
    func SetStiffness(stiffness float) void {
        this.m_stiffness = stiffness
    }

    func GetStiffness() float {
        return this.m_stiffness
    }

    /// Access damping
    func SetDamping(damping float) void {
        this.m_damping = damping
    }

    func GetDamping() float {
        return this.m_damping
    }

    /// Dump to b2Log
    // (override)
    func Dump() void {
        // FLT_DECIMAL_DIG == 9

        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2WheelJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.localAxisA.Set(%hf, %hf);\n', this.m_localXAxisA.x, this.m_localXAxisA.y)
        b2Dump('  jd.enableMotor = bool(%d);\n', this.m_enableMotor)
        b2Dump('  jd.motorSpeed = %hf;\n', this.m_motorSpeed)
        b2Dump('  jd.maxMotorTorque = %hf;\n', this.m_maxMotorTorque)
        b2Dump('  jd.stiffness = %hf;\n', this.m_stiffness)
        b2Dump('  jd.damping = %hf;\n', this.m_damping)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    ///
    // (override)
    func Draw(draw *b2Draw) void {
        xfA *b2Transform = this.m_bodyA.GetTransform()
        xfB *b2Transform = this.m_bodyB.GetTransform()
        pA POD b2Vec2 = POD b2Mul(xfA, this.m_localAnchorA)
        pB POD b2Vec2 = POD b2Mul(xfB, this.m_localAnchorB)

        axis POD b2Vec2 = b2Mul(xfA.q, this.m_localXAxisA)

        c1 POD b2Color = POD b2Color(0.7f, 0.7f, 0.7f)
        c2 POD b2Color = POD b2Color(0.3f, 0.9f, 0.3f)
        c3 POD b2Color = POD b2Color(0.9f, 0.3f, 0.3f)
        c4 POD b2Color = POD b2Color(0.3f, 0.3f, 0.9f)
        c5 POD b2Color = POD b2Color(0.4f, 0.4f, 0.4f)

        draw.DrawSegment(&pA, &pB, &c5)

        if this.m_enableLimit {
            lower POD b2Vec2 = pA + axis * this.m_lowerTranslation
            upper POD b2Vec2 = pA + axis * this.m_upperTranslation
            perp POD b2Vec2 = b2Mul(xfA.q, this.m_localYAxisA)
            draw.DrawSegment(lower, upper, &c1)
            draw.DrawSegment(lower - perp * 0.5f, lower + perp * 0.5f, &c2)
            draw.DrawSegment(upper - perp * 0.5f, upper + perp * 0.5f, &c3)
        } else {
            draw.DrawSegment(pA - axis * 1.0f, pA + axis * 1.0f, &c1)
        }

        draw.DrawPoint(&pA, 5.0f, &c1)
        draw.DrawPoint(&pB, 5.0f, &c4)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = POD data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = POD data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        // Compute the effective masses.
        rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
        d  POD b2Vec2 = POD cB + rB - cA - rA

        // Point to line constraint
        if true {
            this.m_ay = b2Mul(qA, this.m_localYAxisA)
            this.m_sAy = b2Cross(d + rA, this.m_ay)
            this.m_sBy = b2Cross(rB, this.m_ay)

            this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy

            if this.m_mass > 0.0f {
                this.m_mass = 1.0f / this.m_mass
            }
        }

        // Spring constraint
        this.m_ax = b2Mul(qA, this.m_localXAxisA)
        this.m_sAx = b2Cross(d + rA, this.m_ax)
        this.m_sBx = b2Cross(rB, this.m_ax)

        const invMass float = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx

        if invMass > 0.0f {
            this.m_axialMass = 1.0f / invMass
        } else {
            this.m_axialMass = 0.0f
        }

        this.m_springMass = 0.0f
        this.m_bias = 0.0f
        this.m_gamma = 0.0f

        if this.m_stiffness > 0.0f && invMass > 0.0f {
            this.m_springMass = 1.0f / invMass

            C float = b2Dot(d, this.m_ax)

            // magic formulas
            h float = data.step.dt
            this.m_gamma = h * (this.m_damping + h * this.m_stiffness)

            if this.m_gamma > 0.0f {
                this.m_gamma = 1.0f / this.m_gamma
            }

            this.m_bias = C * h * this.m_stiffness * this.m_gamma
            this.m_springMass = invMass + this.m_gamma

            if this.m_springMass > 0.0f {
                this.m_springMass = 1.0f / this.m_springMass
            }
        } else {
            this.m_springImpulse = 0.0f
        }

        if this.m_enableLimit {
            this.m_translation = b2Dot(this.m_ax, d)
        } else {
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        if this.m_enableMotor {
            this.m_motorMass = iA + iB

            if this.m_motorMass > 0.0f {
                this.m_motorMass = 1.0f / this.m_motorMass
            }
        } else {
            this.m_motorMass = 0.0f
            this.m_motorImpulse = 0.0f
        }

        if data.step.warmStarting {
            // Account for variable time step.
            this.m_impulse *= data.step.dtRatio
            this.m_springImpulse *= data.step.dtRatio
            this.m_motorImpulse *= data.step.dtRatio

            axialImpulse float = this.m_springImpulse + this.m_lowerImpulse - this.m_upperImpulse
            P POD b2Vec2 = this.m_impulse * this.m_ay + axialImpulse * this.m_ax
            LA float = this.m_impulse * this.m_sAy + axialImpulse * this.m_sAx + this.m_motorImpulse
            LB float = this.m_impulse * this.m_sBy + axialImpulse * this.m_sBx + this.m_motorImpulse

            vA.SubtractAssign(P * this.m_invMassA)
            wA -= this.m_invIA * LA

            vB.AddAssign(P * this.m_invMassB)
            wB += this.m_invIB * LB
        } else {
            this.m_impulse = 0.0f
            this.m_springImpulse = 0.0f
            this.m_motorImpulse = 0.0f
            this.m_lowerImpulse = 0.0f
            this.m_upperImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        // Solve spring constraint
        if true {
            Cdot float = b2Dot(this.m_ax, vB - vA) + this.m_sBx * wB - this.m_sAx * wA
            impulse float = (0.0f - this.m_springMass) * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse)
            this.m_springImpulse += impulse

            P POD b2Vec2 = impulse * this.m_ax
            LA float = impulse * this.m_sAx
            LB float = impulse * this.m_sBx

            vA.SubtractAssign(mA * P)
            wA -= iA * LA

            vB.AddAssign(mB * P)
            wB += iB * LB
        }

        // Solve rotational motor constraint
        if true {
            Cdot float = wB - wA - this.m_motorSpeed
            impulse float = -1.0f * this.m_motorMass * Cdot

            oldImpulse float = this.m_motorImpulse
            maxImpulse float = data.step.dt * this.m_maxMotorTorque
            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, 0.0f - maxImpulse, maxImpulse)
            impulse = this.m_motorImpulse - oldImpulse

            wA -= iA * impulse
            wB += iB * impulse
        }

        if this.m_enableLimit {
            // Lower limit
            if true {
                C float = this.m_translation - this.m_lowerTranslation
                Cdot float = b2Dot(this.m_ax, vB - vA) + this.m_sBx * wB - this.m_sAx * wA
                impulse float = -1.0f * this.m_axialMass * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_lowerImpulse
                this.m_lowerImpulse = b2Max(this.m_lowerImpulse + impulse, 0.0f)
                impulse = this.m_lowerImpulse - oldImpulse

                P POD b2Vec2 = this.m_ax * impulse
                LA float = this.m_sAx * impulse
                LB float = this.m_sBx * impulse

                vA.SubtractAssign(P * mA)
                wA -= iA * LA
                vB.AddAssign(P * mB)
                wB += iB * LB
            }

            // Upper limit
            // Note: signs are flipped to keep C positive when the constraint is satisfied.
            // This also keeps the impulse positive when the limit is active.
            if true {
                C float = this.m_upperTranslation - this.m_translation
                Cdot float = b2Dot(this.m_ax, vA - vB) + this.m_sAx * wA - this.m_sBx * wB
                impulse float = -1.0f * this.m_axialMass * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
                oldImpulse float = this.m_upperImpulse
                this.m_upperImpulse = b2Max(this.m_upperImpulse + impulse, 0.0f)
                impulse = this.m_upperImpulse - oldImpulse

                P POD b2Vec2 = this.m_ax * impulse
                LA float = this.m_sAx * impulse
                LB float = this.m_sBx * impulse

                vA.AddAssign(P * mA)
                wA += iA * LA
                vB.SubtractAssign(P * mB)
                wB -= iB * LB
            }
        }

        // Solve point to line constraint
        if true {
            Cdot float = b2Dot(this.m_ay, vB - vA) + this.m_sBy * wB - this.m_sAy * wA
            impulse float = -1.0f * this.m_mass * Cdot
            this.m_impulse += impulse

            P POD b2Vec2 = this.m_ay * impulse
            LA float = this.m_sAy * impulse
            LB float = this.m_sBy * impulse

            vA.SubtractAssign(P * mA)
            wA -= iA * LA

            vB.AddAssign(mB * P)
            wB += iB * LB
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        linearError float = 0.0f

        if this.m_enableLimit {
            qA POD b2Rot = POD b2Rot(aA)
            qB POD b2Rot = POD b2Rot(aB)

            rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
            rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
            d POD b2Vec2 = POD (cB - cA) + rB - rA

            ax b2Vec2 = POD b2Mul(qA, this.m_localXAxisA)
            sAx float = b2Cross(d + rA, this.m_ax)
            sBx float = b2Cross(rB, this.m_ax)

            C float = 0.0f
            translation float = b2Dot(ax, d)

            if b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0f * b2_linearSlop {
                C = translation
            } else if translation <= this.m_lowerTranslation {
                C = b2Min(translation - this.m_lowerTranslation, 0.0f)
            } else if translation >= this.m_upperTranslation {
                C = b2Max(translation - this.m_upperTranslation, 0.0f)
            }

            if C != 0.0f {
                invMass float = this.m_invMassA + this.m_invMassB + this.m_invIA * sAx * sAx + this.m_invIB * sBx * sBx
                impulse float = 0.0f

                if invMass != 0.0f {
                    impulse = -1.0f * C / invMass
                }

                P POD b2Vec2 = ax * impulse
                LA float = sAx * impulse
                LB float = sBx * impulse

                cA.SubtractAssign(P * this.m_invMassA)
                aA -= this.m_invIA * LA
                cB.AddAssign(P * this.m_invMassB)
                aB += this.m_invIB * LB

                linearError = b2Abs(C)
            }
        }

        // Solve perpendicular constraint
        if true {
            qA POD b2Rot = POD b2Rot(aA)
            qB POD b2Rot = POD b2Rot(aB)

            rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
            rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)
            d POD b2Vec2 = POD (cB - cA) + rB - rA

            ay POD b2Vec2 = POD b2Mul(qA, this.m_localYAxisA)

            sAy float = b2Cross(d + rA, ay)
            sBy float = b2Cross(rB, ay)

            C float = b2Dot(d, ay)

            invMass float = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy

            impulse float = 0.0f

            if invMass != 0.0f {
                impulse = -1.0f * C / invMass
            }

            P POD b2Vec2 = ay * impulse
            LA float = sAy * impulse
            LB float = sBy * impulse

            cA.SubtractAssign(P * this.m_invMassA)
            aA -= this.m_invIA * LA
            cB.AddAssign(P * this.m_invMassB)
            aB += this.m_invIB * LB

            linearError = b2Max(linearError, b2Abs(C))
        }

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return linearError <= b2_linearSlop
    }
}

func b2Joint\CreateRaw\b2WheelJoint(out uninitialized *b2WheelJoint, in definition *b2WheelJointDef) *b2WheelJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_localXAxisA = definition.localAxisA
    uninitialized.m_localYAxisA = b2Cross(1.0f, uninitialized.m_localXAxisA)

    uninitialized.m_mass = 0.0f
    uninitialized.m_impulse = 0.0f
    uninitialized.m_motorMass = 0.0f
    uninitialized.m_motorImpulse = 0.0f
    uninitialized.m_springMass = 0.0f
    uninitialized.m_springImpulse = 0.0f

    uninitialized.m_axialMass = 0.0f
    uninitialized.m_lowerImpulse = 0.0f
    uninitialized.m_upperImpulse = 0.0f
    uninitialized.m_lowerTranslation = definition.lowerTranslation
    uninitialized.m_upperTranslation = definition.upperTranslation
    uninitialized.m_enableLimit = definition.enableLimit

    uninitialized.m_maxMotorTorque = definition.maxMotorTorque
    uninitialized.m_motorSpeed = definition.motorSpeed
    uninitialized.m_enableMotor = definition.enableMotor

    uninitialized.m_bias = 0.0f
    uninitialized.m_gamma = 0.0f

    uninitialized.m_ax.SetZero()
    uninitialized.m_ay.SetZero()

    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    return uninitialized
}

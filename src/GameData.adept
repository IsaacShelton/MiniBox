
#default music true

import List
import audio
import "Character.adept"
import "Animation.adept"
import "MainMenu.adept"
import "SelectScene.adept"
import "ScoreScene.adept"
import "WinnerScene.adept"
import "HurdleScene.adept"
import "BombScene.adept"
import "TriviaScene.adept"
import "BumperScene.adept"
import "PizzaScene.adept"
import "SlimeScene.adept"

define NUM_FACTS = 180

struct GameData (
    scene *Scene,
    gamepads <Gamepad> List,
    facts <String> List,
    lies <String> List,
    characters 4 Character,
    scores 4 int,
    happy1,
    raining_bits,
    cant_stop_winning,
    dark_ambience
    orbital_colossus,
    wasteland_overdrive,
    trouble_makers,
    gaseous_tethanus PlayableSound,
    well_done,
    explosion,
    splat,
    eat Sound,
    shuffle,
    right,
    wrong,
    tick,
    ding,
    imwalkinghere,
    mamamia,
    mamamiagod,
    squish PlayableSound,
    winner int,
    pizza_textures <CaptTexture> Grid,

    bomb_animation
    splode_animation
    smoke_animation,
    bloodsplat_animation Animation
) {
    func __defer__ {
        if this.scene, this.scene.__defer__()
        audioTerminate()
    }

    func load {
        audioInit()
        defer this.setScene(new MainMenu)

        this.facts = embed 'static_assets/facts.txt'.splitIntoViews("\n")
        this.facts.length = NUM_FACTS

        this.lies = embed 'static_assets/lies.txt'.splitIntoViews("\n")
        this.lies.length = NUM_FACTS

        this.createPizzaTextures()
        
        // NOTE: We will neglect destroy()ing our sounds

        #if music
        this.happy1.load(where() + "assets/happy_adventure.ogg", true, 1.5f)
        this.raining_bits.load(where() + "assets/raining_bits.ogg", true, 0.8f)
        this.cant_stop_winning.load(where() + "assets/cant_stop_winning.ogg", true, 0.8f)
        this.dark_ambience.load(where() + "assets/dark_ambience.ogg", true, 1.0f)
        this.orbital_colossus.load(where() + "assets/orbital_colossus.ogg", true, 0.6f)
        this.wasteland_overdrive.load(where() + "assets/wasteland_overdrive.ogg", true, 1.0f)
        this.trouble_makers.load(where() + "assets/trouble_makers.ogg", true, 1.0f)
        this.gaseous_tethanus.load(where() + "assets/gaseous_tethanus.ogg", true, 1.0f)
        #end

        this.well_done.load(where() + "assets/well_done.ogg", false, 1.5f)
        this.explosion.load(where() + "assets/explosion.wav", false, 1.5f)
        this.splat.load(where() + "assets/splat.wav", false, 1.5f)
        this.eat.load(where() + "assets/eat.wav", false, 0.1f)
        this.shuffle.load(where() + "assets/shuffle.wav", false, 1.5f)
        this.right.load(where() + "assets/right.wav", false, 1.5f)
        this.wrong.load(where() + "assets/wrong.wav", false, 1.5f)
        this.tick.load(where() + "assets/tick.ogg", false, 1.5f)
        this.ding.load(where() + "assets/ding.wav", false, 1.5f)
        this.imwalkinghere.load(where() + "assets/imwalkinghere.wav", false, 1.0f)
        this.mamamia.load(where() + "assets/mamamia.wav", false, 1.0f)
        this.mamamiagod.load(where() + "assets/mamamiagod.wav", false, 1.0f)
        this.squish.load(where() + "assets/squish.wav", false, 1.0f)

        this.winner = -1

        this.bomb_animation = animation({
            &textures.bomb1,
            &textures.bomb2,
            &textures.bomb3
        } as <*CaptTexture> List, 20)

        this.splode_animation = animation({
            &textures.splode1,
            &textures.splode2,
            &textures.splode3,
            &textures.splode4,
            &textures.splode5,
            &textures.splode6,
            &textures.splode7,
            &textures.splode8,
            &textures.splode9,
            &textures.splode10,
            &textures.splode11,
            &textures.splode12,
            &textures.splode13,
            &textures.splode14,
            &textures.splode15,
            &textures.splode16,
            &textures.splode17
        } as <*CaptTexture> List, 1)

        this.smoke_animation = animation({
            &textures.smoke1,
            &textures.smoke2,
            &textures.smoke3,
            &textures.smoke4
        } as <*CaptTexture> List, 2)

        this.bloodsplat_animation = animation({
            &textures.bloodsplat
        } as <*CaptTexture> List, 2400)
    }

    func createPizzaTextures {
        empty CaptTexture = undef
        empty.invalidate()

        this.pizza_textures = grid(10, 10, empty)

        repeat 10 using x, repeat 10 using y {
            if ( (y == 0 || y == 9) && (x <= 1 || x >= 8) ) ||
               ( (y == 1 || y == 8) && (x == 0 || x == 9) ) {
                continue
            }    

            filename String = sprintf("slice_%d_%d.png", y, x)
            this.pizza_textures[gridCoord(x, y)] = captTexture(where() + "assets/" + filename, true)
        }
    }
    
    func reset {
        this.__defer__()
        memset(this, 0, sizeof(*this))
        this.load()
    }

    func setScene(existing_scene *Scene) {
        if this.scene, this.scene.__defer__()
        this.scene = existing_scene
        this.scene.enter() 
    }

    func setScene(new_scene *$SceneLike) {
        if this.scene, this.scene.__defer__()
        this.scene = scene(new_scene)
        this.scene.enter()
    }

    func step {
        this.updateGamepads()
        if this.scene, this.scene.step()
    }

    func draw {
        if this.scene, this.scene.draw()
    }

    func updateGamepads(){
        repeat 4, this.maybeAddGamepad(GLFW_JOYSTICK_1 + idx)
    }

    func maybeAddGamepad(joystick int){
        gamepad *Gamepad = this.gamepads.find(joystick)

        unless glfwJoystickPresent(joystick) {
            this.gamepads.removeIfExists(joystick)
            return
        }

        if gamepad == null {
            gamepad = this.gamepads.add()
            gamepad.id = joystick
        }        

        prev_buttons 10 ubyte = undef
        memcpy(prev_buttons at 0, gamepad.buttons at 0, sizeof ubyte * 10)

        axes *float = glfwGetJoystickAxes(joystick, undef axes_count int)
        buttons *ubyte = glfwGetJoystickButtons(joystick, undef buttons_count int)

        if axes_count > 0 {
            prev_x int = gamepad.x
            prev_y int = gamepad.y
            gamepad.x = cast int clamp(axes[0] * 2.0f, -1.0f, 1.0f)
            gamepad.y = cast int clamp(axes[1] * 2.0f, -1.0f, 1.0f)
            gamepad.just_x = gamepad.x != prev_x
            gamepad.just_y = gamepad.y != prev_y
        }

        if buttons_count >= 10 {
            memcpy(gamepad.buttons at 0, buttons, 10 * sizeof ubyte)
        }

        repeat 10 {
            gamepad.just[idx] = prev_buttons[idx] != buttons[idx]
        }
    }
}

gamedata GameData

struct Gamepad(id int, x, y int, just_x, just_y bool, buttons, just 10 ubyte) {
    func startHeld()  bool = this.buttons[9]
    func selectHeld() bool = this.buttons[8]
    func aHeld()      bool = this.buttons[2]
    func bHeld()      bool = this.buttons[1]
    func xHeld()      bool = this.buttons[0]
    func yHeld()      bool = this.buttons[3]

    func start()  bool = this.buttons[9] && this.just[9]
    func select() bool = this.buttons[8] && this.just[8]
    func a()      bool = this.buttons[2] && this.just[2]
    func b()      bool = this.buttons[1] && this.just[1]
    func x()      bool = this.buttons[0] && this.just[0]
    func y()      bool = this.buttons[3] && this.just[3]

    func right()  bool = this.x ==  1 && this.just_x
    func left()   bool = this.x == -1 && this.just_x
    func up()     bool = this.y == -1 && this.just_y
    func down()   bool = this.y ==  1 && this.just_y

    func rightHeld() bool = this.x == 1
    func leftHeld()  bool = this.x == -1
    func upHeld()    bool = this.y == -1
    func downHeld()  bool = this.y == 1
}

func find(this *<Gamepad> List, id int) *Gamepad {
    each Gamepad in static *this, if it.id == id, return &it
    return null
}

func removeIfExists(this *<Gamepad> List, id int) {
   each Gamepad in static *this, if it.id == id, this.remove(idx); return
}

func choose(this *<$T> List) *$T {
    if this.length == 0, return null
    return &this.items[random(this.length)]
}

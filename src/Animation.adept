
import List
import list_util
import captain

struct Animation (frames <*CaptTexture> List, current_frame, ticker, interval usize) {
    func __assign__(other POD Animation) {
        this.frames = other.frames.clone()
        this.current_frame = other.current_frame
        this.ticker = other.ticker
        this.interval = other.interval
    }

    func reset {
        this.current_frame = 0
        this.ticker = 0
    }
    
    func now CaptTexture
        = *this.frames[this.current_frame]
    
    func update {
        if ++this.ticker > this.interval {
            this.ticker = 0
            this.advance()
        }
    }
    
    func advance {
        if ++this.current_frame == this.frames.length, this.current_frame = 0
    }
    
    func atEnd bool {
        return this.current_frame + 1 == this.frames.length && this.ticker + 1 == this.interval
    }
    
    func newInstance Animation {
        anim POD Animation = *this
        anim.current_frame = 0
        anim.ticker = 0
        return anim
    }

    // Creates a new instance of this animation,
    // that relies on the original's data to be preserved
    // for its duration
    func newChildInstance Animation {
        anim POD Animation
        anim.frames = this.frames
        anim.current_frame = 0
        anim.ticker = 0
        anim.interval = this.interval
        return anim
    }

    func isDependent bool {
        return this.frames.ownership == Ownership::REFERENCE
    }
}

func animation(frames <*CaptTexture> List, ticker_interval int) Animation {
    // Ensure this animation has ownership of given frames
    frames.make()

    anim POD Animation
    anim.frames = frames.commit()
    anim.interval = ticker_interval
    return anim
}
